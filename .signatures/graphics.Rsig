package "graphics" "3.3.1" {
	var ".__global__"
	var ".__NAMESPACE__."
	var ".__S3MethodsTable__."
	/**
	 * 
	 * This function produces a contour plot with the areas between the
	 * contours filled in solid color (Cleveland calls this a level plot).  A
	 * key showing how the colors map to z values is shown to the right of
	 * the plot.
	 *
	 */
	exported function ".filled.contour"("x", "y", "z", "levels", "col")
	var ".noGenerics"
	var ".packageName"
	/**
	 * 
	 * \code{par} can be used to set or query graphical parameters.
	 * Parameters can be set by specifying them as arguments to \code{par} in
	 * \code{tag = value} form, or by passing them as a list of tagged
	 * values.
	 *
	 */
	var ".Pars"
	function ".SSassign"("x", "value")
	var ".SSenv"
	function ".SSexists"("x")
	function ".SSget"("x")
	var ".units"
	/**
	 * 
	 * This function adds one or more straight lines through the current plot.
	 *
	 */
	exported function "abline"("a"="", "b"="", "h"="", "v"="", "reg"="", "coef"="", "untf"="FALSE", "...")
	/**
	 * 
	 * Draw arrows between pairs of points.
	 *
	 */
	exported function "arrows"("x0", "y0", "x1", "y1", "length"="0.25", "angle"="30", "code"="2", "col"="par(\"fg\")", "lty"="par(\"lty\")", "lwd"="par(\"lwd\")", "...")
	/**
	 * 
	 * Produce a Cohen-Friendly association plot indicating deviations from
	 * independence of rows and columns in a 2-dimensional contingency
	 * table.
	 *
	 */
	exported function "assocplot"("x", "col"="c(\"black\", \"red\")", "space"="0.3", "main"="", "xlab"="", "ylab"="")
	/**
	 * Adds an axis to the current plot, allowing the
	 * specification of the side, position, labels, and other options.
	 *
	 */
	exported function "axis"("side", "at"="", "labels"="TRUE", "tick"="TRUE", "line"="NA", "pos"="NA", "outer"="FALSE", "font"="NA", "lty"="solid", "lwd"="1", "lwd.ticks", "col"="", "col.ticks"="", "hadj"="NA", "padj"="NA", "...")
	/**
	 * 
	 * Generic function to add a suitable axis to the current plot.
	 *
	 */
	exported function "Axis"("x"="", "at"="", "...", "side", "labels"="")
	/**
	 * 
	 * Functions to plot objects of classes \code{"POSIXlt"},
	 * \code{"POSIXct"} and \code{"Date"} representing calendar dates and times.
	 *
	 */
	exported function "axis.Date"("side", "x", "at", "format", "labels"="TRUE", "...")
	function "Axis.Date"("x"="", "at"="", "...", "side", "labels"="TRUE")
	function "Axis.default"("x"="", "at"="", "...", "side", "labels"="")
	/**
	 * 
	 * Functions to plot objects of classes \code{"POSIXlt"},
	 * \code{"POSIXct"} and \code{"Date"} representing calendar dates and times.
	 *
	 */
	exported function "axis.POSIXct"("side", "x", "at", "format", "labels"="TRUE", "...")
	function "Axis.POSIXt"("x"="", "at"="", "...", "side", "labels"="TRUE")
	function "Axis.table"("x", "at", "...", "side"="1", "labels")
	/**
	 * 
	 * Compute pretty tickmark locations, the same way as \R{} does internally.
	 * This is only non-trivial when \bold{log} coordinates are active.
	 * By default, gives the \code{at} values which
	 * \code{\link{axis}(side)} would use.
	 *
	 */
	exported function "axTicks"("side", "axp"="", "usr"="", "log"="", "nintLog"="")
	/**
	 * 
	 * Creates a bar plot with vertical or horizontal bars.
	 *
	 */
	exported function "barplot"("height", "...")
	/**
	 * 
	 * Creates a bar plot with vertical or horizontal bars.
	 *
	 */
	exported function "barplot.default"("height", "width"="1", "space"="", "names.arg"="", "legend.text"="", "beside"="FALSE", "horiz"="FALSE", "density"="", "angle"="45", "col"="", "border"="par(\"fg\")", "main"="", "sub"="", "xlab"="", "ylab"="", "xlim"="", "ylim"="", "xpd"="TRUE", "log"="", "axes"="TRUE", "axisnames"="TRUE", "cex.axis"="par(\"cex.axis\")", "cex.names"="par(\"cex.axis\")", "inside"="TRUE", "plot"="TRUE", "axis.lty"="0", "offset"="0", "add"="FALSE", "args.legend"="", "...")
	/**
	 * 
	 * This function draws a box around the current plot in the given color
	 * and linetype.  The \code{bty} parameter determines
	 * the type of box drawn.  See \code{\link{par}} for details.
	 *
	 */
	exported function "box"("which"="plot", "lty"="solid", "...")
	/**
	 * 
	 * Produce box-and-whisker plot(s) of the given (grouped) values.
	 *
	 */
	exported function "boxplot"("x", "...")
	/**
	 * 
	 * Produce box-and-whisker plot(s) of the given (grouped) values.
	 *
	 */
	exported function "boxplot.default"("x", "...", "range"="1.5", "width"="", "varwidth"="FALSE", "notch"="FALSE", "outline"="TRUE", "names", "plot"="TRUE", "border"="par(\"fg\")", "col"="", "log"="", "pars"="list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5)", "horizontal"="FALSE", "add"="FALSE", "at"="")
	/**
	 * 
	 * Produce box-and-whisker plot(s) of the given (grouped) values.
	 *
	 */
	function "boxplot.formula"("formula", "data"="", "...", "subset", "na.action"="")
	/**
	 * 
	 * Interpreting the columns (or rows) of a matrix as different groups, draw a
	 * boxplot for each.
	 *
	 */
	exported function "boxplot.matrix"("x", "use.cols"="TRUE", "...")
	/**
	 * 
	 * \code{bxp} draws box plots based on the given summaries in \code{z}.
	 * It is usually called from within \code{\link{boxplot}}, but can be
	 * invoked directly.
	 *
	 */
	exported function "bxp"("z", "notch"="FALSE", "width"="", "varwidth"="FALSE", "outline"="TRUE", "notch.frac"="0.5", "log"="", "border"="par(\"fg\")", "pars"="", "frame.plot", "horizontal"="FALSE", "add"="FALSE", "at"="", "show.names"="", "...")
	var "C_abline"
	var "C_arrows"
	var "C_axis"
	var "C_BinCount"
	var "C_box"
	var "C_clip"
	var "C_contour"
	var "C_contourDef"
	var "C_convertX"
	var "C_convertY"
	var "C_dend"
	var "C_dendwindow"
	var "C_erase"
	var "C_filledcontour"
	var "C_identify"
	var "C_image"
	var "C_layout"
	var "C_locator"
	var "C_mtext"
	var "C_par"
	var "C_path"
	var "C_persp"
	var "C_plot_new"
	var "C_plot_window"
	var "C_plotXY"
	var "C_polygon"
	var "C_raster"
	var "C_rect"
	var "C_segments"
	var "C_StemLeaf"
	var "C_strHeight"
	var "C_strWidth"
	var "C_symbols"
	var "C_text"
	var "C_title"
	var "C_xspline"
	/**
	 * 
	 * Computes and plots conditional densities describing how the
	 * conditional distribution of a categorical variable \code{y} changes over a
	 * numerical variable \code{x}.
	 *
	 */
	exported function "cdplot"("x", "...")
	/**
	 * 
	 * Computes and plots conditional densities describing how the
	 * conditional distribution of a categorical variable \code{y} changes over a
	 * numerical variable \code{x}.
	 *
	 */
	function "cdplot.default"("x", "y", "plot"="TRUE", "tol.ylab"="0.05", "ylevels"="", "bw"="nrd0", "n"="512", "from"="", "to"="", "col"="", "border"="1", "main"="", "xlab"="", "ylab"="", "yaxlabels"="", "xlim"="", "ylim"="c(0, 1)", "...")
	/**
	 * 
	 * Computes and plots conditional densities describing how the
	 * conditional distribution of a categorical variable \code{y} changes over a
	 * numerical variable \code{x}.
	 *
	 */
	function "cdplot.formula"("formula", "data"="list()", "plot"="TRUE", "tol.ylab"="0.05", "ylevels"="", "bw"="nrd0", "n"="512", "from"="", "to"="", "col"="", "border"="1", "main"="", "xlab"="", "ylab"="", "yaxlabels"="", "xlim"="", "ylim"="c(0, 1)", "...", "subset"="")
	/**
	 * 
	 * Set clipping region in user coordinates
	 *
	 */
	exported function "clip"("x1", "x2", "y1", "y2")
	/**
	 * 
	 * \code{split.screen} defines a number of regions within the current
	 * device which can, to some extent, be treated as separate graphics
	 * devices.  It is useful for generating multiple plots on a single
	 * device.  Screens can themselves be split, allowing for quite complex
	 * arrangements of plots.
	 *
	 * \code{screen} is used to select which screen to draw in.
	 *
	 * \code{erase.screen} is used to clear a single screen, which it
	 * does by filling with the background colour.
	 *
	 * \code{close.screen} removes the specified screen definition(s).
	 *
	 */
	exported function "close.screen"("n", "all.screens"="FALSE")
	/**
	 * 
	 * This function produces two variants of the \bold{co}nditioning plots
	 * discussed in the reference below.
	 *
	 */
	exported function "co.intervals"("x", "number"="6", "overlap"="0.5")
	/**
	 * 
	 * Create a contour plot, or add contour lines to an existing plot.
	 *
	 */
	exported function "contour"("x", "...")
	/**
	 * 
	 * Create a contour plot, or add contour lines to an existing plot.
	 *
	 */
	exported function "contour.default"("x"="seq(0, 1, length.out = nrow(z))", "y"="seq(0, 1, length.out = ncol(z))", "z", "nlevels"="10", "levels"="pretty(zlim, nlevels)", "labels"="", "xlim"="range(x, finite = TRUE)", "ylim"="range(y, finite = TRUE)", "zlim"="range(z, finite = TRUE)", "labcex"="0.6", "drawlabels"="TRUE", "method"="flattest", "vfont", "axes"="TRUE", "frame.plot", "col"="par(\"fg\")", "lty"="par(\"lty\")", "lwd"="par(\"lwd\")", "add"="FALSE", "...")
	/**
	 * 
	 * This function produces two variants of the \bold{co}nditioning plots
	 * discussed in the reference below.
	 *
	 */
	exported function "coplot"("formula", "data", "given.values", "panel", "rows", "columns", "show.given"="TRUE", "col"="par(\"fg\")", "pch"="par(\"pch\")", "bar.bg"="c(num = gray(0.8), fac = gray(0.95))", "xlab"="c(x.name, paste(\"Given :\", a.name))", "ylab"="c(y.name, paste(\"Given :\", b.name))", "subscripts"="FALSE", "axlabels"="function(f) abbreviate(levels(f))", "number"="6", "overlap"="0.5", "xlim", "ylim", "...")
	/**
	 * 
	 * Draws a curve corresponding to a function over the interval
	 * \code{[from, to]}. \code{curve} can plot also an expression in the variable
	 * \code{xname}, default \samp{x}.
	 *
	 */
	exported function "curve"("expr", "from"="", "to"="", "n"="101", "add"="FALSE", "type"="l", "xname"="x", "xlab", "ylab"="", "log"="", "xlim"="", "...")
	/**
	 * 
	 * Draw a Cleveland dot plot.
	 *
	 */
	exported function "dotchart"("x", "labels"="", "groups"="", "gdata"="", "cex"="par(\"cex\")", "pt.cex", "pch"="21", "gpch"="21", "bg"="par(\"bg\")", "color"="par(\"fg\")", "gcolor"="par(\"fg\")", "lcolor"="gray", "xlim"="range(x[is.finite(x)])", "main"="", "xlab"="", "ylab"="", "...")
	/**
	 * 
	 * \code{split.screen} defines a number of regions within the current
	 * device which can, to some extent, be treated as separate graphics
	 * devices.  It is useful for generating multiple plots on a single
	 * device.  Screens can themselves be split, allowing for quite complex
	 * arrangements of plots.
	 *
	 * \code{screen} is used to select which screen to draw in.
	 *
	 * \code{erase.screen} is used to clear a single screen, which it
	 * does by filling with the background colour.
	 *
	 * \code{close.screen} removes the specified screen definition(s).
	 *
	 */
	exported function "erase.screen"("n")
	/**
	 * 
	 * This function produces a contour plot with the areas between the
	 * contours filled in solid color (Cleveland calls this a level plot).  A
	 * key showing how the colors map to z values is shown to the right of
	 * the plot.
	 *
	 */
	exported function "filled.contour"("x"="seq(0, 1, length.out = nrow(z))", "y"="seq(0, 1, length.out = ncol(z))", "z", "xlim"="range(x, finite = TRUE)", "ylim"="range(y, finite = TRUE)", "zlim"="range(z, finite = TRUE)", "levels"="pretty(zlim, nlevels)", "nlevels"="20", "color.palette", "col"="color.palette(length(levels) - 1)", "plot.title", "plot.axes", "key.title", "key.axes", "asp"="NA", "xaxs"="i", "yaxs"="i", "las"="1", "axes"="TRUE", "frame.plot", "...")
	/**
	 * 
	 * Creates a fourfold display of a 2 by 2 by \eqn{{k}} contingency table on
	 * the current graphics device, allowing for the visual inspection of the
	 * association between two dichotomous variables in one or several
	 * populations (strata).
	 *
	 */
	exported function "fourfoldplot"("x", "color"="c(\"#99CCFF\", \"#6699CC\")", "conf.level"="0.95", "std"="c(\"margins\", \"ind.max\", \"all.max\")", "margin"="c(1, 2)", "space"="0.2", "main"="", "mfrow"="", "mfcol"="")
	/**
	 * 
	 * This function (\code{frame} is an alias for
	 * \code{plot.new}) causes the completion of plotting in the current plot
	 * (if there is one) and an advance to a new graphics frame.  This is
	 * used in all high-level plotting functions and also useful for skipping
	 * plots when a multi-figure region is in use.
	 *
	 */
	exported function "frame"()
	/**
	 * 
	 * Convert between graphics coordinate systems.
	 *
	 */
	exported function "grconvertX"("x", "from"="user", "to"="user")
	/**
	 * 
	 * Convert between graphics coordinate systems.
	 *
	 */
	exported function "grconvertY"("y", "from"="user", "to"="user")
	/**
	 * 
	 * \code{grid} adds an \code{nx} by \code{ny} rectangular grid to an
	 * existing plot.
	 *
	 */
	exported function "grid"("nx"="", "ny", "col"="lightgray", "lty"="dotted", "lwd"="par(\"lwd\")", "equilogs"="TRUE")
	/**
	 * 
	 * The generic function \code{hist} computes a histogram of the given
	 * data values.  If \code{plot = TRUE}, the resulting object of
	 * \link{class} \code{"histogram"} is plotted by
	 * \code{\link{plot.histogram}}, before it is returned.
	 *
	 */
	exported function "hist"("x", "...")
	/**
	 * 
	 * Method for \code{\link{hist}} applied to date or date-time objects.
	 *
	 */
	function "hist.Date"("x", "breaks", "...", "xlab"="deparse(substitute(x))", "plot"="TRUE", "freq"="FALSE", "start.on.monday"="TRUE", "format", "right"="TRUE")
	/**
	 * 
	 * The generic function \code{hist} computes a histogram of the given
	 * data values.  If \code{plot = TRUE}, the resulting object of
	 * \link{class} \code{"histogram"} is plotted by
	 * \code{\link{plot.histogram}}, before it is returned.
	 *
	 */
	exported function "hist.default"("x", "breaks"="Sturges", "freq"="", "probability"="!freq", "include.lowest"="TRUE", "right"="TRUE", "density"="", "angle"="45", "col"="", "border"="", "main"="paste(\"Histogram of\", xname)", "xlim"="range(breaks)", "ylim"="", "xlab", "ylab", "axes"="TRUE", "plot"="TRUE", "labels"="FALSE", "nclass"="", "warn.unused"="TRUE", "...")
	/**
	 * 
	 * Method for \code{\link{hist}} applied to date or date-time objects.
	 *
	 */
	function "hist.POSIXt"("x", "breaks", "...", "xlab"="deparse(substitute(x))", "plot"="TRUE", "freq"="FALSE", "start.on.monday"="TRUE", "format", "right"="TRUE")
	/**
	 * 
	 * \code{identify} reads the position of the graphics pointer when the
	 * (first) mouse button is pressed.  It then searches the coordinates
	 * given in \code{x} and \code{y} for the point closest to the pointer.
	 * If this point is close enough to the pointer, its index will be returned as
	 * part of the value of the call.
	 *
	 */
	exported function "identify"("x", "...")
	/**
	 * 
	 * \code{identify} reads the position of the graphics pointer when the
	 * (first) mouse button is pressed.  It then searches the coordinates
	 * given in \code{x} and \code{y} for the point closest to the pointer.
	 * If this point is close enough to the pointer, its index will be returned as
	 * part of the value of the call.
	 *
	 */
	function "identify.default"("x", "y"="", "labels"="seq_along(x)", "pos"="FALSE", "n"="length(x)", "plot"="TRUE", "atpen"="FALSE", "offset"="0.5", "tolerance"="0.25", "...")
	/**
	 * 
	 * Creates a grid of colored or gray-scale rectangles with colors
	 * corresponding to the values in \code{z}.  This can be used to display
	 * three-dimensional or spatial data aka \emph{images}.
	 * This is a generic function.
	 *
	 * The functions \code{\link{heat.colors}}, \code{\link{terrain.colors}}
	 * and \code{\link{topo.colors}} create heat-spectrum (red to white) and
	 * topographical color schemes suitable for displaying ordered data, with
	 * \code{n} giving the number of colors desired.
	 *
	 */
	exported function "image"("x", "...")
	/**
	 * 
	 * Creates a grid of colored or gray-scale rectangles with colors
	 * corresponding to the values in \code{z}.  This can be used to display
	 * three-dimensional or spatial data aka \emph{images}.
	 * This is a generic function.
	 *
	 * The functions \code{\link{heat.colors}}, \code{\link{terrain.colors}}
	 * and \code{\link{topo.colors}} create heat-spectrum (red to white) and
	 * topographical color schemes suitable for displaying ordered data, with
	 * \code{n} giving the number of colors desired.
	 *
	 */
	exported function "image.default"("x"="seq(0, 1, length.out = nrow(z))", "y"="seq(0, 1, length.out = ncol(z))", "z", "zlim"="range(z[is.finite(z)])", "xlim"="range(x)", "ylim"="range(y)", "col"="heat.colors(12)", "add"="FALSE", "xaxs"="i", "yaxs"="i", "xlab", "ylab", "breaks", "oldstyle"="FALSE", "useRaster", "...")
	/**
	 * 
	 * \code{layout} divides the device up into as many rows and columns as
	 * there are in matrix \code{mat}, with the column-widths and the
	 * row-heights specified in the respective arguments.
	 *
	 */
	exported function "layout"("mat", "widths"="rep.int(1, ncol(mat))", "heights"="rep.int(1, nrow(mat))", "respect"="FALSE")
	/**
	 * 
	 * \code{layout} divides the device up into as many rows and columns as
	 * there are in matrix \code{mat}, with the column-widths and the
	 * row-heights specified in the respective arguments.
	 *
	 */
	exported function "layout.show"("n"="1")
	/**
	 * 
	 * \code{layout} divides the device up into as many rows and columns as
	 * there are in matrix \code{mat}, with the column-widths and the
	 * row-heights specified in the respective arguments.
	 *
	 */
	exported function "lcm"("x")
	/**
	 * 
	 * This function can be used to add legends to plots.  Note that a call
	 * to the function \code{\link{locator}(1)} can be used in place of the \code{x}
	 * and \code{y} arguments.
	 *
	 */
	exported function "legend"("x", "y"="", "legend", "fill"="", "col"="par(\"col\")", "border"="black", "lty", "lwd", "pch", "angle"="45", "density"="", "bty"="o", "bg"="par(\"bg\")", "box.lwd"="par(\"lwd\")", "box.lty"="par(\"lty\")", "box.col"="par(\"fg\")", "pt.bg"="NA", "cex"="1", "pt.cex", "pt.lwd", "xjust"="0", "yjust"="1", "x.intersp"="1", "y.intersp"="1", "adj"="c(0, 0.5)", "text.width"="", "text.col"="par(\"col\")", "text.font"="", "merge"="do.lines && has.pch", "trace"="FALSE", "plot"="TRUE", "ncol"="1", "horiz"="FALSE", "title"="", "inset"="0", "xpd", "title.col", "title.adj"="0.5", "seg.len"="2")
	/**
	 * 
	 * A generic function taking coordinates given in various ways and
	 * joining the corresponding points with line segments.
	 *
	 */
	exported function "lines"("x", "...")
	/**
	 * 
	 * A generic function taking coordinates given in various ways and
	 * joining the corresponding points with line segments.
	 *
	 */
	exported function "lines.default"("x", "y"="", "type"="l", "...")
	/**
	 * 
	 * Specify a scatterplot or add points, lines, or text via a formula.
	 *
	 */
	function "lines.formula"("formula", "data"="parent.frame()", "...", "subset")
	/**
	 * 
	 * These are methods for objects of class \code{"histogram"}, typically
	 * produced by \code{\link{hist}}.
	 *
	 */
	function "lines.histogram"("x", "...")
	/**
	 * 
	 * This is a method of the generic \code{plot} function for
	 * (contingency) \code{\link{table}} objects.  Whereas for two- and more
	 * dimensional tables, a \code{\link{mosaicplot}} is drawn,
	 * one-dimensional ones are plotted as bars.
	 *
	 */
	function "lines.table"("x", "y"="", "type"="h", "lwd"="2", "...")
	/**
	 * 
	 * Reads the position of the graphics cursor when the (first) mouse
	 * button is pressed.
	 *
	 */
	exported function "locator"("n"="512", "type"="n", "...")
	/**
	 * 
	 * Plot the columns of one matrix against the columns of another.
	 *
	 */
	exported function "matlines"("x", "y", "type"="l", "lty"="1:5", "lwd"="1", "pch"="", "col"="1:6", "...")
	/**
	 * 
	 * Plot the columns of one matrix against the columns of another.
	 *
	 */
	exported function "matplot"("x", "y", "type"="p", "lty"="1:5", "lwd"="1", "lend"="par(\"lend\")", "pch"="", "col"="1:6", "cex"="", "bg"="NA", "xlab"="", "ylab"="", "xlim"="", "ylim"="", "...", "add"="FALSE", "verbose"="getOption(\"verbose\")")
	/**
	 * 
	 * Plot the columns of one matrix against the columns of another.
	 *
	 */
	exported function "matpoints"("x", "y", "type"="p", "lty"="1:5", "lwd"="1", "pch"="", "col"="1:6", "...")
	/**
	 * Plots a mosaic on the current graphics device.
	 */
	exported function "mosaicplot"("x", "...")
	/**
	 * Plots a mosaic on the current graphics device.
	 */
	function "mosaicplot.default"("x", "main"="deparse(substitute(x))", "sub"="", "xlab"="", "ylab"="", "sort"="", "off"="", "dir"="", "color"="", "shade"="FALSE", "margin"="", "cex.axis"="0.66", "las"="par(\"las\")", "border"="", "type"="c(\"pearson\", \"deviance\", \"FT\")", "...")
	/**
	 * Plots a mosaic on the current graphics device.
	 */
	function "mosaicplot.formula"("formula", "data"="", "...", "main"="deparse(substitute(data))", "subset", "na.action"="stats::na.omit")
	/**
	 * 
	 * Text is written in one of the four margins of the current figure region
	 * or one of the outer margins of the device region.
	 *
	 */
	exported function "mtext"("text", "side"="3", "line"="0", "outer"="FALSE", "at"="NA", "adj"="NA", "padj"="NA", "cex"="NA", "col"="NA", "font"="NA", "...")
	/**
	 * 
	 * A matrix of scatterplots is produced.
	 *
	 */
	exported function "pairs"("x", "...")
	/**
	 * 
	 * A matrix of scatterplots is produced.
	 *
	 */
	exported function "pairs.default"("x", "labels", "panel", "...", "horInd"="1:nc", "verInd"="1:nc", "lower.panel", "upper.panel", "diag.panel"="", "text.panel", "label.pos"="0.5 + has.diag/3", "line.main"="3", "cex.labels"="", "font.labels"="1", "row1attop"="TRUE", "gap"="1", "log"="")
	/**
	 * 
	 * A matrix of scatterplots is produced.
	 *
	 */
	function "pairs.formula"("formula", "data"="", "...", "subset", "na.action"="stats::na.pass")
	/**
	 * 
	 * An example of a simple useful \code{panel} function to be used as
	 * argument in e.g., \code{\link{coplot}} or \code{\link{pairs}}.
	 *
	 */
	exported function "panel.smooth"("x", "y", "col"="par(\"col\")", "bg"="NA", "pch"="par(\"pch\")", "cex"="1", "col.smooth"="red", "span"="2/3", "iter"="3", "...")
	/**
	 * 
	 * \code{par} can be used to set or query graphical parameters.
	 * Parameters can be set by specifying them as arguments to \code{par} in
	 * \code{tag = value} form, or by passing them as a list of tagged
	 * values.
	 *
	 */
	exported function "par"("...", "no.readonly"="FALSE")
	/**
	 * 
	 * This function draws perspective plots of a surface over the
	 * x--y plane.  \code{persp} is a generic function.
	 *
	 */
	exported function "persp"("x", "...")
	/**
	 * 
	 * This function draws perspective plots of a surface over the
	 * x--y plane.  \code{persp} is a generic function.
	 *
	 */
	function "persp.default"("x"="seq(0, 1, length.out = nrow(z))", "y"="seq(0, 1, length.out = ncol(z))", "z", "xlim"="range(x)", "ylim"="range(y)", "zlim"="range(z, na.rm = TRUE)", "xlab"="", "ylab"="", "zlab"="", "main"="", "sub"="", "theta"="0", "phi"="15", "r"="sqrt(3)", "d"="1", "scale"="TRUE", "expand"="1", "col"="white", "border"="", "ltheta"="-135", "lphi"="0", "shade"="NA", "box"="TRUE", "axes"="TRUE", "nticks"="5", "ticktype"="simple", "...")
	/**
	 * 
	 * Draw a pie chart.
	 *
	 */
	exported function "pie"("x", "labels"="names(x)", "edges"="200", "radius"="0.8", "clockwise"="FALSE", "init.angle"="if (clockwise) 90 else 0", "density"="", "angle"="45", "col"="", "border"="", "lty"="", "main"="", "...")
	/**
	 * 
	 * The functions or variables listed here are no longer part of \R{} as
	 * they are not needed (any more).
	 *
	 */
	function "piechart"("x", "labels"="names(x)", "edges"="200", "radius"="0.8", "density"="", "angle"="45", "col"="", "main"="", "...")
	/**
	 * 
	 * Generic function for plotting of \R{} objects.  For more details about
	 * the graphical parameter arguments, see \code{\link{par}}.
	 *
	 * For simple scatter plots, \code{\link{plot.default}} will be used.
	 * However, there are \code{plot} methods for many \R{} objects,
	 * including \code{\link{function}}s, \code{\link{data.frame}}s,
	 * \code{\link{density}} objects, etc.  Use \code{methods(plot)} and
	 * the documentation for these.
	 *
	 */
	exported function "plot"("x", "y", "...")
	/**
	 * 
	 * \code{plot.data.frame}, a method for the \code{\link{plot}} generic.
	 * It is designed for a quick look at numeric data frames.
	 *
	 */
	function "plot.data.frame"("x", "...")
	/**
	 * 
	 * Draw a scatter plot with decorations such as axes and titles
	 * in the active graphics window.
	 *
	 */
	exported function "plot.default"("x", "y"="", "type"="p", "xlim"="", "ylim"="", "log"="", "main"="", "sub"="", "xlab"="", "ylab"="", "ann"="par(\"ann\")", "axes"="TRUE", "frame.plot", "panel.first"="", "panel.last"="", "asp"="NA", "...")
	/**
	 * 
	 * Plot univariate effects of one or more \code{\link{factor}}s,
	 * typically for a designed experiment as analyzed by \code{\link{aov}()}.
	 *
	 */
	exported function "plot.design"("x", "y"="", "fun", "data"="", "...", "ylim"="", "xlab"="Factors", "ylab"="", "main"="", "ask"="", "xaxt"="par(\"xaxt\")", "axes"="TRUE", "xtick"="FALSE")
	/**
	 * 
	 * This functions implements a scatterplot method for
	 * \code{\link{factor}} arguments of the \emph{generic}
	 * \code{\link{plot}} function.
	 *
	 * If \code{y} is missing \code{\link{barplot}} is produced.
	 * For numeric \code{y} a \code{\link{boxplot}} is used, and for a factor
	 * \code{y} a \code{\link{spineplot}} is shown.  For any other type of
	 * \code{y} the next \code{plot} method is called, normally
	 * \code{\link{plot.default}}.
	 *
	 */
	function "plot.factor"("x", "y", "legend.text"="", "...")
	/**
	 * 
	 * Specify a scatterplot or add points, lines, or text via a formula.
	 *
	 */
	function "plot.formula"("formula", "data"="parent.frame()", "...", "subset", "ylab"="varnames[response]", "ask"="dev.interactive()")
	/**
	 * 
	 * Draws a curve corresponding to a function over the interval
	 * \code{[from, to]}. \code{curve} can plot also an expression in the variable
	 * \code{xname}, default \samp{x}.
	 *
	 */
	exported function "plot.function"("x", "y"="0", "to"="1", "from", "xlim"="", "ylab"="", "...")
	/**
	 * 
	 * These are methods for objects of class \code{"histogram"}, typically
	 * produced by \code{\link{hist}}.
	 *
	 */
	function "plot.histogram"("x", "freq", "density"="", "angle"="45", "col"="", "border"="par(\"fg\")", "lty"="", "main"="paste(\"Histogram of\", paste(x$xname, collapse = \"\\n\"))", "sub"="", "xlab"="x$xname", "ylab", "xlim"="range(x$breaks)", "ylim"="", "axes"="TRUE", "labels"="FALSE", "add"="FALSE", "ann"="TRUE", "...")
	/**
	 * 
	 * This function (\code{frame} is an alias for
	 * \code{plot.new}) causes the completion of plotting in the current plot
	 * (if there is one) and an advance to a new graphics frame.  This is
	 * used in all high-level plotting functions and also useful for skipping
	 * plots when a multi-figure region is in use.
	 *
	 */
	exported function "plot.new"()
	/**
	 * 
	 * This functions implements a \code{\link{plot}} method for raster images.
	 *
	 */
	function "plot.raster"("x", "y", "xlim"="c(0, ncol(x))", "ylim"="c(0, nrow(x))", "xaxs"="i", "yaxs"="i", "asp"="1", "add"="FALSE", "...")
	/**
	 * 
	 * This is a method of the generic \code{plot} function for
	 * (contingency) \code{\link{table}} objects.  Whereas for two- and more
	 * dimensional tables, a \code{\link{mosaicplot}} is drawn,
	 * one-dimensional ones are plotted as bars.
	 *
	 */
	function "plot.table"("x", "type"="h", "ylim"="c(0, max(x))", "lwd"="2", "xlab"="", "ylab"="", "frame.plot", "...")
	/**
	 * 
	 * This function sets up the world coordinate system for a graphics
	 * window.  It is called by higher level functions such as
	 * \code{\link{plot.default}} (\emph{after} \code{\link{plot.new}}).
	 *
	 */
	exported function "plot.window"("xlim", "ylim", "log"="", "asp"="NA", "...")
	/**
	 * 
	 * This is \emph{the} internal function that does the basic plotting of
	 * points and lines.  Usually, one should rather use the higher level
	 * functions instead and refer to their help pages for explanation of the
	 * arguments.
	 *
	 */
	exported function "plot.xy"("xy", "type", "pch"="par(\"pch\")", "lty"="par(\"lty\")", "col"="par(\"col\")", "bg"="NA", "cex"="1", "lwd"="par(\"lwd\")", "...")
	function "plotHclust"("n", "merge", "height", "order", "hang", "labels", "...")
	/**
	 * 
	 * \code{points} is a generic function to draw a sequence of points at
	 * the specified coordinates.  The specified character(s) are plotted,
	 * centered at the coordinates.
	 *
	 */
	exported function "points"("x", "...")
	/**
	 * 
	 * \code{points} is a generic function to draw a sequence of points at
	 * the specified coordinates.  The specified character(s) are plotted,
	 * centered at the coordinates.
	 *
	 */
	exported function "points.default"("x", "y"="", "type"="p", "...")
	/**
	 * 
	 * Specify a scatterplot or add points, lines, or text via a formula.
	 *
	 */
	function "points.formula"("formula", "data"="parent.frame()", "...", "subset")
	/**
	 * 
	 * This is a method of the generic \code{plot} function for
	 * (contingency) \code{\link{table}} objects.  Whereas for two- and more
	 * dimensional tables, a \code{\link{mosaicplot}} is drawn,
	 * one-dimensional ones are plotted as bars.
	 *
	 */
	function "points.table"("x", "y"="", "type"="h", "lwd"="2", "...")
	/**
	 * 
	 * \code{polygon} draws the polygons whose vertices are
	 * given in \code{x} and \code{y}.
	 *
	 */
	exported function "polygon"("x", "y"="", "density"="", "angle"="45", "border"="", "col"="NA", "lty"="par(\"lty\")", "...", "fillOddEven"="FALSE")
	/**
	 * 
	 * \code{path} draws a path whose vertices are
	 * given in \code{x} and \code{y}.
	 *
	 */
	exported function "polypath"("x", "y"="", "border"="", "col"="NA", "lty"="par(\"lty\")", "rule"="winding", "...")
	/**
	 * 
	 * \code{rasterImage} draws a raster image at the given locations and sizes.
	 *
	 */
	exported function "rasterImage"("image", "xleft", "ybottom", "xright", "ytop", "angle"="0", "interpolate"="TRUE", "...")
	/**
	 * 
	 * \code{rect} draws a rectangle (or sequence of rectangles) with the
	 * given coordinates, fill and border colors.
	 *
	 */
	exported function "rect"("xleft", "ybottom", "xright", "ytop", "density"="", "angle"="45", "col"="NA", "border"="", "lty"="par(\"lty\")", "lwd"="par(\"lwd\")", "...")
	/**
	 * 
	 * Adds a \emph{rug} representation (1-d plot) of the data to the plot.
	 *
	 */
	exported function "rug"("x", "ticksize"="0.03", "side"="1", "lwd"="0.5", "col"="par(\"fg\")", "quiet"="getOption(\"warn\") < 0", "...")
	var "RunregisterBase"
	/**
	 * 
	 * \code{split.screen} defines a number of regions within the current
	 * device which can, to some extent, be treated as separate graphics
	 * devices.  It is useful for generating multiple plots on a single
	 * device.  Screens can themselves be split, allowing for quite complex
	 * arrangements of plots.
	 *
	 * \code{screen} is used to select which screen to draw in.
	 *
	 * \code{erase.screen} is used to clear a single screen, which it
	 * does by filling with the background colour.
	 *
	 * \code{close.screen} removes the specified screen definition(s).
	 *
	 */
	exported function "screen"("n", "new"="TRUE")
	/**
	 * 
	 * Draw line segments between pairs of points.
	 *
	 */
	exported function "segments"("x0", "y0", "x1", "y1", "col"="par(\"fg\")", "lty"="par(\"lty\")", "lwd"="par(\"lwd\")", "...")
	/**
	 * \code{smoothScatter} produces a smoothed color density
	 * representation of a scatterplot, obtained through a (2D) kernel
	 * density estimate.
	 *
	 */
	exported function "smoothScatter"("x", "y"="", "nbin"="128", "bandwidth", "colramp"="colorRampPalette(c(\"white\", blues9))", "nrpoints"="100", "ret.selection"="FALSE", "pch"=".", "cex"="1", "col"="black", "transformation"="function(x) x^0.25", "postPlotHook", "xlab"="", "ylab"="", "xlim", "ylim", "xaxs"="par(\"xaxs\")", "yaxs"="par(\"yaxs\")", "...")
	/**
	 * 
	 * Spine plots are a special cases of mosaic plots, and can be seen as
	 * a generalization of stacked (or highlighted) bar plots. Analogously,
	 * spinograms are an extension of histograms.
	 *
	 */
	exported function "spineplot"("x", "...")
	/**
	 * 
	 * Spine plots are a special cases of mosaic plots, and can be seen as
	 * a generalization of stacked (or highlighted) bar plots. Analogously,
	 * spinograms are an extension of histograms.
	 *
	 */
	function "spineplot.default"("x", "y"="", "breaks"="", "tol.ylab"="0.05", "off"="", "ylevels"="", "col"="", "main"="", "xlab"="", "ylab"="", "xaxlabels"="", "yaxlabels"="", "xlim"="", "ylim"="c(0, 1)", "axes"="TRUE", "...")
	/**
	 * 
	 * Spine plots are a special cases of mosaic plots, and can be seen as
	 * a generalization of stacked (or highlighted) bar plots. Analogously,
	 * spinograms are an extension of histograms.
	 *
	 */
	function "spineplot.formula"("formula", "data"="", "breaks"="", "tol.ylab"="0.05", "off"="", "ylevels"="", "col"="", "main"="", "xlab"="", "ylab"="", "xaxlabels"="", "yaxlabels"="", "xlim"="", "ylim"="c(0, 1)", "axes"="TRUE", "...", "subset"="")
	/**
	 * 
	 * \code{split.screen} defines a number of regions within the current
	 * device which can, to some extent, be treated as separate graphics
	 * devices.  It is useful for generating multiple plots on a single
	 * device.  Screens can themselves be split, allowing for quite complex
	 * arrangements of plots.
	 *
	 * \code{screen} is used to select which screen to draw in.
	 *
	 * \code{erase.screen} is used to clear a single screen, which it
	 * does by filling with the background colour.
	 *
	 * \code{close.screen} removes the specified screen definition(s).
	 *
	 */
	exported function "split.screen"("figs", "screen", "erase"="TRUE")
	/**
	 * 
	 * Draw star plots or segment diagrams of a multivariate data set.
	 * With one single location, also draws \sQuote{spider}
	 * (or \sQuote{radar}) plots.
	 *
	 */
	exported function "stars"("x", "full"="TRUE", "scale"="TRUE", "radius"="TRUE", "labels"="dimnames(x)[[1L]]", "locations"="", "nrow"="", "ncol"="", "len"="1", "key.loc"="", "key.labels"="dimnames(x)[[2L]]", "key.xpd"="TRUE", "xlim"="", "ylim"="", "flip.labels"="", "draw.segments"="FALSE", "col.segments"="1L:n.seg", "col.stars"="NA", "col.lines"="NA", "axes"="FALSE", "frame.plot", "main"="", "sub"="", "xlab"="", "ylab"="", "cex"="0.8", "lwd"="0.25", "lty"="par(\"lty\")", "xpd"="FALSE", "mar"="pmin(par(\"mar\"), 1.1 + c(2 * axes + (xlab != \"\"), 2 * axes +     (ylab != \"\"), 1, 0))", "add"="FALSE", "plot"="TRUE", "...")
	/**
	 * 
	 * \code{stem} produces a stem-and-leaf plot of the values in \code{x}.
	 * The parameter \code{scale} can be used to expand the scale of the
	 * plot.  A value of \code{scale = 2} will cause the plot to be roughly
	 * twice as long as the default.
	 *
	 */
	exported function "stem"("x", "scale"="1", "width"="80", "atom"="1e-08")
	/**
	 * 
	 * These functions compute the width or height, respectively, of the
	 * given strings or mathematical expressions \code{s[i]} on
	 * the current plotting device in \emph{user} coordinates, \emph{inches}
	 * or as fraction of the figure width \code{par("fin")}.
	 *
	 */
	exported function "strheight"("s", "units"="user", "cex"="", "font"="", "vfont"="", "...")
	/**
	 * 
	 * \code{stripchart} produces one dimensional scatter plots (or dot
	 * plots) of the given data.  These plots are a good alternative to
	 * \code{\link{boxplot}}s when sample sizes are small.
	 *
	 */
	exported function "stripchart"("x", "...")
	/**
	 * 
	 * \code{stripchart} produces one dimensional scatter plots (or dot
	 * plots) of the given data.  These plots are a good alternative to
	 * \code{\link{boxplot}}s when sample sizes are small.
	 *
	 */
	function "stripchart.default"("x", "method"="overplot", "jitter"="0.1", "offset"="1/3", "vertical"="FALSE", "group.names", "add"="FALSE", "at"="", "xlim"="", "ylim"="", "ylab"="", "xlab"="", "dlab"="", "glab"="", "log"="", "pch"="0", "col"="par(\"fg\")", "cex"="par(\"cex\")", "axes"="TRUE", "frame.plot", "...")
	/**
	 * 
	 * \code{stripchart} produces one dimensional scatter plots (or dot
	 * plots) of the given data.  These plots are a good alternative to
	 * \code{\link{boxplot}}s when sample sizes are small.
	 *
	 */
	function "stripchart.formula"("x", "data"="", "dlab"="", "...", "subset", "na.action"="")
	/**
	 * 
	 * These functions compute the width or height, respectively, of the
	 * given strings or mathematical expressions \code{s[i]} on
	 * the current plotting device in \emph{user} coordinates, \emph{inches}
	 * or as fraction of the figure width \code{par("fin")}.
	 *
	 */
	exported function "strwidth"("s", "units"="user", "cex"="", "font"="", "vfont"="", "...")
	/**
	 * 
	 * Multiple points are plotted as \sQuote{sunflowers} with multiple leaves
	 * (\sQuote{petals}) such that overplotting is visualized instead of
	 * accidental and invisible.
	 *
	 */
	exported function "sunflowerplot"("x", "...")
	/**
	 * 
	 * Multiple points are plotted as \sQuote{sunflowers} with multiple leaves
	 * (\sQuote{petals}) such that overplotting is visualized instead of
	 * accidental and invisible.
	 *
	 */
	function "sunflowerplot.default"("x", "y"="", "number", "log"="", "digits"="6", "xlab"="", "ylab"="", "xlim"="", "ylim"="", "add"="FALSE", "rotate"="FALSE", "pch"="16", "cex"="0.8", "cex.fact"="1.5", "col"="par(\"col\")", "bg"="NA", "size"="1/8", "seg.col"="2", "seg.lwd"="1.5", "...")
	/**
	 * 
	 * Multiple points are plotted as \sQuote{sunflowers} with multiple leaves
	 * (\sQuote{petals}) such that overplotting is visualized instead of
	 * accidental and invisible.
	 *
	 */
	function "sunflowerplot.formula"("formula", "data"="", "xlab"="", "ylab"="", "...", "subset", "na.action"="")
	/**
	 * 
	 * This function draws symbols on a plot.  One of six symbols;
	 * \emph{circles}, \emph{squares}, \emph{rectangles}, \emph{stars},
	 * \emph{thermometers}, and \emph{boxplots}, can be plotted at a
	 * specified set of x and y coordinates.  Specific aspects of the
	 * symbols, such as relative size, can be customized by additional
	 * parameters.
	 *
	 */
	exported function "symbols"("x", "y"="", "circles", "squares", "rectangles", "stars", "thermometers", "boxplots", "inches"="TRUE", "add"="FALSE", "fg"="par(\"col\")", "bg"="NA", "xlab"="", "ylab"="", "main"="", "xlim"="", "ylim"="", "...")
	/**
	 * 
	 * \code{text} draws the strings given in the vector \code{labels} at the
	 * coordinates given by \code{x} and \code{y}.
	 * \code{y} may be missing since \code{\link{xy.coords}(x, y)} is used for
	 * construction of the coordinates.
	 *
	 */
	exported function "text"("x", "...")
	/**
	 * 
	 * \code{text} draws the strings given in the vector \code{labels} at the
	 * coordinates given by \code{x} and \code{y}.
	 * \code{y} may be missing since \code{\link{xy.coords}(x, y)} is used for
	 * construction of the coordinates.
	 *
	 */
	exported function "text.default"("x", "y"="", "labels"="seq_along(x$x)", "adj"="", "pos"="", "offset"="0.5", "vfont"="", "cex"="1", "col"="", "font"="", "...")
	/**
	 * 
	 * Specify a scatterplot or add points, lines, or text via a formula.
	 *
	 */
	function "text.formula"("formula", "data"="parent.frame()", "...", "subset")
	/**
	 * 
	 * This function can be used to add labels to a plot.  Its first four
	 * principal arguments can also be used as arguments in most high-level
	 * plotting functions.  They must be of type \code{\link{character}} or
	 * \code{\link{expression}}. In the latter case, quite a bit of
	 * mathematical notation is available such as sub- and superscripts,
	 * greek letters, fractions, etc: see \link{plotmath}
	 *
	 */
	exported function "title"("main"="", "sub"="", "xlab"="", "ylab"="", "line"="NA", "outer"="FALSE", "...")
	/**
	 * 
	 * \code{xinch} and \code{yinch} convert the specified number of inches
	 * given as their arguments into the correct units for plotting with
	 * graphics functions.  Usually, this only makes sense when normal
	 * coordinates are used, i.e., \emph{no} \code{log} scale (see the
	 * \code{log} argument to \code{\link{par}}).
	 *
	 * \code{xyinch} does the same for a pair of numbers \code{xy},
	 * simultaneously.
	 *
	 */
	exported function "xinch"("x"="1", "warn.log"="TRUE")
	/**
	 * 
	 * Draw an X-spline, a curve drawn relative to control points.
	 *
	 */
	exported function "xspline"("x", "y"="", "shape"="0", "open"="TRUE", "repEnds"="TRUE", "draw"="TRUE", "border"="par(\"fg\")", "col"="NA", "...")
	/**
	 * 
	 * \code{xinch} and \code{yinch} convert the specified number of inches
	 * given as their arguments into the correct units for plotting with
	 * graphics functions.  Usually, this only makes sense when normal
	 * coordinates are used, i.e., \emph{no} \code{log} scale (see the
	 * \code{log} argument to \code{\link{par}}).
	 *
	 * \code{xyinch} does the same for a pair of numbers \code{xy},
	 * simultaneously.
	 *
	 */
	exported function "xyinch"("xy"="1", "warn.log"="TRUE")
	/**
	 * 
	 * \code{xinch} and \code{yinch} convert the specified number of inches
	 * given as their arguments into the correct units for plotting with
	 * graphics functions.  Usually, this only makes sense when normal
	 * coordinates are used, i.e., \emph{no} \code{log} scale (see the
	 * \code{log} argument to \code{\link{par}}).
	 *
	 * \code{xyinch} does the same for a pair of numbers \code{xy},
	 * simultaneously.
	 *
	 */
	exported function "yinch"("y"="1", "warn.log"="TRUE")
}

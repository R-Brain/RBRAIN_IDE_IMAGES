package "htmltools" "0.3.6" {
	var ".__NAMESPACE__."
	var ".__S3MethodsTable__."
	function ".onLoad"("...")
	var ".packageName"
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "a"("...")
	function "as.character.html"("x", "...")
	function "as.character.shiny.tag"("x", "...")
	function "as.character.shiny.tag.list"("x", "...")
	/**
	 * 
	 *An S3 method for converting arbitrary values to a value that can be used as
	 *the child of a tag or \code{tagList}. The default implementation simply calls
	 *\code{\link{as.character}}.
	 *
	 */
	exported function "as.tags"("x", "...")
	function "as.tags.character"("x", "...")
	function "as.tags.default"("x", "...")
	function "as.tags.html"("x", "...")
	function "as.tags.html_dependency"("x", "...")
	function "as.tags.shiny.tag"("x", "...")
	function "as.tags.shiny.tag.list"("x", "...")
	/**
	 * 
	 *Gets or sets the HTML dependencies associated with an object (such as a tag).
	 *
	 */
	exported function "attachDependencies"("x", "value", "append"="FALSE")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "br"("...")
	/**
	 * 
	 *By default, HTML objects display their HTML markup at the console when
	 *printed. \code{browsable} can be used to make specific objects render as HTML
	 *by default when printed at the console.
	 *
	 */
	exported function "browsable"("x", "value"="TRUE")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "code"("...")
	/**
	 * 
	 *Copies an HTML dependency to a subdirectory of the given directory. The
	 *subdirectory name will be \emph{name}-\emph{version} (for example,
	 *"outputDir/jquery-1.11.0"). You may set \code{options(htmltools.dir.version =
	 *FALSE)} to suppress the version number in the subdirectory name.
	 *
	 */
	exported function "copyDependencyToDir"("dependency", "outputDir", "mustWork"="TRUE")
	/**
	 * 
	 *Convenience function for building CSS style declarations (i.e. the string
	 *that goes into a style attribute, or the parts that go inside curly braces in
	 *a full stylesheet).
	 *
	 */
	exported function "css"("...", "collapse_"="")
	function "depListToNamedDepList"("dependencies")
	function "dir_exists"("paths")
	function "dir_path"("dependency")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "div"("...")
	/**
	 * 
	 *Renders tags (and objects that can be converted into tags using
	 *\code{\link{as.tags}}) into HTML. (Generally intended to be called from web
	 *framework libraries, not directly by most users--see
	 *\code{\link{print.html}(browse=TRUE)} for higher level rendering.)
	 *
	 */
	exported function "doRenderTags"("x", "indent"="0")
	function "dropNulls"("x")
	function "dropNullsOrEmpty"("x")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "em"("...")
	function "empty"("x")
	/**
	 * 
	 *Use "magic" HTML comments to protect regions of HTML from being modified by
	 *text processing tools.
	 *
	 */
	exported function "extractPreserveChunks"("strval")
	/**
	 * 
	 *Walks a hierarchy of tags looking for attached dependencies.
	 *
	 */
	exported function "findDependencies"("tags", "tagify"="TRUE")
	function "flattenTags"("x")
	function "format.html"("x", "...")
	function "format.shiny.tag"("x", "...", "singletons"="character(0)", "indent"="0")
	function "format.shiny.tag.list"("x", "...", "singletons"="character(0)", "indent"="0")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "h1"("...")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "h2"("...")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "h3"("...")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "h4"("...")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "h5"("...")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "h6"("...")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "hr"("...")
	function "href_path"("dependency")
	/**
	 * 
	 *Marks the given text as HTML, which means the \link{tag} functions will know
	 *not to perform HTML escaping on it.
	 *
	 */
	exported function "HTML"("text", "...")
	/**
	 * 
	 *Convenience method that provides an implementation of the
	 *\code{\link{print}} method for HTML content.
	 *
	 */
	exported function "html_print"("html", "background"="white", "viewer"="getOption(\"viewer\", utils::browseURL)")
	/**
	 * 
	 *Gets or sets the HTML dependencies associated with an object (such as a tag).
	 *
	 */
	exported function "htmlDependencies"("x")
	/**
	 * 
	 *Gets or sets the HTML dependencies associated with an object (such as a tag).
	 *
	 */
	exported function "htmlDependencies<-"("x", "value")
	/**
	 * 
	 *Define an HTML dependency (i.e. CSS and/or JavaScript bundled in a
	 *directory). HTML dependencies make it possible to use libraries like jQuery,
	 *Bootstrap, and d3 in a more composable and portable way than simply using
	 *script, link, and style tags.
	 *
	 */
	exported function "htmlDependency"("name", "version", "src", "meta"="", "script"="", "stylesheet"="", "head"="", "attachment"="", "package"="", "all_files"="TRUE")
	/**
	 * 
	 *Escape HTML entities contained in a character vector so that it can be safely
	 *included as text or an attribute value within an HTML document
	 *
	 */
	exported function "htmlEscape"("text", "attribute"="FALSE")
	/**
	 * 
	 *Use "magic" HTML comments to protect regions of HTML from being modified by
	 *text processing tools.
	 *
	 */
	exported function "htmlPreserve"("x")
	/**
	 * 
	 *Process an HTML template and return a tagList object. If the template is a
	 *complete HTML document, then the returned object will also have class
	 *\code{html_document}, and can be passed to the function
	 *\code{\link{renderDocument}} to get the final HTML text.
	 *
	 */
	exported function "htmlTemplate"("filename"="", "...", "text_"="", "document_"="auto")
	var "htmltools_template_dfa"
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "img"("...")
	/**
	 * 
	 *Load HTML, text, or rendered Markdown from a file and turn into HTML.
	 *
	 */
	exported function "includeCSS"("path", "...")
	/**
	 * 
	 *Load HTML, text, or rendered Markdown from a file and turn into HTML.
	 *
	 */
	exported function "includeHTML"("path")
	/**
	 * 
	 *Load HTML, text, or rendered Markdown from a file and turn into HTML.
	 *
	 */
	exported function "includeMarkdown"("path")
	/**
	 * 
	 *Load HTML, text, or rendered Markdown from a file and turn into HTML.
	 *
	 */
	exported function "includeScript"("path", "...")
	/**
	 * 
	 *Load HTML, text, or rendered Markdown from a file and turn into HTML.
	 *
	 */
	exported function "includeText"("path")
	/**
	 * 
	 *By default, HTML objects display their HTML markup at the console when
	 *printed. \code{browsable} can be used to make specific objects render as HTML
	 *by default when printed at the console.
	 *
	 */
	exported function "is.browsable"("x")
	/**
	 * 
	 *Use \code{singleton} to wrap contents (tag, text, HTML, or lists) that should
	 *be included in the generated document only once, yet may appear in the
	 *document-generating code more than once. Only the first appearance of the
	 *content (in document order) will be used.
	 *
	 */
	exported function "is.singleton"("x")
	function "isTag"("x")
	function "isTagList"("x")
	/**
	 * 
	 *These S3 methods are necessary to allow HTML tags to print themselves in
	 *knitr/rmarkdown documents.
	 *
	 */
	exported function "knit_print.html"("x", "...")
	/**
	 * 
	 *These S3 methods are necessary to allow HTML tags to print themselves in
	 *knitr/rmarkdown documents.
	 *
	 */
	exported function "knit_print.shiny.tag"("x", "...")
	/**
	 * 
	 *These S3 methods are necessary to allow HTML tags to print themselves in
	 *knitr/rmarkdown documents.
	 *
	 */
	exported function "knit_print.shiny.tag.list"("x", "...")
	/**
	 * 
	 *Change a dependency's absolute path to be relative to one of its parent
	 *directories.
	 *
	 */
	exported function "makeDependencyRelative"("dependency", "basepath", "mustWork"="TRUE")
	function "normalizeText"("text")
	function "nullOrEmpty"("x")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "p"("...")
	function "paste8"("...", "sep"=" ", "collapse"="")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "pre"("...")
	/**
	 * 
	 *S3 method for printing HTML that prints markup or renders HTML in a web
	 *browser.
	 *
	 */
	function "print.html"("x", "...", "browse"="is.browsable(x)")
	function "print.html_dependency"("x", "...")
	/**
	 * 
	 *S3 method for printing HTML that prints markup or renders HTML in a web
	 *browser.
	 *
	 */
	function "print.shiny.tag"("x", "browse"="is.browsable(x)", "...")
	function "print.shiny.tag.list"("x", "browse"="is.browsable(x)", "...")
	function "registerMethods"("methods")
	function "relativeTo"("dir", "file")
	/**
	 * 
	 *Create the appropriate HTML markup for including dependencies in an HTML
	 *document.
	 *
	 */
	exported function "renderDependencies"("dependencies", "srcType"="c(\"href\", \"file\")", "encodeFunc", "hrefFilter")
	/**
	 * 
	 *This function renders \code{html_document} objects, and returns a string with
	 *the final HTML content. It calls the \code{\link{renderTags}} function to
	 *convert any shiny.tag objects to HTML. It also finds any any web dependencies
	 *(created by \code{\link{htmlDependency}}) that are attached to the tags, and
	 *inserts those. To do the insertion, this function finds the string
	 *\code{"<!-- HEAD_CONTENT -->"} in the document, and replaces it with the web
	 *dependencies.
	 *
	 */
	exported function "renderDocument"("x", "deps"="", "processDep")
	/**
	 * 
	 *Renders tags (and objects that can be converted into tags using
	 *\code{\link{as.tags}}) into HTML. (Generally intended to be called from web
	 *framework libraries, not directly by most users--see
	 *\code{\link{print.html}(browse=TRUE)} for higher level rendering.)
	 *
	 */
	exported function "renderTags"("x", "singletons"="character(0)", "indent"="0")
	/**
	 * 
	 *Given a list of dependencies, removes any redundant dependencies (based on
	 *name equality). If multiple versions of a dependency are found, the copy with
	 *the latest version number is used.
	 *
	 */
	exported function "resolveDependencies"("dependencies", "resolvePackageDir"="TRUE")
	/**
	 * 
	 *Use "magic" HTML comments to protect regions of HTML from being modified by
	 *text processing tools.
	 *
	 */
	exported function "restorePreserveChunks"("strval", "chunks")
	function "rewriteTags"("ui", "func", "preorder")
	/**
	 * 
	 *Save the specified HTML object to a file, copying all of it's
	 *dependencies to the directory specified via \code{libdir}.
	 *
	 */
	exported function "save_html"("html", "file", "background"="white", "libdir"="lib")
	/**
	 * 
	 *Use \code{singleton} to wrap contents (tag, text, HTML, or lists) that should
	 *be included in the generated document only once, yet may appear in the
	 *document-generating code more than once. Only the first appearance of the
	 *content (in document order) will be used.
	 *
	 */
	exported function "singleton"("x", "value"="TRUE")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "span"("...")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported function "strong"("...")
	/**
	 * 
	 *Remove a set of dependencies from another list of dependencies. The set of
	 *dependencies to remove can be expressed as either a character vector or a
	 *list; if the latter, a warning can be emitted if the version of the
	 *dependency being removed is later than the version of the dependency object
	 *that is causing the removal.
	 *
	 */
	exported function "subtractDependencies"("dependencies", "remove", "warnOnConflict"="TRUE")
	/**
	 * 
	 *This suppresses one or more web dependencies. It is meant to be used when a
	 *dependency (like a JavaScript or CSS file) is declared in raw HTML, in an
	 *HTML template.
	 *
	 */
	exported function "suppressDependencies"("...")
	/**
	 * 
	 *Functions for manipulating \code{\link{singleton}} objects in tag
	 *hierarchies. Intended for framework authors.
	 *
	 */
	exported function "surroundSingletons"("ui")
	/**
	 * 
	 *\code{tag()} creates an HTML tag definition. Note that all of the valid HTML5
	 *tags are already defined in the \code{\link{tags}} environment so these
	 *functions should only be used to generate additional tags.
	 *\code{tagAppendChild()} and \code{tagList()} are for supporting package
	 *authors who wish to create their own sets of tags; see the contents of
	 *bootstrap.R for examples.
	 *
	 */
	exported function "tag"("_tag_name", "varArgs")
	/**
	 * 
	 *\code{tag()} creates an HTML tag definition. Note that all of the valid HTML5
	 *tags are already defined in the \code{\link{tags}} environment so these
	 *functions should only be used to generate additional tags.
	 *\code{tagAppendChild()} and \code{tagList()} are for supporting package
	 *authors who wish to create their own sets of tags; see the contents of
	 *bootstrap.R for examples.
	 *
	 */
	exported function "tagAppendAttributes"("tag", "...")
	/**
	 * 
	 *\code{tag()} creates an HTML tag definition. Note that all of the valid HTML5
	 *tags are already defined in the \code{\link{tags}} environment so these
	 *functions should only be used to generate additional tags.
	 *\code{tagAppendChild()} and \code{tagList()} are for supporting package
	 *authors who wish to create their own sets of tags; see the contents of
	 *bootstrap.R for examples.
	 *
	 */
	exported function "tagAppendChild"("tag", "child")
	/**
	 * 
	 *\code{tag()} creates an HTML tag definition. Note that all of the valid HTML5
	 *tags are already defined in the \code{\link{tags}} environment so these
	 *functions should only be used to generate additional tags.
	 *\code{tagAppendChild()} and \code{tagList()} are for supporting package
	 *authors who wish to create their own sets of tags; see the contents of
	 *bootstrap.R for examples.
	 *
	 */
	exported function "tagAppendChildren"("tag", "...", "list"="")
	/**
	 * 
	 *\code{tag()} creates an HTML tag definition. Note that all of the valid HTML5
	 *tags are already defined in the \code{\link{tags}} environment so these
	 *functions should only be used to generate additional tags.
	 *\code{tagAppendChild()} and \code{tagList()} are for supporting package
	 *authors who wish to create their own sets of tags; see the contents of
	 *bootstrap.R for examples.
	 *
	 */
	exported function "tagGetAttribute"("tag", "attr")
	/**
	 * 
	 *\code{tag()} creates an HTML tag definition. Note that all of the valid HTML5
	 *tags are already defined in the \code{\link{tags}} environment so these
	 *functions should only be used to generate additional tags.
	 *\code{tagAppendChild()} and \code{tagList()} are for supporting package
	 *authors who wish to create their own sets of tags; see the contents of
	 *bootstrap.R for examples.
	 *
	 */
	exported function "tagHasAttribute"("tag", "attr")
	function "tagify"("x")
	/**
	 * 
	 *\code{tag()} creates an HTML tag definition. Note that all of the valid HTML5
	 *tags are already defined in the \code{\link{tags}} environment so these
	 *functions should only be used to generate additional tags.
	 *\code{tagAppendChild()} and \code{tagList()} are for supporting package
	 *authors who wish to create their own sets of tags; see the contents of
	 *bootstrap.R for examples.
	 *
	 */
	exported function "tagList"("...")
	/**
	 * 
	 *Simple functions for constructing HTML documents.
	 *
	 */
	exported var "tags"
	/**
	 * 
	 *\code{tag()} creates an HTML tag definition. Note that all of the valid HTML5
	 *tags are already defined in the \code{\link{tags}} environment so these
	 *functions should only be used to generate additional tags.
	 *\code{tagAppendChild()} and \code{tagList()} are for supporting package
	 *authors who wish to create their own sets of tags; see the contents of
	 *bootstrap.R for examples.
	 *
	 */
	exported function "tagSetChildren"("tag", "...", "list"="")
	function "tagWrite"("tag", "textWriter", "indent"="0", "eol"="
")
	function "takeHeads"("ui")
	/**
	 * 
	 *Functions for manipulating \code{\link{singleton}} objects in tag
	 *hierarchies. Intended for framework authors.
	 *
	 */
	exported function "takeSingletons"("ui", "singletons"="character(0)", "desingleton"="TRUE")
	function "template_dfa"("x")
	/**
	 * 
	 *Encode characters in a URL path. This is the same as
	 *\code{\link{URLencode}} with \code{reserved = TRUE} except that
	 *\code{/} is preserved.
	 *
	 */
	exported function "urlEncodePath"("x")
	/**
	 * 
	 *Checks that the argument is valid for use as a CSS unit of length.
	 *
	 */
	exported function "validateCssUnit"("x")
	function "validateScalarName"("x", "name"="deparse(substitute(x))")
	function "withPrivateSeed"("expr")
	/**
	 * 
	 *This function makes it simpler to write HTML-generating code. Instead of
	 *needing to specify \code{tags} each time a tag function is used, as in
	 *\code{tags$div()} and \code{tags$p()}, code inside \code{withTags} is
	 *evaluated with \code{tags} searched first, so you can simply use
	 *\code{div()} and \code{p()}.
	 *
	 */
	exported function "withTags"("code")
	function "withTemporary"("env", "x", "value", "expr", "unset"="FALSE")
}

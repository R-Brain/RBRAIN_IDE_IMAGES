package "compiler" "3.3.1" {
	var ".__NAMESPACE__."
	var ".__S3MethodsTable__."
	function ".onLoad"("libname", "pkgname")
	var ".packageName"
	var "ADD.OP"
	function "addCenvFrame"("cenv", "vars")
	function "addCenvVars"("cenv", "vars")
	var "AND.OP"
	var "AND1ST.OP"
	var "AND2ND.OP"
	function "any.dots"("args")
	function "asm"("e", "gen", "env", "options"="")
	function "bcDecode"("code")
	var "BCMISMATCH.OP"
	function "bcprof"("expr")
	var "BRIFNOT.OP"
	var "CALL.OP"
	var "CALLBUILTIN.OP"
	var "CALLSPECIAL.OP"
	function "checkAssign"("e", "cntxt")
	function "checkCall"("def", "call", "signal")
	function "checkCompilerOptions"("jitEnabled", "options"="")
	function "checkConst"("e")
	var "CHECKFUN.OP"
	function "checkSkipLoopCntxt"("e", "cntxt", "breakOK"="TRUE")
	function "checkSkipLoopCntxtList"("elist", "cntxt", "breakOK")
	function "cmp"("e", "cb", "cntxt", "missingOK"="FALSE")
	function "cmpAssign"("e", "cb", "cntxt")
	function "cmpBuiltin"("e", "cb", "cntxt", "internal"="FALSE")
	function "cmpBuiltinArgs"("args", "names", "cb", "cntxt", "missingOK"="FALSE")
	function "cmpCall"("call", "cb", "cntxt")
	function "cmpCallArgs"("args", "cb", "cntxt")
	function "cmpCallExprFun"("fun", "args", "call", "cb", "cntxt")
	function "cmpCallSymFun"("fun", "args", "call", "cb", "cntxt")
	function "cmpComplexAssign"("symbol", "lhs", "value", "superAssign", "cb", "cntxt")
	function "cmpConst"("val", "cb", "cntxt")
	function "cmpConstArg"("a", "cb", "cntxt")
	function "cmpDispatch"("start.op", "dflt.op", "e", "cb", "cntxt", "missingOK"="TRUE")
	/**
	 * 
	 * These functions provide an interface to a byte code compiler for R.
	 *
	 */
	exported function "cmpfile"("infile", "outfile", "ascii"="FALSE", "env", "verbose"="FALSE", "options"="")
	function "cmpForBody"("callidx", "body", "ci", "cb", "cntxt")
	function "cmpframe"("inpos", "file")
	/**
	 * 
	 * These functions provide an interface to a byte code compiler for R.
	 *
	 */
	exported function "cmpfun"("f", "options"="")
	function "cmpGetterCall"("place", "cb", "cntxt")
	function "cmpGetterDispatch"("start.op", "dflt.op", "call", "cb", "cntxt")
	function "cmpIs"("op", "e", "cb", "cntxt")
	function "cmplib"("package", "file")
	function "cmpMath1"("e", "cb", "cntxt")
	function "cmpMultiColon"("e", "cb", "cntxt")
	function "cmpPrim1"("e", "cb", "op", "cntxt")
	function "cmpPrim2"("e", "cb", "op", "cntxt")
	function "cmpRepeatBody"("body", "cb", "cntxt")
	function "cmpSetterCall"("place", "vexpr", "cb", "cntxt")
	function "cmpSetterDispatch"("start.op", "dflt.op", "afun", "place", "call", "cb", "cntxt")
	function "cmpSimpleInternal"("e", "cb", "cntxt")
	function "cmpSpecial"("e", "cb", "cntxt")
	function "cmpSubassignDispatch"("start.op", "dflt.op", "afun", "place", "call", "cb", "cntxt")
	function "cmpSubsetDispatch"("start.op", "dflt.op", "e", "cb", "cntxt")
	function "cmpSubsetGetterDispatch"("start.op", "dflt.op", "call", "cb", "cntxt")
	function "cmpSym"("sym", "cb", "cntxt", "missingOK"="FALSE")
	function "cmpSymbolAssign"("symbol", "value", "superAssign", "cb", "cntxt")
	function "cmpTag"("n", "cb")
	function "cmpWhileBody"("call", "cond", "body", "cb", "cntxt")
	function "codeBufCode"("cb")
	var "COLON.OP"
	/**
	 * 
	 * These functions provide an interface to a byte code compiler for R.
	 *
	 */
	exported function "compile"("e", "env", "options"="")
	/**
	 * 
	 * These functions provide an interface to a byte code compiler for R.
	 *
	 */
	exported function "compilePKGS"("enable")
	var "compilerOptions"
	function "constantFold"("e", "cntxt")
	function "constantFoldCall"("e", "cntxt")
	function "constantFoldSym"("var", "cntxt")
	var "constModes"
	var "constNames"
	var "DDVAL_MISSOK.OP"
	var "DDVAL.OP"
	var "DFLTC.OP"
	var "DFLTSUBASSIGN.OP"
	var "DFLTSUBASSIGN2.OP"
	var "DFLTSUBSET.OP"
	var "DFLTSUBSET2.OP"
	/**
	 * 
	 * These functions provide an interface to a byte code compiler for R.
	 *
	 */
	exported function "disassemble"("code")
	var "DIV.OP"
	var "DODOTS.OP"
	var "DOLLAR.OP"
	var "DOLLARGETS.OP"
	var "DOLOOPBREAK.OP"
	var "DOLOOPNEXT.OP"
	var "DOMISSING.OP"
	var "DOTCALL.OP"
	function "dots.or.missing"("args")
	var "DOTSERR.OP"
	var "DUP.OP"
	var "DUP2ND.OP"
	/**
	 * 
	 * These functions provide an interface to a byte code compiler for R.
	 *
	 */
	exported function "enableJIT"("level")
	var "ENDASSIGN.OP"
	var "ENDASSIGN2.OP"
	var "ENDFOR.OP"
	var "ENDLOOPCNTXT.OP"
	var "EQ.OP"
	var "EXP.OP"
	var "EXPT.OP"
	function "findActionIndex"("name", "nm", "miss")
	function "findCenvVar"("var", "cenv")
	function "findFunDef"("fun", "cntxt")
	function "findHomeNS"("sym", "ns")
	function "findLocals"("e", "cntxt")
	function "findLocals1"("e", "shadowed"="character(0)")
	function "findLocalsList"("elist", "cntxt")
	function "findLocalsList1"("elist", "shadowed")
	function "findLocVar"("var", "cntxt")
	function "findVar"("var", "cntxt")
	function "flattenPlace"("place")
	var "foldFuns"
	function "frameTypes"("env")
	function "funEnv"("forms", "body", "cntxt")
	var "GE.OP"
	function "genCode"("e", "cntxt", "gen"="")
	function "getAssignedVar"("e")
	function "getAssignFun"("fun")
	var "GETBUILTIN.OP"
	/**
	 * 
	 * These functions provide an interface to a byte code compiler for R.
	 *
	 */
	exported function "getCompilerOption"("name", "options"="")
	function "getFoldFun"("var", "cntxt")
	var "GETFUN.OP"
	function "getGetterInlineHandler"("name", "package"="base")
	var "GETGLOBFUN.OP"
	function "getInlineHandler"("name", "package"="base")
	function "getInlineInfo"("name", "cntxt")
	var "GETINTLBUILTIN.OP"
	function "getSetterInlineHandler"("name", "package"="base")
	var "GETSYMFUN.OP"
	var "GETTER_CALL.OP"
	var "getterInlineHandlers"
	var "GETVAR_MISSOK.OP"
	var "GETVAR.OP"
	var "GOTO.OP"
	var "GT.OP"
	function "haveInlineHandler"("name", "package"="base")
	var "i"
	var "inlineHandlers"
	function "inlineSimpleInternalCall"("e", "def")
	var "INVISIBLE.OP"
	function "is.ddsym"("name")
	function "is.simpleInternal"("def")
	function "isBaseVar"("var", "cntxt")
	var "ISCHARACTER.OP"
	var "ISCOMPLEX.OP"
	var "ISDOUBLE.OP"
	var "ISINTEGER.OP"
	var "ISLOGICAL.OP"
	function "isLoopStopFun"("fname", "cntxt")
	function "isLoopTopFun"("fname", "cntxt")
	var "ISNULL.OP"
	var "ISNUMERIC.OP"
	var "ISOBJECT.OP"
	var "ISSYMBOL.OP"
	var "languageFuns"
	var "LDCONST.OP"
	var "LDFALSE.OP"
	var "LDNULL.OP"
	var "LDTRUE.OP"
	var "LE.OP"
	/**
	 * 
	 * These functions provide an interface to a byte code compiler for R.
	 *
	 */
	exported function "loadcmp"("file", "envir", "chdir"="FALSE")
	var "LOG.OP"
	var "LOGBASE.OP"
	var "LT.OP"
	function "make.argContext"("cntxt")
	function "make.callContext"("cntxt", "call")
	function "make.codeBuf"("expr")
	function "make.functionContext"("cntxt", "forms", "body")
	function "make.loopContext"("cntxt", "loop.label", "end.label")
	function "make.nonTailCallContext"("cntxt")
	function "make.noValueContext"("cntxt")
	function "make.promiseContext"("cntxt")
	function "make.toplevelContext"("cenv", "options"="")
	function "makeCenv"("env")
	var "MAKECLOSURE.OP"
	var "MAKEPROM.OP"
	var "MATH1.OP"
	var "math1funs"
	var "MATSUBASSIGN.OP"
	var "MATSUBASSIGN2.OP"
	var "MATSUBSET.OP"
	var "MATSUBSET2.OP"
	var "maxConstSize"
	function "missingArgs"("args")
	var "MUL.OP"
	var "name"
	var "NE.OP"
	var "noInlineSymbols"
	var "NOT.OP"
	function "notifyBadAssignFun"("fun", "cntxt")
	function "notifyBadCall"("w", "cntxt")
	function "notifyLocalFun"("fun", "cntxt")
	function "notifyMultipleSwitchDefaults"("ndflt", "cntxt")
	function "notifyNoSuperAssignVar"("symbol", "cntxt")
	function "notifyNoSwitchcases"("cntxt")
	function "notifyUndefFun"("fun", "cntxt")
	function "notifyUndefVar"("var", "cntxt")
	function "notifyWrongArgCount"("fun", "cntxt")
	function "notifyWrongBreakNext"("fun", "cntxt")
	function "notifyWrongDotsUse"("var", "cntxt")
	function "nsName"("ns")
	var "Opcodes.argc"
	var "Opcodes.names"
	var "OR.OP"
	var "OR1ST.OP"
	var "OR2ND.OP"
	function "packFrameName"("frame")
	function "pasteExpr"("e", "prefix"="
    ")
	var "POP.OP"
	var "PRINTVALUE.OP"
	var "PUSHARG.OP"
	var "PUSHCONSTARG.OP"
	var "PUSHFALSEARG.OP"
	var "PUSHNULLARG.OP"
	var "PUSHTRUEARG.OP"
	var "RETURN.OP"
	var "RETURNJMP.OP"
	var "safeBaseInternals"
	var "safeStatsInternals"
	var "SEQALONG.OP"
	var "SEQLEN.OP"
	/**
	 * 
	 * These functions provide an interface to a byte code compiler for R.
	 *
	 */
	exported function "setCompilerOptions"("...")
	function "setGetterInlineHandler"("name", "h", "package"="base")
	function "setInlineHandler"("name", "h", "package"="base")
	var "SETLOOPVAL.OP"
	function "setSetterInlineHandler"("name", "h", "package"="base")
	var "SETTAG.OP"
	var "SETTER_CALL.OP"
	var "setterInlineHandlers"
	var "SETVAR.OP"
	var "SETVAR2.OP"
	function "simpleArgs"("icall", "fnames")
	function "simpleFormals"("def")
	var "SQRT.OP"
	var "STARTASSIGN.OP"
	var "STARTASSIGN2.OP"
	var "STARTC.OP"
	var "STARTFOR.OP"
	var "STARTLOOPCNTXT.OP"
	var "STARTSUBASSIGN_N.OP"
	var "STARTSUBASSIGN.OP"
	var "STARTSUBASSIGN2_N.OP"
	var "STARTSUBASSIGN2.OP"
	var "STARTSUBSET_N.OP"
	var "STARTSUBSET.OP"
	var "STARTSUBSET2_N.OP"
	var "STARTSUBSET2.OP"
	var "STEPFOR.OP"
	var "SUB.OP"
	var "SUBASSIGN_N.OP"
	var "SUBASSIGN2_N.OP"
	var "SUBSET_N.OP"
	var "SUBSET2_N.OP"
	function "suppressAll"("cntxt")
	function "suppressUndef"("name", "cntxt")
	var "SWAP.OP"
	var "SWITCH.OP"
	function "tryCmpfun"("f")
	function "tryCompile"("e", "...")
	function "tryGetterInline"("call", "cb", "cntxt")
	function "tryInline"("e", "cb", "cntxt")
	function "trySetterInline"("afun", "place", "call", "cb", "cntxt")
	var "UMINUS.OP"
	var "UPLUS.OP"
	var "VECSUBASSIGN.OP"
	var "VECSUBASSIGN2.OP"
	var "VECSUBSET.OP"
	var "VECSUBSET2.OP"
	var "VISIBLE.OP"
}

package "KernSmooth" "2.23.15" {
	var ".__NAMESPACE__."
	var ".__S3MethodsTable__."
	function ".onAttach"("libname", "pkgname")
	function ".onUnload"("libpath")
	var ".packageName"
	/**
	 * 
	 *Returns x and y coordinates of the binned
	 *kernel density estimate of the probability
	 *density of the data.  
	 *
	 */
	exported function "bkde"("x", "kernel"="normal", "canonical"="FALSE", "bandwidth", "gridsize"="401", "range.x", "truncate"="TRUE")
	/**
	 * 
	 *Returns the set of grid points in each coordinate direction,
	 *and the matrix of density estimates over the mesh induced by
	 *the grid points. The kernel is the standard bivariate normal
	 *density. 
	 *
	 */
	exported function "bkde2D"("x", "bandwidth", "gridsize"="c(51L, 51L)", "range.x", "truncate"="TRUE")
	/**
	 * 
	 *Returns an estimate of a binned approximation to
	 *the kernel estimate of the specified density functional. 
	 *The kernel is the standard normal density.
	 *
	 */
	exported function "bkfe"("x", "drv", "bandwidth", "gridsize"="401", "range.x", "binned"="FALSE", "truncate"="TRUE")
	function "blkest"("x", "y", "Nval", "q")
	function "cpblock"("X", "Y", "Nmax", "q")
	/**
	 * 
	 *Uses direct plug-in methodology to select the bin width of 
	 *a histogram.
	 *
	 */
	exported function "dpih"("x", "scalest"="minim", "level"="2", "gridsize"="401", "range.x"="range(x)", "truncate"="TRUE")
	/**
	 * 
	 *Use direct plug-in methodology to select the bandwidth
	 *of a kernel density estimate.
	 *
	 */
	exported function "dpik"("x", "scalest"="minim", "level"="2", "kernel"="normal", "canonical"="FALSE", "gridsize"="401", "range.x"="range(x)", "truncate"="TRUE")
	/**
	 * 
	 *Use direct plug-in methodology to select the bandwidth
	 *of a local linear Gaussian kernel regression estimate, as described
	 *by Ruppert, Sheather and Wand (1995). 
	 *
	 */
	exported function "dpill"("x", "y", "blockmax"="5", "divisor"="20", "trim"="0.01", "proptrun"="0.05", "gridsize"="401", "range.x"="range(x)", "truncate"="TRUE")
	var "F_blkest"
	var "F_cp"
	var "F_lbtwod"
	var "F_linbin"
	var "F_locpol"
	var "F_rlbin"
	var "F_sdiag"
	var "F_sstdg"
	function "linbin"("X", "gpoints", "truncate"="TRUE")
	function "linbin2D"("X", "gpoints1", "gpoints2")
	/**
	 * 
	 *Estimates a probability density function,  
	 *regression function or their derivatives
	 *using local polynomials. A fast binned implementation
	 *over an equally-spaced grid is used.
	 *
	 */
	exported function "locpoly"("x", "y", "drv"="0", "degree", "kernel"="normal", "bandwidth", "gridsize"="401", "bwdisc"="25", "range.x", "binned"="FALSE", "truncate"="TRUE")
	function "rlbin"("X", "Y", "gpoints", "truncate"="TRUE")
	function "sdiag"("x", "drv"="0", "degree"="1", "kernel"="normal", "bandwidth", "gridsize"="401", "bwdisc"="25", "range.x", "binned"="FALSE", "truncate"="TRUE")
	function "sstdiag"("x", "drv"="0", "degree"="1", "kernel"="normal", "bandwidth", "gridsize"="401", "bwdisc"="25", "range.x", "binned"="FALSE", "truncate"="TRUE")
}

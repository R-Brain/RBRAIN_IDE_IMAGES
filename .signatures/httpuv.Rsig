package "httpuv" "1.3.5" {
	var ".__C__AppWrapper"
	var ".__C__ErrorStream"
	var ".__C__InputStream"
	var ".__C__NullInputStream"
	exported var ".__C__WebSocket"
	var ".__global__"
	var ".__NAMESPACE__."
	var ".__S3MethodsTable__."
	var ".globals"
	var ".packageName"
	var ".requireCachedGenerics"
	function "AppWrapper"("...")
	function "base64encode"("x")
	function "closeWS"("conn")
	function "daemonize"("handle")
	/**
	 * 
	 *Encodes/decodes strings using URI encoding/decoding in the same way that web
	 *browsers do. The precise behaviors of these functions can be found at
	 *developer.mozilla.org:
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI}{encodeURI}},
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent}{encodeURIComponent}},
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI}{decodeURI}},
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent}{decodeURIComponent}}
	 *
	 */
	exported function "decodeURI"("value")
	/**
	 * 
	 *Encodes/decodes strings using URI encoding/decoding in the same way that web
	 *browsers do. The precise behaviors of these functions can be found at
	 *developer.mozilla.org:
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI}{encodeURI}},
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent}{encodeURIComponent}},
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI}{decodeURI}},
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent}{decodeURIComponent}}
	 *
	 */
	exported function "decodeURIComponent"("value")
	function "destroyDaemonizedServer"("handle")
	function "destroyServer"("handle")
	/**
	 * 
	 *Encodes/decodes strings using URI encoding/decoding in the same way that web
	 *browsers do. The precise behaviors of these functions can be found at
	 *developer.mozilla.org:
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI}{encodeURI}},
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent}{encodeURIComponent}},
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI}{decodeURI}},
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent}{decodeURIComponent}}
	 *
	 */
	exported function "encodeURI"("value")
	/**
	 * 
	 *Encodes/decodes strings using URI encoding/decoding in the same way that web
	 *browsers do. The precise behaviors of these functions can be found at
	 *developer.mozilla.org:
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI}{encodeURI}},
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent}{encodeURIComponent}},
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI}{decodeURI}},
	 *\href{{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent}{decodeURIComponent}}
	 *
	 */
	exported function "encodeURIComponent"("value")
	function "ErrorStream"("...")
	/**
	 * 
	 *This function is needed in unusual cases where a C++ function calls
	 *an R function which sets the value of \code{.Random.seed}. This function
	 *should be called at the end of the R function to ensure that the new value
	 *\code{.Random.seed} is preserved. Otherwise, Rcpp may overwrite it with a
	 *previous value.
	 *
	 */
	exported function "getRNGState"()
	function "InputStream"("...")
	/**
	 * 
	 *Interrupts the currently running httpuv runloop, meaning
	 *\code{\link{runServer}} or \code{\link{service}} will return control back to
	 *the caller and no further tasks will be processed until those methods are
	 *called again. Note that this may cause in-process uploads or downloads to be
	 *interrupted in mid-request.
	 *
	 */
	exported function "interrupt"()
	function "makePipeServer"("name", "mask", "onHeaders", "onBodyData", "onRequest", "onWSOpen", "onWSMessage", "onWSClose")
	function "makeTcpServer"("host", "port", "onHeaders", "onBodyData", "onRequest", "onWSOpen", "onWSMessage", "onWSClose")
	var "nullInputStream"
	function "NullInputStream"("...")
	/**
	 * 
	 *Converts a raw vector to its Base64 encoding as a single-element character
	 *vector.
	 *
	 */
	exported function "rawToBase64"("x")
	function "rookCall"("func", "req", "data"="", "dataLength"="-1")
	function "run"("timeoutMillis")
	/**
	 * 
	 *This is a convenience function that provides a simple way to call 
	 *\code{\link{startServer}}, \code{\link{service}}, and 
	 *\code{\link{stopServer}} in the correct sequence. It does not return unless 
	 *interrupted or an error occurs.
	 *
	 */
	exported function "runServer"("host", "port", "app", "interruptIntervalMs"="ifelse(interactive(), 100, 1000)")
	function "sendWSMessage"("conn", "binary", "message")
	/**
	 * 
	 *Process HTTP requests and WebSocket messages. Even if a server exists, no
	 *requests are serviced unless and until \code{service} is called.
	 *
	 */
	exported function "service"("timeoutMs"="ifelse(interactive(), 100, 1000)")
	/**
	 * 
	 *Creates an HTTP/WebSocket server on the specified host and port. The server is daemonized
	 *so R interactive sessions are not blocked to handle requests.
	 *
	 */
	exported function "startDaemonizedServer"("host", "port", "app")
	/**
	 * 
	 *Creates an HTTP/WebSocket server on the specified host and port.
	 *
	 */
	exported function "startPipeServer"("name", "mask", "app")
	/**
	 * 
	 *Creates an HTTP/WebSocket server on the specified host and port.
	 *
	 */
	exported function "startServer"("host", "port", "app")
	/**
	 * 
	 *Given a handle that was returned from a previous invocation of 
	 *\code{\link{startDaemonizedServer}}, closes all open connections for that server,
	 *removes listeners in the R event loop and 
	 *unbinds the port. \strong{Be careful not to call \code{stopDaemonizedServer} more than 
	 *once on a handle, as this will cause the R process to crash!}
	 *
	 */
	exported function "stopDaemonizedServer"("server")
	function "stopLoop"()
	/**
	 * 
	 *Given a handle that was returned from a previous invocation of 
	 *\code{\link{startServer}}, closes all open connections for that server and 
	 *unbinds the port. \strong{Be careful not to call \code{stopServer} more than 
	 *once on a handle, as this will cause the R process to crash!}
	 *
	 */
	exported function "stopServer"("handle")
	/**
	 * 
	 *An object that represents a single WebSocket connection. The object can be
	 *used to send messages and close the connection, and to receive notifications
	 *when messages are received or the connection is closed.
	 *
	 */
	function "WebSocket"("...")
}

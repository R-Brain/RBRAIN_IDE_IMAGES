package "grDevices" "3.3.1" {
	var ".__NAMESPACE__."
	var ".__S3MethodsTable__."
	/**
	 * 
	 * Compute pretty axis scales and tick mark locations, the same way as
	 * traditional \R{} graphics do it.  This is interesting particularly for
	 * log scale axes.
	 *
	 */
	exported function ".axisPars"("usr", "log"="FALSE", "nintLog"="5")
	function ".geometry"("width", "height", "units", "res")
	var ".known_interactive.devices"
	var ".noGenerics"
	function ".onLoad"("libname", "pkgname")
	function ".onUnload"("libpath")
	var ".packageName"
	/**
	 * 
	 * \code{postscript} starts the graphics device driver for producing
	 * PostScript graphics.
	 *
	 */
	var ".ps.prolog"
	var ".ps.prolog.srgb"
	var ".PSenv"
	var ".Quartzenv"
	function ".select_device"()
	function ".smoothScatterCalcDensity"("x", "nbin", "bandwidth", "range.x")
	var ".X11env"
	function "[.raster"("x", "i", "j", "drop", "...")
	function "[<-.raster"("x", "i", "j", "value")
	function "%^%"("a", "b")
	var "aa.cairo"
	/**
	 * 
	 * Adjust or modify a vector of colors by \dQuote{turning knobs} on one or more
	 * coordinates in \eqn{{(r,g,b,\alpha)}} space, typically by up or down
	 * scaling them.
	 *
	 */
	exported function "adjustcolor"("col", "alpha.f"="1", "red.f"="1", "green.f"="1", "blue.f"="1", "offset"="c(0, 0, 0, 0)", "transform"="diag(c(red.f, green.f, blue.f, alpha.f))")
	function "anyNA.raster"("x", "recursive"="FALSE")
	/**
	 * 
	 * Coerce an \R{} object into a form suitable for graphics annotation.
	 *
	 */
	exported function "as.graphicsAnnot"("x")
	function "as.matrix.raster"("x", "...")
	/**
	 * 
	 * Functions to create a raster object (representing a bitmap
	 * image) and coerce other objects to a raster object.
	 *
	 */
	exported function "as.raster"("x", "...")
	/**
	 * 
	 * Functions to create a raster object (representing a bitmap
	 * image) and coerce other objects to a raster object.
	 *
	 */
	function "as.raster.array"("x", "max"="1", "...")
	/**
	 * 
	 * Functions to create a raster object (representing a bitmap
	 * image) and coerce other objects to a raster object.
	 *
	 */
	function "as.raster.character"("x", "max"="1", "...")
	/**
	 * 
	 * Functions to create a raster object (representing a bitmap
	 * image) and coerce other objects to a raster object.
	 *
	 */
	function "as.raster.logical"("x", "max"="1", "...")
	/**
	 * 
	 * Functions to create a raster object (representing a bitmap
	 * image) and coerce other objects to a raster object.
	 *
	 */
	function "as.raster.matrix"("x", "max"="1", "...")
	/**
	 * 
	 * Functions to create a raster object (representing a bitmap
	 * image) and coerce other objects to a raster object.
	 *
	 */
	function "as.raster.numeric"("x", "max"="1", "...")
	function "as.raster.raster"("x", "...")
	/**
	 * 
	 * Functions to create a raster object (representing a bitmap
	 * image) and coerce other objects to a raster object.
	 *
	 */
	function "as.raster.raw"("x", "max"="255", "...")
	/**
	 * 
	 * Compute pretty axis scales and tick mark locations, the same way as
	 * traditional \R{} graphics do it.  This is interesting particularly for
	 * log scale axes.
	 *
	 */
	exported function "axisTicks"("usr", "log", "axp"="", "nint"="5")
	/**
	 * 
	 * \code{bitmap} generates a graphics file.
	 * \code{dev2bitmap} copies the current graphics device to a file in a
	 * graphics format.
	 *
	 */
	exported function "bitmap"("file", "type"="png16m", "height"="7", "width"="7", "res"="72", "units"="in", "pointsize", "taa"="NA", "gaa"="NA", "...")
	/**
	 * 
	 * \code{densCols} produces a vector containing colors which encode the
	 * local densities at each point in a scatterplot.
	 *
	 */
	exported var "blues9"
	/**
	 * 
	 * Graphics devices for BMP, JPEG, PNG and TIFF format bitmap files.
	 *
	 */
	exported function "bmp"("filename"="Rplot%03d.bmp", "width"="480", "height"="480", "units"="px", "pointsize"="12", "bg"="white", "res"="NA", "...", "type"="c(\"cairo\", \"Xlib\", \"quartz\")", "antialias")
	/**
	 * 
	 * This function is typically called by another function to
	 * gather the statistics necessary for producing box plots,
	 * but may be invoked separately.
	 *
	 */
	exported function "boxplot.stats"("x", "coef"="1.5", "do.conf"="TRUE", "do.out"="TRUE")
	var "C_bmVersion"
	var "C_cairoProps"
	var "C_cairoVersion"
	var "C_chull"
	var "C_CIDFontInUse"
	var "C_col2rgb"
	var "C_colors"
	var "C_contourLines"
	var "C_devAskNewPage"
	var "C_devCairo"
	var "C_devcap"
	var "C_devcapture"
	var "C_devcontrol"
	var "C_devcopy"
	var "C_devcur"
	var "C_devdisplaylist"
	var "C_devholdflush"
	var "C_devnext"
	var "C_devoff"
	var "C_devprev"
	var "C_devset"
	var "C_devsize"
	var "C_getGraphicsEvent"
	var "C_getGraphicsEventEnv"
	var "C_getSnapshot"
	var "C_gray"
	var "C_hcl"
	var "C_hsv"
	var "C_makeQuartzDefault"
	var "C_palette"
	var "C_palette2"
	var "C_PDF"
	var "C_PicTeX"
	var "C_playSnapshot"
	var "C_PostScript"
	var "C_Quartz"
	var "C_R_CreateAtVector"
	var "C_R_GAxisPars"
	var "C_rgb"
	var "C_RGB2hsv"
	var "C_savePlot"
	var "C_setGraphicsEventEnv"
	var "C_Type1FontInUse"
	var "C_X11"
	var "C_XFig"
	function "c2to3"("col")
	/**
	 * 
	 * Graphics devices for SVG, PDF and PostScript graphics files using
	 * the cairo graphics API.
	 *
	 */
	exported function "cairo_pdf"("filename"="if (onefile) \"Rplots.pdf\" else \"Rplot%03d.pdf\"", "width"="7", "height"="7", "pointsize"="12", "onefile"="FALSE", "family"="sans", "bg"="white", "antialias"="c(\"default\", \"none\", \"gray\", \"subpixel\")", "fallback_resolution"="300")
	/**
	 * 
	 * Graphics devices for SVG, PDF and PostScript graphics files using
	 * the cairo graphics API.
	 *
	 */
	exported function "cairo_ps"("filename"="if (onefile) \"Rplots.ps\" else \"Rplot%03d.ps\"", "width"="7", "height"="7", "pointsize"="12", "onefile"="FALSE", "family"="sans", "bg"="white", "antialias"="c(\"default\", \"none\", \"gray\", \"subpixel\")", "fallback_resolution"="300")
	function "cairoVersion"()
	function "check_for_XQuartz"()
	function "check_gs_type"("gsexe", "type")
	/**
	 * 
	 * Utility function for setting options with some consistency checks.
	 * The \code{\link{attributes}} of the new settings in \code{new} are
	 * checked for consistency with the \emph{model} (often default)
	 * list in \code{name.opt}.
	 *
	 */
	exported function "check.options"("new", "name.opt", "reset"="FALSE", "assign.opt"="FALSE", "envir", "check.attributes"="c(\"mode\", \"length\")", "override.check"="FALSE")
	function "checkFont"("font")
	function "checkFont.CIDFont"("font")
	function "checkFont.default"("font")
	function "checkFont.Type1Font"("font")
	function "checkFontInUse"("names", "fontDBname")
	function "checkIntFormat"("s")
	function "checkQuartzFont"("font")
	function "checkX11Font"("font")
	function "chromaticAdaptation"("xyz", "from", "to")
	/**
	 * 
	 * Computes the subset of points which lie on the convex hull of the
	 * set of points specified.
	 *
	 */
	exported function "chull"("x", "y"="")
	/**
	 * 
	 * These functions are used to define the translation of a \R{} graphics
	 * font family name to a Type 1 or CID font descriptions, used by both
	 * the \code{\link{postscript}} and \code{\link{pdf}} graphics devices.
	 *
	 */
	exported function "CIDFont"("family", "cmap", "cmapEncoding", "pdfresource"="")
	/**
	 * 
	 * Translates from inches to cm (centimeters).
	 *
	 */
	exported function "cm"("x")
	/**
	 * 
	 * Create a vector of \code{n} contiguous colors.
	 *
	 */
	exported function "cm.colors"("n", "alpha"="1")
	/**
	 * 
	 * \R{} color to RGB (red/green/blue) conversion.
	 *
	 */
	exported function "col2rgb"("col", "alpha"="FALSE")
	/**
	 * 
	 * These functions specify colour spaces for use in
	 * \code{\link{convertColor}}.
	 *
	 */
	exported function "colorConverter"("toXYZ", "fromXYZ", "name", "white"="")
	/**
	 * 
	 * These functions return functions that interpolate a set of given
	 * colors to create new color palettes (like \code{\link{topo.colors}}) and
	 * color ramps, functions that map the interval \eqn{{[0, 1]}} to colors
	 * (like \code{\link{grey}}).
	 *
	 */
	exported function "colorRamp"("colors", "bias"="1", "space"="c(\"rgb\", \"Lab\")", "interpolate"="c(\"linear\", \"spline\")", "alpha"="FALSE")
	/**
	 * 
	 * These functions return functions that interpolate a set of given
	 * colors to create new color palettes (like \code{\link{topo.colors}}) and
	 * color ramps, functions that map the interval \eqn{{[0, 1]}} to colors
	 * (like \code{\link{grey}}).
	 *
	 */
	exported function "colorRampPalette"("colors", "...")
	/**
	 * 
	 * Returns the built-in color names which \R{} knows about.
	 *
	 */
	exported function "colors"("distinct"="FALSE")
	/**
	 * 
	 * Convert colours between their representations in standard
	 * colour spaces.
	 *
	 */
	exported var "colorspaces"
	/**
	 * 
	 * Returns the built-in color names which \R{} knows about.
	 *
	 */
	exported function "colours"("distinct"="FALSE")
	/**
	 * 
	 * Calculate contour lines for a given set of data.
	 *
	 */
	exported function "contourLines"("x"="seq(0, 1, length.out = nrow(z))", "y"="seq(0, 1, length.out = ncol(z))", "z", "nlevels"="10", "levels"="pretty(range(z, na.rm = TRUE), nlevels)")
	/**
	 * 
	 * Convert colours between their representations in standard
	 * colour spaces.
	 *
	 */
	exported function "convertColor"("color", "from", "to", "from.ref.white"="", "to.ref.white"="", "scale.in"="1", "scale.out"="1", "clip"="TRUE")
	/**
	 * 
	 * \code{densCols} produces a vector containing colors which encode the
	 * local densities at each point in a scatterplot.
	 *
	 */
	exported function "densCols"("x", "y"="", "nbin"="128", "bandwidth", "colramp"="colorRampPalette(blues9[-(1:3)])")
	/**
	 * 
	 * Query the capabilities of the current graphics device.
	 *
	 */
	exported function "dev.capabilities"("what"="")
	/**
	 * 
	 * \code{dev.capture} captures the current contents of a graphics device
	 * as a raster (bitmap) image.
	 *
	 */
	exported function "dev.capture"("native"="FALSE")
	/**
	 * 
	 * \code{dev.copy} copies the graphics contents of the current device
	 * to the device specified by \code{which} or to a new device which has
	 * been created by the function specified by \code{device} (it is an
	 * error to specify both \code{which} and \code{device}).  (If recording
	 * is off on the current device, there are no contents to copy: this will
	 * result in no plot or an empty plot.)
	 * The device copied to becomes the current device.
	 *
	 * \code{dev.print} copies the graphics contents of the current device
	 * to a new device which has been created by the function specified by
	 * \code{device} and then shuts the new device.
	 *
	 * \code{dev.copy2eps} is similar to \code{dev.print} but produces an
	 * EPSF output file in portrait orientation (\code{horizontal = FALSE}).
	 * \code{dev.copy2pdf} is the analogue for PDF output.
	 *
	 * \code{dev.control} allows the user to control the recording of
	 * graphics operations in a device.  If \code{displaylist} is \code{"inhibit"}
	 * (\code{"enable"}) then recording is turned off (on). It is only safe
	 * to change this at the beginning of a plot (just before or just after a
	 * new page).  Initially recording is on for screen devices, and off for
	 * print devices.
	 *
	 */
	exported function "dev.control"("displaylist"="c(\"inhibit\", \"enable\")")
	/**
	 * 
	 * \code{dev.copy} copies the graphics contents of the current device
	 * to the device specified by \code{which} or to a new device which has
	 * been created by the function specified by \code{device} (it is an
	 * error to specify both \code{which} and \code{device}).  (If recording
	 * is off on the current device, there are no contents to copy: this will
	 * result in no plot or an empty plot.)
	 * The device copied to becomes the current device.
	 *
	 * \code{dev.print} copies the graphics contents of the current device
	 * to a new device which has been created by the function specified by
	 * \code{device} and then shuts the new device.
	 *
	 * \code{dev.copy2eps} is similar to \code{dev.print} but produces an
	 * EPSF output file in portrait orientation (\code{horizontal = FALSE}).
	 * \code{dev.copy2pdf} is the analogue for PDF output.
	 *
	 * \code{dev.control} allows the user to control the recording of
	 * graphics operations in a device.  If \code{displaylist} is \code{"inhibit"}
	 * (\code{"enable"}) then recording is turned off (on). It is only safe
	 * to change this at the beginning of a plot (just before or just after a
	 * new page).  Initially recording is on for screen devices, and off for
	 * print devices.
	 *
	 */
	exported function "dev.copy"("device", "...", "which"="dev.next()")
	/**
	 * 
	 * \code{dev.copy} copies the graphics contents of the current device
	 * to the device specified by \code{which} or to a new device which has
	 * been created by the function specified by \code{device} (it is an
	 * error to specify both \code{which} and \code{device}).  (If recording
	 * is off on the current device, there are no contents to copy: this will
	 * result in no plot or an empty plot.)
	 * The device copied to becomes the current device.
	 *
	 * \code{dev.print} copies the graphics contents of the current device
	 * to a new device which has been created by the function specified by
	 * \code{device} and then shuts the new device.
	 *
	 * \code{dev.copy2eps} is similar to \code{dev.print} but produces an
	 * EPSF output file in portrait orientation (\code{horizontal = FALSE}).
	 * \code{dev.copy2pdf} is the analogue for PDF output.
	 *
	 * \code{dev.control} allows the user to control the recording of
	 * graphics operations in a device.  If \code{displaylist} is \code{"inhibit"}
	 * (\code{"enable"}) then recording is turned off (on). It is only safe
	 * to change this at the beginning of a plot (just before or just after a
	 * new page).  Initially recording is on for screen devices, and off for
	 * print devices.
	 *
	 */
	exported function "dev.copy2eps"("...")
	/**
	 * 
	 * \code{dev.copy} copies the graphics contents of the current device
	 * to the device specified by \code{which} or to a new device which has
	 * been created by the function specified by \code{device} (it is an
	 * error to specify both \code{which} and \code{device}).  (If recording
	 * is off on the current device, there are no contents to copy: this will
	 * result in no plot or an empty plot.)
	 * The device copied to becomes the current device.
	 *
	 * \code{dev.print} copies the graphics contents of the current device
	 * to a new device which has been created by the function specified by
	 * \code{device} and then shuts the new device.
	 *
	 * \code{dev.copy2eps} is similar to \code{dev.print} but produces an
	 * EPSF output file in portrait orientation (\code{horizontal = FALSE}).
	 * \code{dev.copy2pdf} is the analogue for PDF output.
	 *
	 * \code{dev.control} allows the user to control the recording of
	 * graphics operations in a device.  If \code{displaylist} is \code{"inhibit"}
	 * (\code{"enable"}) then recording is turned off (on). It is only safe
	 * to change this at the beginning of a plot (just before or just after a
	 * new page).  Initially recording is on for screen devices, and off for
	 * print devices.
	 *
	 */
	exported function "dev.copy2pdf"("...", "out.type"="pdf")
	/**
	 * 
	 * These functions provide control over multiple graphics devices.
	 *
	 */
	exported function "dev.cur"()
	function "dev.displaylist"()
	/**
	 * 
	 * This gives a way to hold/flush output on certain on-screen devices,
	 * and is ignored by other devices.
	 *
	 */
	exported function "dev.flush"("level"="1")
	/**
	 * 
	 * This gives a way to hold/flush output on certain on-screen devices,
	 * and is ignored by other devices.
	 *
	 */
	exported function "dev.hold"("level"="1")
	/**
	 * 
	 * Test if the current graphics device (or that which would be opened) is
	 * interactive.
	 *
	 */
	exported function "dev.interactive"("orNone"="FALSE")
	/**
	 * 
	 * These functions provide control over multiple graphics devices.
	 *
	 */
	exported function "dev.list"()
	/**
	 * 
	 * These functions provide control over multiple graphics devices.
	 *
	 */
	exported function "dev.new"("...", "noRStudioGD"="FALSE")
	/**
	 * 
	 * These functions provide control over multiple graphics devices.
	 *
	 */
	exported function "dev.next"("which"="dev.cur()")
	/**
	 * 
	 * These functions provide control over multiple graphics devices.
	 *
	 */
	exported function "dev.off"("which"="dev.cur()")
	/**
	 * 
	 * These functions provide control over multiple graphics devices.
	 *
	 */
	exported function "dev.prev"("which"="dev.cur()")
	/**
	 * 
	 * \code{dev.copy} copies the graphics contents of the current device
	 * to the device specified by \code{which} or to a new device which has
	 * been created by the function specified by \code{device} (it is an
	 * error to specify both \code{which} and \code{device}).  (If recording
	 * is off on the current device, there are no contents to copy: this will
	 * result in no plot or an empty plot.)
	 * The device copied to becomes the current device.
	 *
	 * \code{dev.print} copies the graphics contents of the current device
	 * to a new device which has been created by the function specified by
	 * \code{device} and then shuts the new device.
	 *
	 * \code{dev.copy2eps} is similar to \code{dev.print} but produces an
	 * EPSF output file in portrait orientation (\code{horizontal = FALSE}).
	 * \code{dev.copy2pdf} is the analogue for PDF output.
	 *
	 * \code{dev.control} allows the user to control the recording of
	 * graphics operations in a device.  If \code{displaylist} is \code{"inhibit"}
	 * (\code{"enable"}) then recording is turned off (on). It is only safe
	 * to change this at the beginning of a plot (just before or just after a
	 * new page).  Initially recording is on for screen devices, and off for
	 * print devices.
	 *
	 */
	exported function "dev.print"("device", "...")
	/**
	 * 
	 * These functions provide control over multiple graphics devices.
	 *
	 */
	exported function "dev.set"("which"="dev.next()")
	/**
	 * 
	 * Find the dimensions of the device surface of the current device.
	 *
	 */
	exported function "dev.size"("units"="c(\"in\", \"cm\", \"px\")")
	/**
	 * 
	 * \code{bitmap} generates a graphics file.
	 * \code{dev2bitmap} copies the current graphics device to a file in a
	 * graphics format.
	 *
	 */
	exported function "dev2bitmap"("file", "type"="png16m", "height"="7", "width"="7", "res"="72", "units"="in", "pointsize", "...", "method"="c(\"postscript\", \"pdf\")", "taa"="NA", "gaa"="NA")
	/**
	 * 
	 * This function can be used to control (for the current device)
	 * whether the user is prompted before starting a new page of output.
	 *
	 */
	exported function "devAskNewPage"("ask"="")
	/**
	 * 
	 * Test if the current graphics device (or that which would be opened) is
	 * interactive.
	 *
	 */
	exported function "deviceIsInteractive"("name"="")
	/**
	 * 
	 * Runs Ghostscript to process a PDF or PostScript file and
	 * embed all fonts in the file.
	 *
	 */
	exported function "embedFonts"("file", "format", "outfile", "fontpaths"="character()", "options"="character()")
	/**
	 * 
	 * Extends a numerical range by a small percentage, i.e., fraction,
	 * \emph{on both sides}.
	 *
	 */
	exported function "extendrange"("x", "r"="range(x, na.rm = TRUE)", "f"="0.05")
	/**
	 * 
	 *This function waits for input from a graphics window in the
	 *form of a mouse or keyboard event.
	 *
	 */
	exported function "getGraphicsEvent"("prompt"="Waiting for input", "onMouseDown"="", "onMouseMove"="", "onMouseUp"="", "onKeybd"="", "consolePrompt")
	/**
	 * 
	 *This function waits for input from a graphics window in the
	 *form of a mouse or keyboard event.
	 *
	 */
	exported function "getGraphicsEventEnv"("which"="dev.cur()")
	/**
	 * 
	 * These functions provide control over multiple graphics devices.
	 *
	 */
	exported function "graphics.off"()
	/**
	 * 
	 * Create a vector of colors from a vector of gray levels.
	 *
	 */
	exported function "gray"("level", "alpha"="")
	/**
	 * 
	 * Create a vector of \code{n} gamma-corrected gray colors.
	 *
	 */
	exported function "gray.colors"("n", "start"="0.3", "end"="0.9", "gamma"="2.2", "alpha"="")
	/**
	 * 
	 * Create a vector of colors from a vector of gray levels.
	 *
	 */
	exported function "grey"("level", "alpha"="")
	/**
	 * 
	 * Create a vector of \code{n} gamma-corrected gray colors.
	 *
	 */
	exported function "grey.colors"("n", "start"="0.3", "end"="0.9", "gamma"="2.2", "alpha"="")
	/**
	 * 
	 * Report versions of third-party graphics software.
	 *
	 */
	exported function "grSoftVersion"()
	function "guessEncoding"("family")
	/**
	 * 
	 * Create a vector of colors from vectors specifying hue,
	 * chroma and luminance.
	 *
	 */
	exported function "hcl"("h"="0", "c"="35", "l"="85", "alpha"="1", "fixup"="TRUE")
	/**
	 * 
	 * Create a vector of \code{n} contiguous colors.
	 *
	 */
	exported function "heat.colors"("n", "alpha"="1")
	/**
	 * 
	 * If the \code{family} graphical parameter (see \code{\link{par}})
	 * has been set to one of the Hershey fonts (see \sQuote{Details})
	 * Hershey vector fonts are used to render text.
	 *
	 * When using the \code{\link{text}} and \code{\link{contour}} functions
	 * Hershey fonts may be selected via the \code{vfont} argument, which is
	 * a character vector of length 2 (see \sQuote{Details} for valid
	 * values).  This allows Cyrillic to be selected, which is not available
	 * via the font families.
	 *
	 */
	exported var "Hershey"
	/**
	 * 
	 * Create a vector of colors from vectors specifying hue, saturation and
	 * value.
	 *
	 */
	exported function "hsv"("h"="1", "s"="1", "v"="1", "alpha"="1")
	function "initPSandPDFfonts"()
	function "is.na.raster"("x")
	/**
	 * 
	 * Functions to create a raster object (representing a bitmap
	 * image) and coerce other objects to a raster object.
	 *
	 */
	exported function "is.raster"("x")
	function "isPDF"("fontDBname")
	/**
	 * 
	 * Graphics devices for BMP, JPEG, PNG and TIFF format bitmap files.
	 *
	 */
	exported function "jpeg"("filename"="Rplot%03d.jpeg", "width"="480", "height"="480", "units"="px", "pointsize"="12", "quality"="75", "bg"="white", "res"="NA", "...", "type"="c(\"cairo\", \"Xlib\", \"quartz\")", "antialias")
	/**
	 * 
	 * These functions specify colour spaces for use in
	 * \code{\link{convertColor}}.
	 *
	 */
	exported function "make.rgb"("red", "green", "blue", "name"="", "white"="D65", "gamma"="2.2")
	function "matchEncoding"("font", "encoding")
	function "matchEncoding.CIDFont"("font", "encoding")
	function "matchEncoding.Type1Font"("font", "encoding")
	function "matchFont"("font", "encoding")
	/**
	 * 
	 * Easy setup for plotting multiple figures (in a rectangular layout) on
	 * one page.  This computes a sensible default for
	 * \code{\link{par}(mfrow)}.
	 *
	 */
	exported function "n2mfrow"("nr.plots")
	/**
	 * 
	 * Compute the number of classes for a histogram.
	 *
	 */
	exported function "nclass.FD"("x")
	/**
	 * 
	 * Compute the number of classes for a histogram.
	 *
	 */
	exported function "nclass.scott"("x")
	/**
	 * 
	 * Compute the number of classes for a histogram.
	 *
	 */
	exported function "nclass.Sturges"("x")
	function "Ops.raster"("e1", "e2")
	/**
	 * 
	 * View or manipulate the color palette which is used when a \code{col=}
	 * has a numeric index.
	 *
	 */
	exported function "palette"("value")
	/**
	 * 
	 * \code{pdf} starts the graphics device driver for producing PDF
	 * graphics.
	 *
	 */
	exported function "pdf"("file"="if (onefile) \"Rplots.pdf\" else \"Rplot%03d.pdf\"", "width", "height", "onefile", "family", "title", "fonts", "version", "paper", "encoding", "bg", "fg", "pointsize", "pagecentre", "colormodel", "useDingbats", "useKerning", "fillOddEven", "compress")
	/**
	 * 
	 * The auxiliary function \code{pdf.options} can be used to set or view
	 * (if called without arguments) the default values for some of the
	 * arguments to \code{\link{pdf}}.
	 *
	 * \code{pdf.options} needs to be called before calling \code{pdf},
	 * and the default values it sets can be overridden by supplying
	 * arguments to \code{pdf}.
	 * 
	 */
	exported function "pdf.options"("...", "reset"="FALSE")
	/**
	 * 
	 * These functions handle the translation of a \R{} graphics
	 * font family name to a PostScript or PDF font description, used by the
	 * \code{\link{postscript}} or \code{\link{pdf}} graphics devices.
	 *
	 */
	exported function "pdfFonts"("...")
	/**
	 * 
	 * This function produces simple graphics suitable for inclusion in TeX
	 * and LaTeX documents.  It dates from the very early days of \R{} and is
	 * for historical interest only.
	 *
	 */
	exported function "pictex"("file"="Rplots.tex", "width"="5", "height"="4", "debug"="FALSE", "bg"="white", "fg"="black")
	/**
	 * 
	 * Graphics devices for BMP, JPEG, PNG and TIFF format bitmap files.
	 *
	 */
	exported function "png"("filename"="Rplot%03d.png", "width"="480", "height"="480", "units"="px", "pointsize"="12", "bg"="white", "res"="NA", "...", "type"="c(\"cairo\", \"cairo-png\", \"Xlib\", \"quartz\")", "antialias")
	/**
	 * 
	 * \code{postscript} starts the graphics device driver for producing
	 * PostScript graphics.
	 *
	 */
	exported function "postscript"("file"="if (onefile) \"Rplots.ps\" else \"Rplot%03d.ps\"", "onefile", "family", "title", "fonts", "encoding", "bg", "fg", "width", "height", "horizontal", "pointsize", "paper", "pagecentre", "print.it", "command", "colormodel", "useKerning", "fillOddEven")
	/**
	 * 
	 * These functions handle the translation of a \R{} graphics
	 * font family name to a PostScript or PDF font description, used by the
	 * \code{\link{postscript}} or \code{\link{pdf}} graphics devices.
	 *
	 */
	exported function "postscriptFonts"("...")
	function "prettyDate"("x", "n"="5", "min.n"="n%/%2", "sep"=" ", "...")
	function "print.colorConverter"("x", "...")
	function "print.raster"("x", "...")
	/**
	 * 
	 * Functions to save the current plot in an \R{} variable, and to replay it.
	 *
	 */
	function "print.recordedplot"("x", "...")
	function "print.RGBcolorConverter"("x", "...")
	function "printFont"("font")
	function "printFont.CIDFont"("font")
	function "printFont.Type1Font"("font")
	function "printFonts"("fonts")
	/**
	 * 
	 * The auxiliary function \code{ps.options} can be used to set or view
	 * (if called without arguments) the default values for some of the
	 * arguments to \code{\link{postscript}}.
	 *
	 * \code{ps.options} needs to be called before calling \code{postscript},
	 * and the default values it sets can be overridden by supplying
	 * arguments to \code{postscript}.
	 * 
	 */
	exported function "ps.options"("...", "reset"="FALSE", "override.check"="FALSE")
	/**
	 * 
	 * \code{quartz} starts a graphics device driver for the OS X System.
	 * It supports plotting both to the screen (the default) and to various
	 * graphics file formats.
	 *
	 */
	exported function "quartz"("title", "width", "height", "pointsize", "family", "antialias", "type", "file"="", "bg", "canvas", "dpi")
	/**
	 * 
	 * \code{quartz} starts a graphics device driver for the OS X System.
	 * It supports plotting both to the screen (the default) and to various
	 * graphics file formats.
	 *
	 */
	exported function "quartz.options"("...", "reset"="FALSE")
	/**
	 * 
	 * \code{quartz} starts a graphics device driver for the OS X System.
	 * It supports plotting both to the screen (the default) and to various
	 * graphics file formats.
	 *
	 */
	exported function "quartz.save"("file", "type"="png", "device"="dev.cur()", "dpi"="100", "...")
	/**
	 * 
	 * These functions handle the translation of a device-independent R graphics
	 * font family name to a quartz font description.
	 *
	 */
	exported function "quartzFont"("family")
	/**
	 * 
	 * These functions handle the translation of a device-independent R graphics
	 * font family name to a quartz font description.
	 *
	 */
	exported function "quartzFonts"("...")
	/**
	 * 
	 * Create a vector of \code{n} contiguous colors.
	 *
	 */
	exported function "rainbow"("n", "s"="1", "v"="1", "start"="0", "end"="max(1, n - 1)/n", "alpha"="1")
	/**
	 * 
	 * Records arbitrary code on the graphics engine display list.
	 * Useful for encapsulating calculations with graphical output
	 * that depends on the calculations.
	 * Intended \emph{only} for expert use.
	 *
	 */
	exported function "recordGraphics"("expr", "list", "env")
	function "recordPalette"()
	/**
	 * 
	 * Functions to save the current plot in an \R{} variable, and to replay it.
	 *
	 */
	exported function "recordPlot"("load"="", "attach"="")
	/**
	 * 
	 * Functions to save the current plot in an \R{} variable, and to replay it.
	 *
	 */
	exported function "replayPlot"("x", "reloadPkgs"="FALSE")
	function "restoreRecordedPlot"("x", "reloadPkgs")
	/**
	 * 
	 * This function creates colors corresponding to the given
	 * intensities (between 0 and \code{max}) of the red, green and blue
	 * primaries.  The colour specification refers to the
	 * standard sRGB colorspace (IEC standard 61966).
	 *
	 * An alpha transparency value can also be specified (as an opacity, so
	 * \code{0} means fully transparent and \code{max} means opaque).  If
	 * \code{alpha} is not specified, an opaque colour is generated.
	 *
	 * The \code{names} argument may be used to provide names for the
	 * colors.
	 *
	 * The values returned by these functions can be used with a
	 * \code{col=} specification in graphics functions or in \code{\link{par}}.
	 *
	 */
	exported function "rgb"("red", "green", "blue", "alpha", "names"="", "maxColorValue"="1")
	/**
	 * 
	 * \code{rgb2hsv} transforms colors
	 * from RGB space (red/green/blue)
	 * into HSV space (hue/saturation/value).
	 *
	 */
	exported function "rgb2hsv"("r", "g"="", "b"="", "maxColorValue"="255")
	/**
	 * 
	 * Save the current page of a cairo \code{\link{X11}()} device to a file.
	 *
	 */
	exported function "savePlot"("filename"="paste(\"Rplot\", type, sep = \".\")", "type"="c(\"png\", \"jpeg\", \"tiff\", \"bmp\")", "device"="dev.cur()")
	function "seqDtime"("beg", "end", "by", "length"="")
	/**
	 * 
	 * The auxiliary function \code{ps.options} can be used to set or view
	 * (if called without arguments) the default values for some of the
	 * arguments to \code{\link{postscript}}.
	 *
	 * \code{ps.options} needs to be called before calling \code{postscript},
	 * and the default values it sets can be overridden by supplying
	 * arguments to \code{postscript}.
	 * 
	 */
	exported function "setEPS"("...")
	function "setFonts"("fonts", "fontNames", "fontDBname")
	/**
	 * 
	 *This function waits for input from a graphics window in the
	 *form of a mouse or keyboard event.
	 *
	 */
	exported function "setGraphicsEventEnv"("which"="dev.cur()", "env")
	/**
	 * 
	 *This function waits for input from a graphics window in the
	 *form of a mouse or keyboard event.
	 *
	 */
	exported function "setGraphicsEventHandlers"("which"="dev.cur()", "...")
	/**
	 * 
	 * The auxiliary function \code{ps.options} can be used to set or view
	 * (if called without arguments) the default values for some of the
	 * arguments to \code{\link{postscript}}.
	 *
	 * \code{ps.options} needs to be called before calling \code{postscript},
	 * and the default values it sets can be overridden by supplying
	 * arguments to \code{postscript}.
	 * 
	 */
	exported function "setPS"("...")
	function "setQuartzFonts"("fonts", "fontNames")
	function "setX11Fonts"("fonts", "fontNames")
	/**
	 * 
	 * Graphics devices for SVG, PDF and PostScript graphics files using
	 * the cairo graphics API.
	 *
	 */
	exported function "svg"("filename"="if (onefile) \"Rplots.svg\" else \"Rplot%03d.svg\"", "width"="7", "height"="7", "pointsize"="12", "onefile"="FALSE", "family"="sans", "bg"="white", "antialias"="c(\"default\", \"none\", \"gray\", \"subpixel\")")
	/**
	 * 
	 * Create a vector of \code{n} contiguous colors.
	 *
	 */
	exported function "terrain.colors"("n", "alpha"="1")
	/**
	 * 
	 * Graphics devices for BMP, JPEG, PNG and TIFF format bitmap files.
	 *
	 */
	exported function "tiff"("filename"="Rplot%03d.tiff", "width"="480", "height"="480", "units"="px", "pointsize"="12", "compression"="c(\"none\", \"rle\", \"lzw\", \"jpeg\", \"zip\", \"lzw+p\", \"zip+p\")", "bg"="white", "res"="NA", "...", "type"="c(\"cairo\", \"Xlib\", \"quartz\")", "antialias")
	/**
	 * 
	 * Create a vector of \code{n} contiguous colors.
	 *
	 */
	exported function "topo.colors"("n", "alpha"="1")
	/**
	 * 
	 * Projection of 3-dimensional to 2-dimensional points using a 4x4
	 * viewing transformation matrix.  Mainly for adding to
	 * perspective plots such as \code{\link{persp}}.
	 *
	 */
	exported function "trans3d"("x", "y", "z", "pmat")
	function "trunc_POSIXt"("x", "units"="c(\"secs\", \"mins\", \"hours\", \"days\", \"weeks\", \"months\", \"years\",     \"decades\", \"centuries\")", "start.on.monday"="TRUE")
	/**
	 * 
	 * These functions are used to define the translation of a \R{} graphics
	 * font family name to a Type 1 or CID font descriptions, used by both
	 * the \code{\link{postscript}} and \code{\link{pdf}} graphics devices.
	 *
	 */
	exported function "Type1Font"("family", "metrics", "encoding"="default")
	var "white.points"
	/**
	 * 
	 * \code{X11} starts a graphics device driver for the X Window System
	 * (version 11).  This can only be done on machines/accounts that have
	 * access to an X server.
	 *
	 * \code{x11} is recognized as a synonym for \code{X11}.
	 *
	 * The \R{} function is a wrapper for two devices, one based on Xlib
	 * (\url{https://en.wikipedia.org/wiki/Xlib}) and one using cairographics
	 * (\url{http://www.cairographics.org}).
	 *
	 */
	exported function "x11"("display"="", "width", "height", "pointsize", "gamma", "bg", "canvas", "fonts", "family", "xpos", "ypos", "title", "type", "antialias")
	/**
	 * 
	 * \code{X11} starts a graphics device driver for the X Window System
	 * (version 11).  This can only be done on machines/accounts that have
	 * access to an X server.
	 *
	 * \code{x11} is recognized as a synonym for \code{X11}.
	 *
	 * The \R{} function is a wrapper for two devices, one based on Xlib
	 * (\url{https://en.wikipedia.org/wiki/Xlib}) and one using cairographics
	 * (\url{http://www.cairographics.org}).
	 *
	 */
	exported function "X11"("display"="", "width", "height", "pointsize", "gamma", "bg", "canvas", "fonts", "family", "xpos", "ypos", "title", "type", "antialias")
	/**
	 * 
	 * \code{X11} starts a graphics device driver for the X Window System
	 * (version 11).  This can only be done on machines/accounts that have
	 * access to an X server.
	 *
	 * \code{x11} is recognized as a synonym for \code{X11}.
	 *
	 * The \R{} function is a wrapper for two devices, one based on Xlib
	 * (\url{https://en.wikipedia.org/wiki/Xlib}) and one using cairographics
	 * (\url{http://www.cairographics.org}).
	 *
	 */
	exported function "X11.options"("...", "reset"="FALSE")
	/**
	 * 
	 * These functions handle the translation of a device-independent R graphics
	 * font family name to an X11 font description.
	 *
	 */
	exported function "X11Font"("font")
	function "X11FontError"("errDesc")
	/**
	 * 
	 * These functions handle the translation of a device-independent R graphics
	 * font family name to an X11 font description.
	 *
	 */
	exported function "X11Fonts"("...")
	/**
	 * 
	 * \code{xfig} starts the graphics device driver for producing XFig
	 * (version 3.2) graphics.
	 *
	 * The auxiliary function \code{ps.options} can be used to set and view
	 * (if called without arguments) default values for the arguments to
	 * \code{xfig} and \code{postscript}.
	 *
	 */
	exported function "xfig"("file"="if (onefile) \"Rplots.fig\" else \"Rplot%03d.fig\"", "onefile"="FALSE", "encoding"="none", "paper"="default", "horizontal"="TRUE", "width"="0", "height"="0", "family"="Helvetica", "pointsize"="12", "bg"="transparent", "fg"="black", "pagecentre"="TRUE", "defaultfont"="FALSE", "textspecial"="FALSE")
	/**
	 * 
	 * \code{xy.coords} is used by many functions to obtain
	 * x and y coordinates for plotting.  The use of this common mechanism
	 * across all relevant \R{} functions produces a measure of consistency.
	 *
	 */
	exported function "xy.coords"("x", "y"="", "xlab"="", "ylab"="", "log"="", "recycle"="FALSE")
	/**
	 * 
	 * Given (x,y) points, determine their multiplicity -- checking for
	 * equality only up to some (crude kind of) noise.  Note that this is
	 * special kind of 2D binning.
	 *
	 */
	exported function "xyTable"("x", "y"="", "digits")
	/**
	 * 
	 * Utility for obtaining consistent x, y and z coordinates and labels
	 * for three dimensional (3D) plots.
	 *
	 */
	exported function "xyz.coords"("x", "y"="", "z"="", "xlab"="", "ylab"="", "zlab"="", "log"="", "recycle"="FALSE")
}

package "lattice" "0.20.33" {
	var ".__NAMESPACE__."
	var ".__S3MethodsTable__."
	function ".defaultLatticeOptions"()
	function ".defaultLatticePrefixStatus"()
	function ".defaultLatticeStatus"()
	var ".LatticeEnv"
	var ".noGenerics"
	function ".onLoad"("libname", "pkgname")
	function ".onUnload"("libpath")
	var ".packageName"
	function ".smoothScatterCalcDensity"("x", "nbin", "bandwidth", "range.x")
	/**
	 * 
	 * Functions to handle shingles
	 *
	 */
	function "[.shingle"("x", "subset", "drop"="FALSE")
	/**
	 * 
	 * Update method for objects of class \code{"trellis"}, and a way to retrieve
	 * the last printed trellis object (that was saved).
	 *
	 */
	function "[.trellis"("x", "i", "j", "...", "drop"="FALSE")
	/**
	 * 
	 * Functions to handle shingles
	 *
	 */
	function "as.character.shingleLevel"("x", "...")
	/**
	 * 
	 * Functions to handle shingles
	 *
	 */
	function "as.data.frame.shingle"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * 
	 * Functions to handle shingles
	 *
	 */
	exported function "as.factorOrShingle"("x", "subset"="TRUE", "drop"="FALSE")
	/**
	 * 
	 * Functions to handle shingles
	 *
	 */
	exported function "as.shingle"("x")
	/**
	 * 
	 * Lattice funtions provide control over how the plot axes are annotated
	 * through a common interface.  There are two levels of control.  The
	 * \code{xscale.components} and \code{yscale.components} arguments can be
	 * functions that determine tick mark locations and labels given a
	 * packet.  For more direct control, the \code{axis} argument can be a
	 * function that actually draws the axes.  The functions documented here
	 * are the defaults for these arguments.  They can additonally be used as
	 * components of user written replacements.
	 *
	 */
	exported function "axis.default"("side"="c(\"top\", \"bottom\", \"left\", \"right\")", "scales", "components", "as.table", "labels"="c(\"default\", \"yes\", \"no\")", "ticks"="c(\"default\", \"yes\", \"no\")", "...", "prefix"="lattice.getStatus(\"current.prefix\")")
	/**
	 * 
	 * Calculates banking slope
	 *
	 */
	exported function "banking"("dx", "dy"="1")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	exported function "barchart"("x", "data", "...")
	/**
	 * 
	 *
	 * Contingency tables are often displayed using bar charts and dot plots.
	 * These methods operate directly on tables, bypassing the need to
	 * convert them to data frames for use with the formula interface.
	 * Matrices and arrays are also supported, by coercing them to tables.
	 *
	 *
	 */
	function "barchart.array"("x", "data"="", "...")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	function "barchart.default"("x", "data"="", "...")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	function "barchart.formula"("x", "data"="", "panel"="lattice.getOption(\"panel.barchart\")", "default.prepanel"="lattice.getOption(\"prepanel.default.barchart\")", "box.ratio"="2", "...")
	/**
	 * 
	 *
	 * Contingency tables are often displayed using bar charts and dot plots.
	 * These methods operate directly on tables, bypassing the need to
	 * convert them to data frames for use with the formula interface.
	 * Matrices and arrays are also supported, by coercing them to tables.
	 *
	 *
	 */
	function "barchart.matrix"("x", "data"="", "...")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	function "barchart.numeric"("x", "data"="", "xlab"="deparse(substitute(x))", "...")
	/**
	 * 
	 *
	 * Contingency tables are often displayed using bar charts and dot plots.
	 * These methods operate directly on tables, bypassing the need to
	 * convert them to data frames for use with the formula interface.
	 * Matrices and arrays are also supported, by coercing them to tables.
	 *
	 *
	 */
	function "barchart.table"("x", "data"="", "groups"="TRUE", "origin"="0", "stack"="TRUE", "...", "horizontal"="TRUE")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	exported function "bwplot"("x", "data", "...")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	function "bwplot.formula"("x", "data"="", "allow.multiple"="is.null(groups) || outer", "outer"="FALSE", "auto.key"="FALSE", "aspect"="fill", "panel"="lattice.getOption(\"panel.bwplot\")", "prepanel"="", "scales"="list()", "strip"="TRUE", "groups"="", "xlab", "xlim", "ylab", "ylim", "box.ratio"="1", "horizontal"="", "drop.unused.levels"="lattice.getOption(\"drop.unused.levels\")", "...", "lattice.options"="", "default.scales"="if (horizontal) list(y = list(tck = 0, alternating = FALSE, rot = 0)) else list(x = list(tck = 0,     alternating = FALSE))", "default.prepanel"="lattice.getOption(\"prepanel.default.bwplot\")", "subscripts"="!is.null(groups)", "subset"="TRUE")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	function "bwplot.numeric"("x", "data"="", "xlab"="deparse(substitute(x))", "...")
	function "calculateAxisComponents"("x", "...", "packet.number", "packet.list", "abbreviate"="", "minlength"="4")
	function "calculateGridLayout"("x", "rows.per.page", "cols.per.page", "number.of.cond", "panel.height"="", "panel.width"="", "main", "sub", "xlab", "ylab", "xlab.top", "ylab.right", "x.alternating", "y.alternating", "x.relation.same", "y.relation.same", "xaxis.rot", "yaxis.rot", "xaxis.cex", "yaxis.cex", "xaxis.lineheight", "yaxis.lineheight", "par.strip.text", "legend")
	/**
	 * 
	 * Initialization of a display device with appropriate graphical
	 * parameters.
	 *
	 */
	exported function "canonical.theme"("name", "color"="name != \"postscript\"")
	function "checkArgsAndCall"("FUN", "args")
	function "chooseFace"("fontface"="", "font"="1")
	/**
	 * 
	 * Generic functions to draw 3d scatter plots and surfaces.  The
	 * \code{"formula"} methods do most of the actual work.
	 *
	 */
	exported function "cloud"("x", "data", "...")
	/**
	 * 
	 * Generic functions to draw 3d scatter plots and surfaces.  The
	 * \code{"formula"} methods do most of the actual work.
	 *
	 */
	function "cloud.formula"("x", "data"="", "allow.multiple"="is.null(groups) || outer", "outer"="FALSE", "auto.key"="FALSE", "aspect"="c(1, 1)", "panel.aspect"="1", "panel"="lattice.getOption(\"panel.cloud\")", "prepanel"="", "scales"="list()", "strip"="TRUE", "groups"="", "xlab", "ylab", "zlab", "xlim"="if (is.factor(x)) levels(x) else range(x, finite = TRUE)", "ylim"="if (is.factor(y)) levels(y) else range(y, finite = TRUE)", "zlim"="if (is.factor(z)) levels(z) else range(z, finite = TRUE)", "at", "drape"="FALSE", "pretty"="FALSE", "drop.unused.levels"="lattice.getOption(\"drop.unused.levels\")", "...", "lattice.options"="", "default.scales"="list(distance = c(1, 1, 1), arrows = TRUE, axs = axs.default)", "default.prepanel"="lattice.getOption(\"prepanel.default.cloud\")", "colorkey"="any(drape)", "col.regions", "alpha.regions", "cuts"="70", "subset"="TRUE", "axs.default"="r")
	/**
	 * 
	 * Generic functions to draw 3d scatter plots and surfaces.  The
	 * \code{"formula"} methods do most of the actual work.
	 *
	 */
	function "cloud.matrix"("x", "data"="", "type"="h", "zlab"="deparse(substitute(x))", "aspect", "...", "xlim", "ylim", "row.values"="seq_len(nrow(x))", "column.values"="seq_len(ncol(x))")
	/**
	 * 
	 * Generic functions to draw 3d scatter plots and surfaces.  The
	 * \code{"formula"} methods do most of the actual work.
	 *
	 */
	function "cloud.table"("x", "data"="", "groups"="FALSE", "zlab"="deparse(substitute(x))", "type"="h", "...")
	/**
	 * 
	 * Initialization of a display device with appropriate graphical
	 * parameters.
	 *
	 */
	exported function "col.whitebg"()
	function "complete_names"("x", "template", "allow.invalid"="FALSE")
	function "componentName"("name", "x", "y")
	function "compute.layout"("layout", "cond.max.level", "skip"="FALSE")
	function "compute.packet"("cond", "levels")
	function "cond.orders"("foo", "...")
	function "construct.3d.scales"("draw"="TRUE", "axs"="r", "tck"="1", "lty"="FALSE", "lwd"="FALSE", "distance"="c(1, 1, 1)", "tick.number"="5", "cex"="FALSE", "rot"="FALSE", "at"="FALSE", "labels"="FALSE", "col"="FALSE", "col.line", "alpha"="FALSE", "alpha.line", "log"="FALSE", "font"="FALSE", "fontfamily"="FALSE", "fontface"="FALSE", "lineheight"="FALSE", "arrows"="TRUE", "relation"="same", "format"="", "abbreviate"="FALSE", "minlength"="4", "...", "x"="", "y"="", "z"="")
	function "construct.legend"("legend"="", "key"="", "fun"="draw.key")
	function "construct.scales"("draw"="TRUE", "axs"="r", "tck"="1", "tick.number"="5", "at"="FALSE", "labels"="FALSE", "log"="FALSE", "alternating"="TRUE", "relation"="same", "abbreviate"="FALSE", "minlength"="4", "limits"="", "format"="", "equispaced.log"="TRUE", "lty"="FALSE", "lwd"="FALSE", "cex"="FALSE", "rot"="FALSE", "col"="FALSE", "col.line", "alpha"="FALSE", "alpha.line", "font"="FALSE", "fontfamily"="FALSE", "fontface"="FALSE", "lineheight"="FALSE", "...", "x"="", "y"="")
	/**
	 * 
	 * Draws false color level plots and contour plots.
	 *
	 */
	exported function "contourplot"("x", "data", "...")
	/**
	 * 
	 * Draws false color level plots and contour plots.
	 *
	 */
	function "contourplot.array"("x", "data"="", "...")
	/**
	 * 
	 * Draws false color level plots and contour plots.
	 *
	 */
	function "contourplot.formula"("x", "data"="", "panel"="lattice.getOption(\"panel.contourplot\")", "default.prepanel"="lattice.getOption(\"prepanel.default.contourplot\")", "cuts"="7", "labels"="TRUE", "contour"="TRUE", "pretty"="TRUE", "region"="FALSE", "...")
	/**
	 * 
	 * Draws false color level plots and contour plots.
	 *
	 */
	function "contourplot.matrix"("x", "data"="", "aspect"="iso", "...", "xlim", "ylim", "row.values"="seq_len(nrow(x))", "column.values"="seq_len(ncol(x))")
	/**
	 * 
	 * Draws false color level plots and contour plots.
	 *
	 */
	function "contourplot.table"("x", "data"="", "aspect"="iso", "...", "xlim", "ylim")
	function "cupdate"("index", "maxim")
	/**
	 * 
	 *
	 * Control over lattice plots are provided through a collection of user
	 * specifiable functions that perform various tasks during the plotting.
	 * Not all information is available to all functions.  The functions
	 * documented here attempt to provide a consistent interface to access
	 * relevant information from within these user specified functions,
	 * namely those specified as the \code{panel}, \code{strip} and
	 * \code{axis} functions.  Note that this information is not available to
	 * the \code{prepanel} function, which is executed prior to the actual
	 * plotting.
	 *
	 *
	 */
	exported function "current.column"("prefix"="lattice.getStatus(\"current.prefix\")")
	/**
	 * 
	 * \code{panel.axis} is the function used by lattice to draw axes. It is
	 * typically not used by users, except those wishing to create advanced
	 * annotation. Keep in mind issues of clipping when trying to use it as
	 * part of the panel function. \code{current.panel.limits} can be used to
	 * retrieve a panel's x and y limits.
	 *
	 */
	exported function "current.panel.limits"("unit"="native")
	/**
	 * 
	 *
	 * Control over lattice plots are provided through a collection of user
	 * specifiable functions that perform various tasks during the plotting.
	 * Not all information is available to all functions.  The functions
	 * documented here attempt to provide a consistent interface to access
	 * relevant information from within these user specified functions,
	 * namely those specified as the \code{panel}, \code{strip} and
	 * \code{axis} functions.  Note that this information is not available to
	 * the \code{prepanel} function, which is executed prior to the actual
	 * plotting.
	 *
	 *
	 */
	exported function "current.row"("prefix"="lattice.getStatus(\"current.prefix\")")
	/**
	 * 
	 * Draw Histograms and Kernel Density Plots, possibly conditioned on
	 * other variables.
	 *
	 */
	exported function "densityplot"("x", "data", "...")
	/**
	 * 
	 * Draw Histograms and Kernel Density Plots, possibly conditioned on
	 * other variables.
	 *
	 */
	function "densityplot.formula"("x", "data"="", "allow.multiple"="is.null(groups) || outer", "outer"="!is.null(groups)", "auto.key"="FALSE", "aspect"="fill", "panel"="lattice.getOption(\"panel.densityplot\")", "prepanel"="", "scales"="list()", "strip"="TRUE", "groups"="", "weights"="", "xlab", "xlim", "ylab", "ylim", "bw"="", "adjust"="", "kernel"="", "window"="", "width"="", "give.Rkern"="FALSE", "n"="50", "from"="", "to"="", "cut"="", "na.rm"="TRUE", "drop.unused.levels"="lattice.getOption(\"drop.unused.levels\")", "...", "lattice.options"="", "default.scales"="list()", "default.prepanel"="lattice.getOption(\"prepanel.default.densityplot\")", "subscripts"="!is.null(groups) || !is.null(weights)", "subset"="TRUE")
	/**
	 * 
	 * Draw Histograms and Kernel Density Plots, possibly conditioned on
	 * other variables.
	 *
	 */
	function "densityplot.numeric"("x", "data"="", "xlab"="deparse(substitute(x))", "...")
	/**
	 * 
	 * This is the default superpanel function for \code{splom}.
	 *
	 */
	exported function "diag.panel.splom"("x"="", "varname"="", "limits", "at"="", "labels"="", "draw"="TRUE", "tick.number"="5", "varname.col"="add.text$col", "varname.cex"="add.text$cex", "varname.lineheight"="add.text$lineheight", "varname.font"="add.text$font", "varname.fontfamily"="add.text$fontfamily", "varname.fontface"="add.text$fontface", "axis.text.col"="axis.text$col", "axis.text.alpha"="axis.text$alpha", "axis.text.cex"="axis.text$cex", "axis.text.font"="axis.text$font", "axis.text.fontfamily"="axis.text$fontfamily", "axis.text.fontface"="axis.text$fontface", "axis.text.lineheight"="axis.text$lineheight", "axis.line.col"="axis.line$col", "axis.line.alpha"="axis.line$alpha", "axis.line.lty"="axis.line$lty", "axis.line.lwd"="axis.line$lwd", "axis.line.tck"="1", "...")
	/**
	 * 
	 * The \code{print} and \code{plot} methods produce a graph from a
	 * \code{"trellis"} object.  The \code{print} method is necessary for
	 * automatic plotting.  \code{plot} method is essentially
	 * an alias, provided for convenience.  The \code{summary} method
	 * gives a textual summary of the object.  \code{dim} and \code{dimnames}
	 * describe the cross-tabulation induced by conditioning.
	 * \code{panel.error} is the default handler used when an error occurs
	 * while executing the panel function.
	 *
	 */
	function "dim.trellis"("x")
	/**
	 * 
	 * The \code{print} and \code{plot} methods produce a graph from a
	 * \code{"trellis"} object.  The \code{print} method is necessary for
	 * automatic plotting.  \code{plot} method is essentially
	 * an alias, provided for convenience.  The \code{summary} method
	 * gives a textual summary of the object.  \code{dim} and \code{dimnames}
	 * describe the cross-tabulation induced by conditioning.
	 * \code{panel.error} is the default handler used when an error occurs
	 * while executing the panel function.
	 *
	 */
	function "dimnames.trellis"("x")
	function "dimnames<-.trellis"("x", "value")
	/**
	 * 
	 * Draw Histograms and Kernel Density Plots, possibly conditioned on
	 * other variables.
	 *
	 */
	exported function "do.breaks"("endpoints", "nint")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	exported function "dotplot"("x", "data", "...")
	/**
	 * 
	 *
	 * Contingency tables are often displayed using bar charts and dot plots.
	 * These methods operate directly on tables, bypassing the need to
	 * convert them to data frames for use with the formula interface.
	 * Matrices and arrays are also supported, by coercing them to tables.
	 *
	 *
	 */
	function "dotplot.array"("x", "data"="", "...")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	function "dotplot.default"("x", "data"="", "...")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	function "dotplot.formula"("x", "data"="", "panel"="lattice.getOption(\"panel.dotplot\")", "default.prepanel"="lattice.getOption(\"prepanel.default.dotplot\")", "...")
	/**
	 * 
	 *
	 * Contingency tables are often displayed using bar charts and dot plots.
	 * These methods operate directly on tables, bypassing the need to
	 * convert them to data frames for use with the formula interface.
	 * Matrices and arrays are also supported, by coercing them to tables.
	 *
	 *
	 */
	function "dotplot.matrix"("x", "data"="", "...")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	function "dotplot.numeric"("x", "data"="", "xlab"="deparse(substitute(x))", "...")
	/**
	 * 
	 *
	 * Contingency tables are often displayed using bar charts and dot plots.
	 * These methods operate directly on tables, bypassing the need to
	 * convert them to data frames for use with the formula interface.
	 * Matrices and arrays are also supported, by coercing them to tables.
	 *
	 *
	 */
	function "dotplot.table"("x", "data"="", "groups"="TRUE", "...", "horizontal"="TRUE")
	/**
	 * 
	 * Produces (and possibly draws) a Grid frame grob which is a colorkey
	 * that can be placed in other Grid plots. Used in levelplot
	 *
	 */
	exported function "draw.colorkey"("key", "draw"="FALSE", "vp"="")
	/**
	 * 
	 * Produces (and possibly draws) a Grid frame grob which is a legend (aka 
	 * key) that can be placed in other Grid plots.
	 *
	 */
	exported function "draw.key"("key", "draw"="FALSE", "vp"="", "...")
	function "drawInViewport"("obj", "vp")
	function "drawSimpleKey"("...")
	/**
	 * 
	 * Functions to handle shingles
	 *
	 */
	exported function "equal.count"("x", "...")
	function "evaluate.legend"("legend")
	function "experimentalOptions"()
	function "extend.limits"("lim", "length"="1", "axs"="r", "prop"="if (axs == \"i\") 0 else lattice.getOption(\"axis.padding\")$numeric")
	function "fast.quantile"("x", "probs"="seq(0, 1, 0.25)", "na.rm"="FALSE", "names"="FALSE", "type"="7", "...")
	function "formattedTicksAndLabels"("x", "...")
	function "formattedTicksAndLabels.character"("x", "at"="FALSE", "used.at"="", "labels"="FALSE", "logsc"="FALSE", "...", "num.limit"="", "abbreviate"="", "minlength"="4", "format.posixt"="")
	function "formattedTicksAndLabels.chron"("x", "at"="FALSE", "...")
	function "formattedTicksAndLabels.date"("x", "at"="FALSE", "used.at"="", "...", "num.limit"="", "labels"="FALSE", "logsc"="FALSE", "abbreviate"="", "minlength"="4", "format.posixt"="")
	function "formattedTicksAndLabels.Date"("x", "at"="FALSE", "used.at"="", "labels"="FALSE", "logsc"="FALSE", "...", "num.limit"="", "abbreviate"="", "minlength"="4", "format.posixt"="")
	function "formattedTicksAndLabels.dates"("x", "...")
	function "formattedTicksAndLabels.default"("x", "at"="FALSE", "used.at"="", "labels"="FALSE", "logsc"="FALSE", "...", "num.limit"="", "abbreviate"="", "minlength"="4", "format.posixt"="", "equispaced.log"="TRUE")
	function "formattedTicksAndLabels.expression"("x", "at"="FALSE", "used.at"="", "labels"="FALSE", "logsc"="FALSE", "...", "num.limit"="", "abbreviate"="", "minlength"="4", "format.posixt"="")
	function "formattedTicksAndLabels.POSIXct"("x", "at"="FALSE", "used.at"="", "labels"="FALSE", "logsc"="FALSE", "...", "num.limit"="", "abbreviate"="", "minlength"="4", "format.posixt"="")
	function "formattedTicksAndLabels.times"("x", "labels"="FALSE", "...", "format.posixt"="", "simplify"="TRUE")
	function "getFunctionOrName"("FUN")
	function "getLabelList"("label", "text.settings", "default.label"="")
	function "getTextPosition"("x", "y")
	function "grobFromLabelList"("lab", "name"="label", "orient"="0")
	function "hasGroupNumber"()
	function "hist.constructor"("x", "breaks", "include.lowest"="TRUE", "right"="TRUE", "...")
	/**
	 * 
	 * Draw Histograms and Kernel Density Plots, possibly conditioned on
	 * other variables.
	 *
	 */
	exported function "histogram"("x", "data", "...")
	/**
	 * 
	 * Draw Histograms and Kernel Density Plots, possibly conditioned on
	 * other variables.
	 *
	 */
	function "histogram.factor"("x", "data"="", "xlab"="deparse(substitute(x))", "...")
	/**
	 * 
	 * Draw Histograms and Kernel Density Plots, possibly conditioned on
	 * other variables.
	 *
	 */
	function "histogram.formula"("x", "data"="", "allow.multiple"="is.null(groups) || outer", "outer"="TRUE", "auto.key"="FALSE", "aspect"="fill", "panel"="lattice.getOption(\"panel.histogram\")", "prepanel"="", "scales"="list()", "strip"="TRUE", "groups"="", "xlab", "xlim", "ylab", "ylim", "type"="c(\"percent\", \"count\", \"density\")", "nint"="if (is.factor(x)) nlevels(x) else round(log2(length(x)) + 1)", "endpoints"="extend.limits(range(as.numeric(x), finite = TRUE), prop = 0.04)", "breaks", "equal.widths"="TRUE", "drop.unused.levels"="lattice.getOption(\"drop.unused.levels\")", "...", "lattice.options"="", "default.scales"="list()", "default.prepanel"="lattice.getOption(\"prepanel.default.histogram\")", "subscripts"="!is.null(groups)", "subset"="TRUE")
	/**
	 * 
	 * Draw Histograms and Kernel Density Plots, possibly conditioned on
	 * other variables.
	 *
	 */
	function "histogram.numeric"("x", "data"="", "xlab"="deparse(substitute(x))", "...")
	function "interaction2"("f", "g", "sep"=":")
	function "is.characterOrExpression"("x")
	/**
	 * 
	 * Functions to handle shingles
	 *
	 */
	exported function "is.shingle"("x")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "larrows"("x0"="", "y0"="", "x1", "y1", "x2"="", "y2"="", "angle"="30", "code"="2", "length"="0.25", "unit"="inches", "ends"="switch(code, \"first\", \"last\", \"both\")", "type"="open", "col"="add.line$col", "alpha"="add.line$alpha", "lty"="add.line$lty", "lwd"="add.line$lwd", "fill"="", "...", "identifier"="", "name.type"="panel")
	/**
	 * 
	 * Functions to handle settings used by lattice.  Their main purpose is
	 * to make code maintainance easier, and users normally should not need
	 * to use these functions.  However, fine control at this level maybe
	 * useful in certain cases.
	 *
	 */
	exported function "lattice.getOption"("name")
	function "lattice.getStatus"("name", "prefix"="")
	/**
	 * 
	 * Functions to handle settings used by lattice.  Their main purpose is
	 * to make code maintainance easier, and users normally should not need
	 * to use these functions.  However, fine control at this level maybe
	 * useful in certain cases.
	 *
	 */
	exported function "lattice.options"("...")
	function "lattice.setStatus"("...", "prefix"="", "clean.first"="FALSE")
	/**
	 * 
	 * this function is used by high level Lattice functions like
	 * \code{xyplot} to parse the formula argument and evaluate various
	 * components of the data.
	 *
	 */
	exported function "latticeParseFormula"("model", "data", "dimension"="2", "subset"="TRUE", "groups"="", "multiple"="FALSE", "outer"="FALSE", "subscripts"="FALSE", "drop"="")
	function "layoutNCol"("x")
	function "layoutNRow"("x")
	/**
	 * 
	 * Calculates false colors from a numeric variable (including factors,
	 * using their numeric codes) given a color scheme and breakpoints.
	 *
	 */
	exported function "level.colors"("x", "at", "col.regions", "colors"="TRUE", "...")
	/**
	 * 
	 * Draws false color level plots and contour plots.
	 *
	 */
	exported function "levelplot"("x", "data", "...")
	/**
	 * 
	 * Draws false color level plots and contour plots.
	 *
	 */
	function "levelplot.array"("x", "data"="", "...")
	/**
	 * 
	 * Draws false color level plots and contour plots.
	 *
	 */
	function "levelplot.formula"("x", "data"="", "allow.multiple"="is.null(groups) || outer", "outer"="TRUE", "aspect"="fill", "panel"="if (useRaster) lattice.getOption(\"panel.levelplot.raster\") else lattice.getOption(\"panel.levelplot\")", "prepanel"="", "scales"="list()", "strip"="TRUE", "groups"="", "xlab", "xlim", "ylab", "ylim", "at", "cuts"="15", "pretty"="FALSE", "region"="TRUE", "drop.unused.levels"="lattice.getOption(\"drop.unused.levels\")", "...", "useRaster"="FALSE", "lattice.options"="", "default.scales"="list()", "default.prepanel"="lattice.getOption(\"prepanel.default.levelplot\")", "colorkey", "col.regions", "alpha.regions", "subset"="TRUE")
	/**
	 * 
	 * Draws false color level plots and contour plots.
	 *
	 */
	function "levelplot.matrix"("x", "data"="", "aspect"="iso", "...", "xlim", "ylim", "row.values"="seq_len(nrow(x))", "column.values"="seq_len(ncol(x))")
	/**
	 * 
	 * Draws false color level plots and contour plots.
	 *
	 */
	function "levelplot.table"("x", "data"="", "aspect"="iso", "...", "xlim", "ylim")
	function "limits.and.aspect"("prepanel.default", "prepanel"="", "have.xlim"="FALSE", "xlim"="", "have.ylim"="FALSE", "ylim"="", "x.relation", "y.relation", "panel.args.common"="list()", "panel.args"="list()", "aspect", "banking"="lattice.getOption(\"banking\")", "npackets"="length(panel.args)", "x.axs"="r", "y.axs"="r", "...")
	function "limitsFromLimitlist"("have.lim", "lim", "relation", "limitlist", "used.at", "numlimitlist", "axs", "npackets")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "llines"("x", "...")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	function "llines.default"("x", "y"="", "type"="l", "col"="plot.line$col", "alpha"="plot.line$alpha", "lty"="plot.line$lty", "lwd"="plot.line$lwd", "...", "identifier"="", "name.type"="panel")
	function "logLimits"("lim", "base")
	function "lower.saturation"("x", "f"="0.2")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "lplot.xy"("xy", "type"="c(\"p\", \"l\", \"o\", \"b\", \"c\", \"s\", \"S\", \"h\", \"H\")", "pch"="1", "lty"="1", "col"="1", "cex"="1", "lwd"="1", "font"="1", "fontfamily"="", "fontface"="", "col.line", "col.symbol", "alpha"="1", "fill"="", "origin"="0", "...", "identifier"="", "name.type"="panel")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "lpoints"("x", "...")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	function "lpoints.default"("x", "y"="", "type"="p", "col"="plot.symbol$col", "pch"="plot.symbol$pch", "alpha"="plot.symbol$alpha", "fill"="plot.symbol$fill", "font"="plot.symbol$font", "fontfamily"="plot.symbol$fontfamily", "fontface"="plot.symbol$fontface", "cex"="plot.symbol$cex", "...", "identifier"="", "name.type"="panel")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "lpolygon"("x", "y"="", "border"="black", "col"="transparent", "fill"="", "font", "fontface", "...", "identifier"="", "name.type"="panel")
	function "lpretty"("x", "...")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "lrect"("xleft", "ybottom", "xright", "ytop", "x"="(xleft + xright)/2", "y"="(ybottom + ytop)/2", "width"="xright - xleft", "height"="ytop - ybottom", "col"="transparent", "border"="black", "lty"="1", "lwd"="1", "alpha"="1", "just"="center", "hjust"="", "vjust"="", "...", "identifier"="", "name.type"="panel")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "lsegments"("x0"="", "y0"="", "x1", "y1", "x2"="", "y2"="", "col"="add.line$col", "alpha"="add.line$alpha", "lty"="add.line$lty", "lwd"="add.line$lwd", "font", "fontface", "...", "identifier"="", "name.type"="panel")
	/**
	 * 
	 * A (hopefully) simpler alternative to \code{trellis.par.get/set}.  This
	 * is deprecated, and the same functionality is now available with
	 * \code{trellis.par.set}
	 *
	 */
	function "lset"("theme"="col.whitebg()")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "ltext"("x", "...")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	function "ltext.default"("x", "y"="", "labels"="seq_along(x)", "col"="add.text$col", "alpha"="add.text$alpha", "cex"="add.text$cex", "srt"="0", "lineheight"="add.text$lineheight", "font"="add.text$font", "fontfamily"="add.text$fontfamily", "fontface"="add.text$fontface", "adj"="c(0.5, 0.5)", "pos"="", "offset"="0.5", "...", "identifier"="", "name.type"="panel")
	/**
	 * 
	 * These are (related to) the default panel functions for \code{cloud}
	 * and \code{wireframe}.
	 *
	 */
	exported function "ltransform3dMatrix"("screen", "R.mat"="diag(4)")
	/**
	 * 
	 * These are (related to) the default panel functions for \code{cloud}
	 * and \code{wireframe}.
	 *
	 */
	exported function "ltransform3dto3d"("x", "R.mat", "dist"="0")
	/**
	 * 
	 * Combines two or more vectors, possibly of different lengths, producing
	 * a data frame with a second column indicating which of these vectors
	 * that row came from.  This is mostly useful for getting data into a
	 * form suitable for use in high level Lattice functions.
	 *
	 */
	exported function "make.groups"("...")
	function "make.list.from.intervals"("x")
	function "make.par.list"("nams", "x", "n", "m", "def", "recycle"="sum(unnamed) > 0")
	function "needAutoKey"("auto.key", "groups"="")
	function "OLD_formattedTicksAndLabels.times"("x", "at"="FALSE", "used.at"="", "num.limit"="", "labels"="FALSE", "logsc"="FALSE", "abbreviate"="", "minlength"="4", "simplify"="TRUE", "...", "format.posixt"="")
	/**
	 * 
	 * Fits a One-way model to univariate data grouped by a factor, the
	 * result often being displayed using \code{rfs} 
	 *
	 */
	exported function "oneway"("formula", "data", "location", "spread"="function(x) sqrt(var(x))")
	/**
	 * 
	 *
	 * Control over lattice plots are provided through a collection of user
	 * specifiable functions that perform various tasks during the plotting.
	 * Not all information is available to all functions.  The functions
	 * documented here attempt to provide a consistent interface to access
	 * relevant information from within these user specified functions,
	 * namely those specified as the \code{panel}, \code{strip} and
	 * \code{axis} functions.  Note that this information is not available to
	 * the \code{prepanel} function, which is executed prior to the actual
	 * plotting.
	 *
	 *
	 */
	exported function "packet.number"("prefix"="lattice.getStatus(\"current.prefix\")")
	/**
	 * 
	 *
	 * When a \code{"trellis"} object is plotted, panels are always drawn in
	 * an order such that columns vary the fastest, then rows and then pages.
	 * An optional function can be specified that determines, given the
	 * column, row and page and other relevant information, the packet (if
	 * any) which should be used in that panel.  The function documented here
	 * implements the default behaviour, which is to match panel order with
	 * packet order, determined by varying the first conditioning variable
	 * the fastest, then the second, and so on.  This matching is performed
	 * after any reordering and/or permutation of the conditioning variables.
	 *
	 *
	 */
	exported function "packet.panel.default"("layout", "condlevels", "page", "row", "column", "skip", "all.pages.skip"="TRUE")
	function "panel.3didentify"("x", "y", "z", "rot.mat"="diag(4)", "distance", "xlim.scaled", "ylim.scaled", "zlim.scaled", "subscripts"="seq_along(x)", "labels", "n"="length(x)", "offset"="0.5", "threshold"="18", "...")
	/**
	 * 
	 * These are default panel functions controlling \code{cloud} and
	 * \code{wireframe} displays.
	 *
	 */
	exported function "panel.3dscatter"("x", "y", "z", "rot.mat"="diag(4)", "distance", "groups"="", "type"="p", "xlim", "ylim", "zlim", "xlim.scaled", "ylim.scaled", "zlim.scaled", "zero.scaled", "col", "col.point"="if (is.null(groups)) plot.symbol$col else superpose.symbol$col", "col.line"="if (is.null(groups)) plot.line$col else superpose.line$col", "lty"="if (is.null(groups)) plot.line$lty else superpose.line$lty", "lwd"="if (is.null(groups)) plot.line$lwd else superpose.line$lwd", "cex"="if (is.null(groups)) plot.symbol$cex else superpose.symbol$cex", "pch"="if (is.null(groups)) \"+\" else superpose.symbol$pch", "cross", "...", ".scale"="FALSE", "subscripts"="TRUE", "identifier"="3dscatter")
	/**
	 * 
	 * These are default panel functions controlling \code{cloud} and
	 * \code{wireframe} displays.
	 *
	 */
	exported function "panel.3dwire"("x", "y", "z", "rot.mat"="diag(4)", "distance", "shade"="FALSE", "shade.colors.palette"="trellis.par.get(\"shade.colors\")$palette", "light.source"="c(0, 0, 1000)", "xlim", "ylim", "zlim", "xlim.scaled", "ylim.scaled", "zlim.scaled", "col"="if (shade) \"transparent\" else \"black\"", "lty"="1", "lwd"="1", "alpha", "col.groups"="superpose.polygon$col", "polynum"="100", "...", ".scale"="FALSE", "drape"="FALSE", "at", "col.regions"="regions$col", "alpha.regions"="regions$alpha", "identifier"="3dwire")
	/**
	 * 
	 * These are predefined panel functions available in lattice for use in
	 * constructing new panel functions (often on-the-fly).
	 *
	 */
	exported function "panel.abline"("a"="", "b"="0", "h"="", "v"="", "reg"="", "coef"="", "col", "col.line"="add.line$col", "lty"="add.line$lty", "lwd"="add.line$lwd", "alpha"="add.line$alpha", "type", "...", "reference"="FALSE", "identifier"="abline")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "panel.arrows"("...")
	/**
	 * 
	 * These are predefined panel functions available in lattice for use in
	 * constructing new panel functions (often on-the-fly).
	 *
	 */
	exported function "panel.average"("x", "y", "fun", "horizontal"="TRUE", "lwd"="reference.line$lwd", "lty"="reference.line$lty", "col", "col.line"="reference.line$col", "type"="l", "...", "identifier"="linejoin")
	/**
	 * 
	 * \code{panel.axis} is the function used by lattice to draw axes. It is
	 * typically not used by users, except those wishing to create advanced
	 * annotation. Keep in mind issues of clipping when trying to use it as
	 * part of the panel function. \code{current.panel.limits} can be used to
	 * retrieve a panel's x and y limits.
	 *
	 */
	exported function "panel.axis"("side"="c(\"bottom\", \"left\", \"top\", \"right\")", "at"="pretty(scale.range)", "labels"="TRUE", "draw.labels"="TRUE", "check.overlap"="FALSE", "outside"="FALSE", "ticks"="TRUE", "half"="!outside", "which.half"="switch(side, bottom = \"lower\", left = \"upper\", top = \"upper\",     right = \"lower\")", "tck"="as.numeric(ticks)", "rot"="if (is.logical(labels)) 0 else c(90, 0)", "text.col"="axis.text$col", "text.alpha"="axis.text$alpha", "text.cex"="axis.text$cex", "text.font"="axis.text$font", "text.fontfamily"="axis.text$fontfamily", "text.fontface"="axis.text$fontface", "text.lineheight"="axis.text$lineheight", "line.col"="axis.line$col", "line.lty"="axis.line$lty", "line.lwd"="axis.line$lwd", "line.alpha"="axis.line$alpha")
	/**
	 * 
	 * Default panel function for \code{barchart}.
	 *
	 */
	exported function "panel.barchart"("x", "y", "box.ratio"="1", "box.width"="box.ratio/(1 + box.ratio)", "horizontal"="TRUE", "origin"="", "reference"="TRUE", "stack"="FALSE", "groups"="", "col"="if (is.null(groups)) plot.polygon$col else superpose.polygon$col", "border"="if (is.null(groups)) plot.polygon$border else superpose.polygon$border", "lty"="if (is.null(groups)) plot.polygon$lty else superpose.polygon$lty", "lwd"="if (is.null(groups)) plot.polygon$lwd else superpose.polygon$lwd", "...", "identifier"="barchart")
	/**
	 * 
	 * The classic Trellis paradigm is to plot the whole object at once,
	 * without the possibility of interacting with it afterwards.  However,
	 * by keeping track of the grid viewports where the panels and strips are
	 * drawn, it is possible to go back to them afterwards and enhance them
	 * one panel at a time.  These functions provide convenient interfaces to
	 * help in this.  Note that these are still experimental and the exact
	 * details may change in future.
	 *
	 */
	exported function "panel.brush.splom"("threshold"="18", "verbose"="getOption(\"verbose\")", "...")
	/**
	 * 
	 * This is the default panel function for \code{bwplot}.
	 *
	 */
	exported function "panel.bwplot"("x", "y", "box.ratio"="1", "box.width"="box.ratio/(1 + box.ratio)", "horizontal"="TRUE", "pch"="box.dot$pch", "col"="box.dot$col", "alpha"="box.dot$alpha", "cex"="box.dot$cex", "font"="box.dot$font", "fontfamily"="box.dot$fontfamily", "fontface"="box.dot$fontface", "fill"="box.rectangle$fill", "varwidth"="FALSE", "notch"="FALSE", "notch.frac"="0.5", "...", "levels.fos"="if (horizontal) sort(unique(y)) else sort(unique(x))", "stats", "coef"="1.5", "do.out"="TRUE", "identifier"="bwplot")
	/**
	 * 
	 * These are default panel functions controlling \code{cloud} and
	 * \code{wireframe} displays.
	 *
	 */
	exported function "panel.cloud"("x", "y", "subscripts", "z", "groups"="", "perspective"="TRUE", "distance"="if (perspective) 0.2 else 0", "xlim", "ylim", "zlim", "panel.3d.cloud"="panel.3dscatter", "panel.3d.wireframe"="panel.3dwire", "screen"="list(z = 40, x = -60)", "R.mat"="diag(4)", "aspect"="c(1, 1)", "par.box"="", "xlab", "ylab", "zlab", "xlab.default", "ylab.default", "zlab.default", "scales.3d", "proportion"="0.6", "wireframe"="FALSE", "scpos", "...", "at", "identifier"="cloud")
	/**
	 * 
	 * These are the default panel functions for \code{\link{levelplot}} and
	 * \code{contourplot}.  Also documented is an alternative raster-based
	 * panel function for use with \code{levelplot}.
	 *
	 */
	exported function "panel.contourplot"("...")
	/**
	 * 
	 * These are predefined panel functions available in lattice for use in
	 * constructing new panel functions (often on-the-fly).
	 *
	 */
	exported function "panel.curve"("expr", "from", "to", "n"="101", "curve.type"="l", "col"="add.line$col", "lty"="add.line$lty", "lwd"="add.line$lwd", "type", "...", "identifier"="curve")
	/**
	 * 
	 * This is the default panel function for \code{densityplot}.
	 *
	 */
	exported function "panel.densityplot"("x", "darg"="list(n = 30)", "plot.points"="jitter", "ref"="FALSE", "groups"="", "weights"="", "jitter.amount"="0.01 * diff(current.panel.limits()$ylim)", "type"="p", "...", "identifier"="density")
	/**
	 * 
	 * Default panel function for \code{dotplot}.
	 *
	 */
	exported function "panel.dotplot"("x", "y", "horizontal"="TRUE", "pch"="if (is.null(groups)) dot.symbol$pch else sup.symbol$pch", "col"="if (is.null(groups)) dot.symbol$col else sup.symbol$col", "lty"="dot.line$lty", "lwd"="dot.line$lwd", "col.line"="dot.line$col", "levels.fos"="if (horizontal) unique(y) else unique(x)", "groups"="", "...", "identifier"="dotplot")
	/**
	 * 
	 * The \code{print} and \code{plot} methods produce a graph from a
	 * \code{"trellis"} object.  The \code{print} method is necessary for
	 * automatic plotting.  \code{plot} method is essentially
	 * an alias, provided for convenience.  The \code{summary} method
	 * gives a textual summary of the object.  \code{dim} and \code{dimnames}
	 * describe the cross-tabulation induced by conditioning.
	 * \code{panel.error} is the default handler used when an error occurs
	 * while executing the panel function.
	 *
	 */
	exported function "panel.error"("e")
	/**
	 * 
	 * These are predefined panel functions available in lattice for use in
	 * constructing new panel functions (often on-the-fly).
	 *
	 */
	exported function "panel.fill"("col"="trellis.par.get(\"background\")$col", "border"="transparent", "...", "identifier"="fill")
	/**
	 * 
	 * These are predefined panel functions available in lattice for use in
	 * constructing new panel functions (often on-the-fly).
	 *
	 */
	exported function "panel.grid"("h"="3", "v"="3", "col", "col.line"="reference.line$col", "lty"="reference.line$lty", "lwd"="reference.line$lwd", "x"="", "y"="", "...", "identifier"="grid")
	/**
	 * 
	 * This is the default panel function for \code{histogram}.
	 *
	 */
	exported function "panel.histogram"("x", "breaks", "equal.widths"="TRUE", "type"="density", "nint"="round(log2(length(x)) + 1)", "alpha"="plot.polygon$alpha", "col"="plot.polygon$col", "border"="plot.polygon$border", "lty"="plot.polygon$lty", "lwd"="plot.polygon$lwd", "...", "identifier"="histogram")
	/**
	 * 
	 * The classic Trellis paradigm is to plot the whole object at once,
	 * without the possibility of interacting with it afterwards.  However,
	 * by keeping track of the grid viewports where the panels and strips are
	 * drawn, it is possible to go back to them afterwards and enhance them
	 * one panel at a time.  These functions provide convenient interfaces to
	 * help in this.  Note that these are still experimental and the exact
	 * details may change in future.
	 *
	 */
	exported function "panel.identify"("x", "y"="", "subscripts"="seq_along(x)", "labels", "n"="length(x)", "offset"="0.5", "threshold"="18", "panel.args"="trellis.panelArgs()", "...")
	/**
	 * 
	 * The classic Trellis paradigm is to plot the whole object at once,
	 * without the possibility of interacting with it afterwards.  However,
	 * by keeping track of the grid viewports where the panels and strips are
	 * drawn, it is possible to go back to them afterwards and enhance them
	 * one panel at a time.  These functions provide convenient interfaces to
	 * help in this.  Note that these are still experimental and the exact
	 * details may change in future.
	 *
	 */
	exported function "panel.identify.cloud"("x"="panel.args$x", "y"="panel.args$y", "z"="panel.args$z", "subscripts"="panel.args$subscripts", "perspective"="TRUE", "distance"="if (perspective) 0.2 else 0", "xlim"="panel.args$xlim", "ylim"="panel.args$ylim", "zlim"="panel.args$zlim", "screen"="list(z = 40, x = -60)", "R.mat"="diag(4)", "aspect"="c(1, 1)", "scales.3d"="panel.args$scales.3d", "...", "panel.3d.identify", "n"="length(subscripts)", "offset"="0.5", "threshold"="18", "labels", "panel.args"="trellis.panelArgs()")
	/**
	 * 
	 * The classic Trellis paradigm is to plot the whole object at once,
	 * without the possibility of interacting with it afterwards.  However,
	 * by keeping track of the grid viewports where the panels and strips are
	 * drawn, it is possible to go back to them afterwards and enhance them
	 * one panel at a time.  These functions provide convenient interfaces to
	 * help in this.  Note that these are still experimental and the exact
	 * details may change in future.
	 *
	 */
	exported function "panel.identify.qqmath"("x"="panel.args$x", "distribution"="panel.args$distribution", "groups"="panel.args$groups", "subscripts"="panel.args$subscripts", "labels", "panel.args"="trellis.panelArgs()", "...")
	/**
	 * 
	 * These are the default panel functions for \code{\link{levelplot}} and
	 * \code{contourplot}.  Also documented is an alternative raster-based
	 * panel function for use with \code{levelplot}.
	 *
	 */
	exported function "panel.levelplot"("x", "y", "z", "subscripts", "at"="pretty(z)", "shrink", "labels"="FALSE", "label.style"="c(\"mixed\", \"flat\", \"align\")", "contour"="FALSE", "region"="TRUE", "col"="add.line$col", "lty"="add.line$lty", "lwd"="add.line$lwd", "border"="transparent", "border.lty"="1", "border.lwd"="0.1", "...", "col.regions"="regions$col", "alpha.regions"="regions$alpha", "identifier"="levelplot")
	/**
	 * 
	 * These are the default panel functions for \code{\link{levelplot}} and
	 * \code{contourplot}.  Also documented is an alternative raster-based
	 * panel function for use with \code{levelplot}.
	 *
	 */
	exported function "panel.levelplot.raster"("x", "y", "z", "subscripts", "at"="pretty(z)", "...", "col.regions"="regions$col", "alpha.regions"="regions$alpha", "interpolate"="FALSE", "identifier"="levelplot")
	/**
	 * 
	 * These are predefined panel functions available in lattice for use in
	 * constructing new panel functions (often on-the-fly).
	 *
	 */
	exported function "panel.linejoin"("x", "y", "fun", "horizontal"="TRUE", "lwd"="reference.line$lwd", "lty"="reference.line$lty", "col", "col.line"="reference.line$col", "type"="l", "...", "identifier"="linejoin")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "panel.lines"("...")
	/**
	 * 
	 * The classic Trellis paradigm is to plot the whole object at once,
	 * without the possibility of interacting with it afterwards.  However,
	 * by keeping track of the grid viewports where the panels and strips are
	 * drawn, it is possible to go back to them afterwards and enhance them
	 * one panel at a time.  These functions provide convenient interfaces to
	 * help in this.  Note that these are still experimental and the exact
	 * details may change in future.
	 *
	 */
	exported function "panel.link.splom"("threshold"="18", "verbose"="getOption(\"verbose\")", "...")
	/**
	 * 
	 * These are predefined panel functions available in lattice for use in
	 * constructing new panel functions (often on-the-fly).
	 *
	 */
	exported function "panel.lmline"("x", "y", "...", "identifier"="lmline")
	/**
	 * 
	 * A predefined panel function that can be used to add a LOESS smooth
	 * based on the provided data.
	 *
	 */
	exported function "panel.loess"("x", "y", "span"="2/3", "degree"="1", "family"="c(\"symmetric\", \"gaussian\")", "evaluation"="50", "lwd"="plot.line$lwd", "lty"="plot.line$lty", "col", "col.line"="plot.line$col", "type", "horizontal"="FALSE", "...", "identifier"="loess")
	/**
	 * 
	 * These are predefined panel functions available in lattice for use in
	 * constructing new panel functions (often on-the-fly).
	 *
	 */
	exported function "panel.mathdensity"("dmath", "args"="list(mean = 0, sd = 1)", "n"="50", "col", "col.line"="reference.line$col", "lwd"="reference.line$lwd", "lty"="reference.line$lty", "type", "...", "identifier"="mathdensity")
	/**
	 * 
	 *
	 * Control over lattice plots are provided through a collection of user
	 * specifiable functions that perform various tasks during the plotting.
	 * Not all information is available to all functions.  The functions
	 * documented here attempt to provide a consistent interface to access
	 * relevant information from within these user specified functions,
	 * namely those specified as the \code{panel}, \code{strip} and
	 * \code{axis} functions.  Note that this information is not available to
	 * the \code{prepanel} function, which is executed prior to the actual
	 * plotting.
	 *
	 *
	 */
	exported function "panel.number"("prefix"="lattice.getStatus(\"current.prefix\")")
	/**
	 * 
	 * This is the default superpanel function for \code{splom}.
	 *
	 */
	exported function "panel.pairs"("z", "panel"="lattice.getOption(\"panel.splom\")", "lower.panel", "upper.panel", "diag.panel"="diag.panel.splom", "as.matrix"="FALSE", "groups"="", "panel.subscripts", "subscripts", "pscales"="5", "prepanel.limits", "varnames"="colnames(z)", "varname.col"="add.text$col", "varname.cex"="add.text$cex", "varname.font"="add.text$font", "varname.fontfamily"="add.text$fontfamily", "varname.fontface"="add.text$fontface", "axis.text.col"="axis.text$col", "axis.text.cex"="axis.text$cex", "axis.text.font"="axis.text$font", "axis.text.fontfamily"="axis.text$fontfamily", "axis.text.fontface"="axis.text$fontface", "axis.text.lineheight"="axis.text$lineheight", "axis.line.col"="axis.line$col", "axis.line.lty"="axis.line$lty", "axis.line.lwd"="axis.line$lwd", "axis.line.alpha"="axis.line$alpha", "axis.line.tck"="1", "...")
	/**
	 * 
	 * This is the default panel function for \code{parallel}.
	 *
	 */
	exported function "panel.parallel"("x", "y", "z", "subscripts", "groups"="", "col"="superpose.line$col", "lwd"="superpose.line$lwd", "lty"="superpose.line$lty", "alpha"="superpose.line$alpha", "common.scale"="FALSE", "lower"="sapply(z, function(x) min(as.numeric(x), na.rm = TRUE))", "upper"="sapply(z, function(x) max(as.numeric(x), na.rm = TRUE))", "...", "horizontal.axis"="TRUE", "identifier"="parallel")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "panel.points"("...")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "panel.polygon"("...")
	/**
	 * 
	 * This is the default panel function for \code{xyplot}. Also see
	 * \code{panel.superpose}.  The default panel functions for
	 * \code{splom} and \code{qq} are essentially the same function.
	 *
	 */
	exported function "panel.qq"("...", "identifier"="qq")
	/**
	 * 
	 * This is the default panel function for \code{qqmath}.
	 *
	 */
	exported function "panel.qqmath"("x", "f.value"="", "distribution", "qtype"="7", "groups"="", "...", "tails.n"="0", "identifier"="qqmath")
	/**
	 * 
	 * Useful panel function with qqmath. Draws a line passing through the
	 * points (usually) determined by the .25 and .75 quantiles of the sample
	 * and the theoretical distribution.
	 *
	 */
	exported function "panel.qqmathline"("x", "y", "distribution", "probs"="c(0.25, 0.75)", "qtype"="7", "groups"="", "...", "identifier"="qqmathline")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "panel.rect"("...")
	/**
	 * 
	 * These are predefined panel functions available in lattice for use in
	 * constructing new panel functions (often on-the-fly).
	 *
	 */
	exported function "panel.refline"("...")
	/**
	 * 
	 * These are predefined panel functions available in lattice for use in
	 * constructing new panel functions (often on-the-fly).
	 *
	 */
	exported function "panel.rug"("x"="", "y"="", "regular"="TRUE", "start"="if (regular) 0 else 0.97", "end"="if (regular) 0.03 else 1", "x.units"="rep(\"npc\", 2)", "y.units"="rep(\"npc\", 2)", "col"="plot.line$col", "col.line", "lty"="plot.line$lty", "lwd"="plot.line$lwd", "alpha"="plot.line$alpha", "...", "identifier"="rug")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "panel.segments"("...")
	/**
	 * 
	 * This function allows the user to place \code{smoothScatter} plots in
	 * lattice graphics.
	 *
	 */
	exported function "panel.smoothScatter"("x", "y"="", "nbin"="64", "cuts"="255", "bandwidth", "colramp", "nrpoints"="100", "transformation"="function(x) x^0.25", "pch"=".", "cex"="1", "col"="black", "range.x", "...", "raster"="FALSE", "subscripts", "identifier"="smoothScatter")
	/**
	 * 
	 * A predefined panel function that can be used to add a spline smooth
	 * based on the provided data.
	 *
	 */
	exported function "panel.spline"("x", "y", "npoints"="101", "lwd"="plot.line$lwd", "lty"="plot.line$lty", "col", "col.line"="plot.line$col", "type", "horizontal"="FALSE", "...", "keep.data"="FALSE", "identifier"="spline")
	/**
	 * 
	 * This is the default panel function for \code{xyplot}. Also see
	 * \code{panel.superpose}.  The default panel functions for
	 * \code{splom} and \code{qq} are essentially the same function.
	 *
	 */
	exported function "panel.splom"("...", "identifier"="splom")
	/**
	 * 
	 * This is the default panel function for \code{stripplot}. Also see
	 * \code{panel.superpose}
	 *
	 */
	exported function "panel.stripplot"("x", "y", "jitter.data"="FALSE", "factor"="0.5", "amount"="", "horizontal"="TRUE", "groups"="", "...", "identifier"="stripplot")
	/**
	 * 
	 * These are panel functions for Trellis displays useful when a grouping
	 * variable is specified for use within panels. The \code{x} (and
	 * \code{y} where appropriate) variables are plotted with different
	 * graphical parameters for each distinct value of the grouping variable.
	 *
	 */
	exported function "panel.superpose"("x", "y"="", "subscripts", "groups", "panel.groups"="panel.xyplot", "...", "col"="black", "col.line"="superpose.line$col", "col.symbol"="superpose.symbol$col", "pch"="superpose.symbol$pch", "cex"="superpose.symbol$cex", "fill"="superpose.symbol$fill", "font"="superpose.symbol$font", "fontface"="superpose.symbol$fontface", "fontfamily"="superpose.symbol$fontfamily", "lty"="superpose.line$lty", "lwd"="superpose.line$lwd", "alpha"="superpose.symbol$alpha", "type"="p", "grid"="FALSE", "distribute.type"="FALSE")
	/**
	 * 
	 * These are panel functions for Trellis displays useful when a grouping
	 * variable is specified for use within panels. The \code{x} (and
	 * \code{y} where appropriate) variables are plotted with different
	 * graphical parameters for each distinct value of the grouping variable.
	 *
	 */
	exported function "panel.superpose.2"("...", "distribute.type"="TRUE")
	/**
	 * 
	 * These are panel functions for Trellis displays useful when a grouping
	 * variable is specified for use within panels. The \code{x} (and
	 * \code{y} where appropriate) variables are plotted with different
	 * graphical parameters for each distinct value of the grouping variable.
	 *
	 */
	exported function "panel.superpose.plain"("...", "col"="NA", "col.line"="plot.line$col", "col.symbol"="plot.symbol$col", "pch"="plot.symbol$pch", "cex"="plot.symbol$cex", "fill"="plot.symbol$fill", "font"="plot.symbol$font", "fontface"="plot.symbol$fontface", "fontfamily"="plot.symbol$fontfamily", "lty"="plot.line$lty", "lwd"="plot.line$lwd", "alpha"="plot.symbol$alpha")
	/**
	 * 
	 *
	 * These functions are intended to replace common low level traditional
	 * graphics functions, primarily for use in panel functions.  The
	 * originals can not be used (at least not easily) because lattice panel
	 * functions need to use grid graphics.  Low level drawing functions in
	 * grid can be used directly as well, and is often more flexible.  These
	 * functions are provided for convenience and portability.
	 *
	 *
	 */
	exported function "panel.text"("...")
	/**
	 * 
	 * \code{tmd} Creates Tukey Mean-Difference Plots from a trellis object
	 * returned by \code{xyplot}, \code{qq} or \code{qqmath}.  The prepanel
	 * and panel functions are used as appropriate.  The \code{formula}
	 * method for \code{tmd} is provided for convenience, and simply calls
	 * \code{tmd} on the object created by calling \code{xyplot} on that
	 * formula.
	 *
	 */
	exported function "panel.tmd.default"("x", "y", "groups"="", "...", "identifier"="tmd")
	/**
	 * 
	 * \code{tmd} Creates Tukey Mean-Difference Plots from a trellis object
	 * returned by \code{xyplot}, \code{qq} or \code{qqmath}.  The prepanel
	 * and panel functions are used as appropriate.  The \code{formula}
	 * method for \code{tmd} is provided for convenience, and simply calls
	 * \code{tmd} on the object created by calling \code{xyplot} on that
	 * formula.
	 *
	 */
	exported function "panel.tmd.qqmath"("x", "f.value"="", "distribution", "qtype"="7", "groups"="", "subscripts", "...", "identifier"="tmd")
	/**
	 * 
	 * This is a panel function that can create a violin plot.  It is
	 * typically used in a high-level call to \code{bwplot}.
	 *
	 */
	exported function "panel.violin"("x", "y", "box.ratio"="1", "box.width"="box.ratio/(1 + box.ratio)", "horizontal"="TRUE", "alpha"="plot.polygon$alpha", "border"="plot.polygon$border", "lty"="plot.polygon$lty", "lwd"="plot.polygon$lwd", "col"="plot.polygon$col", "varwidth"="FALSE", "bw"="", "adjust"="", "kernel"="", "window"="", "width"="", "n"="50", "from"="", "to"="", "cut"="", "na.rm"="TRUE", "...", "identifier"="violin")
	/**
	 * 
	 * These are default panel functions controlling \code{cloud} and
	 * \code{wireframe} displays.
	 *
	 */
	exported function "panel.wireframe"("...")
	/**
	 * 
	 * This is the default panel function for \code{xyplot}. Also see
	 * \code{panel.superpose}.  The default panel functions for
	 * \code{splom} and \code{qq} are essentially the same function.
	 *
	 */
	exported function "panel.xyplot"("x", "y", "type"="p", "groups"="", "pch"="if (is.null(groups)) plot.symbol$pch else superpose.symbol$pch", "col", "col.line"="if (is.null(groups)) plot.line$col else superpose.line$col", "col.symbol"="if (is.null(groups)) plot.symbol$col else superpose.symbol$col", "font"="if (is.null(groups)) plot.symbol$font else superpose.symbol$font", "fontfamily"="if (is.null(groups)) plot.symbol$fontfamily else superpose.symbol$fontfamily", "fontface"="if (is.null(groups)) plot.symbol$fontface else superpose.symbol$fontface", "lty"="if (is.null(groups)) plot.line$lty else superpose.line$lty", "cex"="if (is.null(groups)) plot.symbol$cex else superpose.symbol$cex", "fill"="if (is.null(groups)) plot.symbol$fill else superpose.symbol$fill", "lwd"="if (is.null(groups)) plot.line$lwd else superpose.line$lwd", "horizontal"="FALSE", "...", "grid"="FALSE", "abline"="", "jitter.x"="FALSE", "jitter.y"="FALSE", "factor"="0.5", "amount"="", "identifier"="xyplot")
	/**
	 * 
	 * Draw Conditional Scatter Plot Matrices and Parallel Coordinate Plots
	 *
	 */
	exported function "parallel"("x", "data", "...")
	function "parallel.data.frame"("x", "data"="", "...", "groups"="", "subset"="TRUE")
	function "parallel.formula"("x", "data"="", "auto.key"="FALSE", "aspect"="fill", "between"="list(x = 0.5, y = 0.5)", "panel"="lattice.getOption(\"panel.parallel\")", "prepanel"="", "scales"="list()", "strip"="TRUE", "groups"="", "xlab"="", "xlim", "ylab"="", "ylim", "varnames"="", "horizontal.axis"="TRUE", "drop.unused.levels"="lattice.getOption(\"drop.unused.levels\")", "...", "lattice.options"="", "default.scales"="list()", "default.prepanel"="lattice.getOption(\"prepanel.default.parallel\")", "subset"="TRUE")
	function "parallel.matrix"("x", "data"="", "...", "groups"="", "subset"="TRUE")
	/**
	 * 
	 * Draw Conditional Scatter Plot Matrices and Parallel Coordinate Plots
	 *
	 */
	exported function "parallelplot"("x", "data", "...")
	/**
	 * 
	 * Draw Conditional Scatter Plot Matrices and Parallel Coordinate Plots
	 *
	 */
	function "parallelplot.data.frame"("x", "data"="", "...", "groups"="", "subset"="TRUE")
	/**
	 * 
	 * Draw Conditional Scatter Plot Matrices and Parallel Coordinate Plots
	 *
	 */
	function "parallelplot.formula"("x", "data"="", "auto.key"="FALSE", "aspect"="fill", "between"="list(x = 0.5, y = 0.5)", "panel"="lattice.getOption(\"panel.parallel\")", "prepanel"="", "scales"="list()", "strip"="TRUE", "groups"="", "xlab"="", "xlim", "ylab"="", "ylim", "varnames"="", "horizontal.axis"="TRUE", "drop.unused.levels"="lattice.getOption(\"drop.unused.levels\")", "...", "lattice.options"="", "default.scales"="list()", "default.prepanel"="lattice.getOption(\"prepanel.default.parallel\")", "subset"="TRUE")
	/**
	 * 
	 * Draw Conditional Scatter Plot Matrices and Parallel Coordinate Plots
	 *
	 */
	function "parallelplot.matrix"("x", "data"="", "...", "groups"="", "subset"="TRUE")
	function "paste.and.draw"("left", "right", "sep"=" : ", "horizontal"="TRUE", "center"="TRUE", "showl"="TRUE", "showr"="TRUE", "gp"="gpar()")
	/**
	 * 
	 * Functions to handle shingles
	 *
	 */
	function "plot.shingle"("x", "panel", "xlab"="gettext(\"Range\")", "ylab"="gettext(\"Panel\")", "...")
	/**
	 * 
	 * The \code{print} and \code{plot} methods produce a graph from a
	 * \code{"trellis"} object.  The \code{print} method is necessary for
	 * automatic plotting.  \code{plot} method is essentially
	 * an alias, provided for convenience.  The \code{summary} method
	 * gives a textual summary of the object.  \code{dim} and \code{dimnames}
	 * describe the cross-tabulation induced by conditioning.
	 * \code{panel.error} is the default handler used when an error occurs
	 * while executing the panel function.
	 *
	 */
	function "plot.trellis"("x", "position"="", "split"="", "more"="FALSE", "newpage"="TRUE", "packet.panel", "draw.in"="", "panel.height"="lattice.getOption(\"layout.heights\")$panel", "panel.width"="lattice.getOption(\"layout.widths\")$panel", "save.object"="lattice.getOption(\"save.object\")", "panel.error"="lattice.getOption(\"panel.error\")", "prefix"="", "...")
	/**
	 * 
	 * These prepanel functions are used as fallback defaults in various
	 * high level plot functions in Lattice.  These are rarely useful to
	 * normal users but may be helpful in developing new displays.
	 *
	 */
	exported function "prepanel.default.bwplot"("x", "y", "horizontal"="TRUE", "nlevels", "origin"="", "stack"="FALSE", "...")
	/**
	 * 
	 * These prepanel functions are used as fallback defaults in various
	 * high level plot functions in Lattice.  These are rarely useful to
	 * normal users but may be helpful in developing new displays.
	 *
	 */
	exported function "prepanel.default.cloud"("perspective"="TRUE", "distance"="if (perspective) 0.2 else 0", "xlim", "ylim", "zlim", "screen"="list(z = 40, x = -60)", "R.mat"="diag(4)", "aspect"="c(1, 1)", "panel.aspect"="1", "...", "zoom"="0.8")
	/**
	 * 
	 * These prepanel functions are used as fallback defaults in various
	 * high level plot functions in Lattice.  These are rarely useful to
	 * normal users but may be helpful in developing new displays.
	 *
	 */
	exported function "prepanel.default.densityplot"("x", "darg", "groups"="", "weights"="", "subscripts"="TRUE", "...")
	/**
	 * 
	 * These prepanel functions are used as fallback defaults in various
	 * high level plot functions in Lattice.  These are rarely useful to
	 * normal users but may be helpful in developing new displays.
	 *
	 */
	exported function "prepanel.default.histogram"("x", "breaks", "equal.widths"="TRUE", "type"="density", "nint"="round(log2(length(x)) + 1)", "...")
	/**
	 * 
	 * These prepanel functions are used as fallback defaults in various
	 * high level plot functions in Lattice.  These are rarely useful to
	 * normal users but may be helpful in developing new displays.
	 *
	 */
	exported function "prepanel.default.levelplot"("x", "y", "subscripts", "...")
	/**
	 * 
	 * These prepanel functions are used as fallback defaults in various
	 * high level plot functions in Lattice.  These are rarely useful to
	 * normal users but may be helpful in developing new displays.
	 *
	 */
	exported function "prepanel.default.parallel"("x", "y", "z", "...", "horizontal.axis"="TRUE")
	/**
	 * 
	 * These prepanel functions are used as fallback defaults in various
	 * high level plot functions in Lattice.  These are rarely useful to
	 * normal users but may be helpful in developing new displays.
	 *
	 */
	exported function "prepanel.default.qq"("x", "y", "...")
	/**
	 * 
	 * These prepanel functions are used as fallback defaults in various
	 * high level plot functions in Lattice.  These are rarely useful to
	 * normal users but may be helpful in developing new displays.
	 *
	 */
	exported function "prepanel.default.qqmath"("x", "f.value"="", "distribution", "qtype"="7", "groups"="", "subscripts", "...", "tails.n"="0")
	/**
	 * 
	 * These prepanel functions are used as fallback defaults in various
	 * high level plot functions in Lattice.  These are rarely useful to
	 * normal users but may be helpful in developing new displays.
	 *
	 */
	exported function "prepanel.default.splom"("z", "...")
	/**
	 * 
	 * These prepanel functions are used as fallback defaults in various
	 * high level plot functions in Lattice.  These are rarely useful to
	 * normal users but may be helpful in developing new displays.
	 *
	 */
	exported function "prepanel.default.xyplot"("x", "y", "type", "subscripts", "groups"="", "...")
	/**
	 * 
	 * These are predefined prepanel functions available in Lattice.
	 *
	 */
	exported function "prepanel.lmline"("x", "y", "...")
	/**
	 * 
	 * These are predefined prepanel functions available in Lattice.
	 *
	 */
	exported function "prepanel.loess"("x", "y", "span"="2/3", "degree"="1", "family"="c(\"symmetric\", \"gaussian\")", "evaluation"="50", "horizontal"="FALSE", "...")
	function "prepanel.null"()
	/**
	 * 
	 * These are predefined prepanel functions available in Lattice.
	 *
	 */
	exported function "prepanel.qqmathline"("x", "y", "distribution", "probs"="c(0.25, 0.75)", "qtype"="7", "groups"="", "subscripts"="TRUE", "...")
	/**
	 * 
	 * These are predefined prepanel functions available in Lattice.
	 *
	 */
	exported function "prepanel.spline"("x", "y", "npoints"="101", "horizontal"="FALSE", "...", "keep.data"="FALSE")
	/**
	 * 
	 * \code{tmd} Creates Tukey Mean-Difference Plots from a trellis object
	 * returned by \code{xyplot}, \code{qq} or \code{qqmath}.  The prepanel
	 * and panel functions are used as appropriate.  The \code{formula}
	 * method for \code{tmd} is provided for convenience, and simply calls
	 * \code{tmd} on the object created by calling \code{xyplot} on that
	 * formula.
	 *
	 */
	exported function "prepanel.tmd.default"("x", "y", "...")
	/**
	 * 
	 * \code{tmd} Creates Tukey Mean-Difference Plots from a trellis object
	 * returned by \code{xyplot}, \code{qq} or \code{qqmath}.  The prepanel
	 * and panel functions are used as appropriate.  The \code{formula}
	 * method for \code{tmd} is provided for convenience, and simply calls
	 * \code{tmd} on the object created by calling \code{xyplot} on that
	 * formula.
	 *
	 */
	exported function "prepanel.tmd.qqmath"("x", "f.value"="", "distribution", "qtype"="7", "groups"="", "subscripts", "...")
	function "prettyDate_TMP"("x", "n"="5", "min.n"="n%/%2", "...")
	function "primName"("name", "identifier"="", "name.type"="panel", "group"="0")
	/**
	 * 
	 * Functions to handle shingles
	 *
	 */
	function "print.shingle"("x", "showValues"="TRUE", "...")
	/**
	 * 
	 * Functions to handle shingles
	 *
	 */
	function "print.shingleLevel"("x", "...")
	function "print.summary.trellis"("x", "...")
	/**
	 * 
	 * The \code{print} and \code{plot} methods produce a graph from a
	 * \code{"trellis"} object.  The \code{print} method is necessary for
	 * automatic plotting.  \code{plot} method is essentially
	 * an alias, provided for convenience.  The \code{summary} method
	 * gives a textual summary of the object.  \code{dim} and \code{dimnames}
	 * describe the cross-tabulation induced by conditioning.
	 * \code{panel.error} is the default handler used when an error occurs
	 * while executing the panel function.
	 *
	 */
	function "print.trellis"("x", "...")
	/**
	 * 
	 * Quantile-Quantile plots for comparing two Distributions
	 *
	 */
	exported function "qq"("x", "data", "...")
	/**
	 * 
	 * Quantile-Quantile plots for comparing two Distributions
	 *
	 */
	function "qq.formula"("x", "data"="", "aspect"="fill", "panel"="lattice.getOption(\"panel.qq\")", "prepanel"="", "scales"="list()", "strip"="TRUE", "groups"="", "xlab", "xlim", "ylab", "ylim", "f.value"="", "drop.unused.levels"="lattice.getOption(\"drop.unused.levels\")", "...", "lattice.options"="", "qtype"="7", "default.scales"="list()", "default.prepanel"="lattice.getOption(\"prepanel.default.qq\")", "subscripts"="!is.null(groups)", "subset"="TRUE")
	/**
	 * 
	 * Draw quantile-Quantile plots of a sample against a theoretical
	 * distribution, possibly conditioned on other variables.
	 *
	 */
	exported function "qqmath"("x", "data", "...")
	/**
	 * 
	 * Draw quantile-Quantile plots of a sample against a theoretical
	 * distribution, possibly conditioned on other variables.
	 *
	 */
	function "qqmath.formula"("x", "data"="", "allow.multiple"="is.null(groups) || outer", "outer"="!is.null(groups)", "distribution", "f.value"="", "auto.key"="FALSE", "aspect"="fill", "panel"="lattice.getOption(\"panel.qqmath\")", "prepanel"="", "scales"="list()", "strip"="TRUE", "groups"="", "xlab", "xlim", "ylab", "ylim", "drop.unused.levels"="lattice.getOption(\"drop.unused.levels\")", "...", "lattice.options"="", "default.scales"="list()", "default.prepanel"="lattice.getOption(\"prepanel.default.qqmath\")", "subscripts"="!is.null(groups)", "subset"="TRUE")
	/**
	 * 
	 * Draw quantile-Quantile plots of a sample against a theoretical
	 * distribution, possibly conditioned on other variables.
	 *
	 */
	function "qqmath.numeric"("x", "data"="", "ylab"="deparse(substitute(x))", "...")
	function "rearrangeUnit"("x", "pos", "u")
	/**
	 * 
	 * Plots fitted values and residuals (via qqmath) on a common scale for
	 * any object that has methods for fitted values and residuals. 
	 *
	 */
	exported function "rfs"("model", "layout"="c(2, 1)", "xlab"="f-value", "ylab"="", "distribution", "panel"="function(...) {    panel.grid(h = -1, v = -1)    panel.qqmath(...)}", "prepanel"="", "strip"="TRUE", "...")
	/**
	 * 
	 * Convenience function to extract subset of a list. Usually used in
	 * creating keys.
	 *
	 */
	exported function "Rows"("x", "which")
	function "scale.limits"("x")
	/**
	 * 
	 * Functions to handle shingles
	 *
	 */
	exported function "shingle"("x", "intervals"="sort(unique(x))")
	/**
	 * 
	 * Functions used to query, display and modify graphical parameters for
	 * fine control of Trellis displays.  Modifications are made to the
	 * settings for the currently active device only.
	 *
	 */
	exported function "show.settings"("x"="")
	/**
	 * 
	 * Simple interface to generate a list appropriate for \code{draw.key}
	 *
	 */
	exported function "simpleKey"("text", "points"="TRUE", "rectangles"="FALSE", "lines"="FALSE", "col"="add.text$col", "cex"="add.text$cex", "alpha"="add.text$alpha", "font"="add.text$font", "fontface"="add.text$fontface", "fontfamily"="add.text$fontfamily", "lineheight"="add.text$lineheight", "...")
	/**
	 * 
	 * Simple interface to generate a list appropriate as a theme, typically
	 * used as the \code{par.settings} argument in a high level call
	 *
	 */
	exported function "simpleTheme"("col", "alpha", "cex", "pch", "lty", "lwd", "font", "fill", "border", "col.points", "col.line", "alpha.points", "alpha.line")
	/**
	 * 
	 * Draw Conditional Scatter Plot Matrices and Parallel Coordinate Plots
	 *
	 */
	exported function "splom"("x", "data", "...")
	/**
	 * 
	 * Draw Conditional Scatter Plot Matrices and Parallel Coordinate Plots
	 *
	 */
	function "splom.data.frame"("x", "data"="", "...", "groups"="", "subset"="TRUE")
	/**
	 * 
	 * Draw Conditional Scatter Plot Matrices and Parallel Coordinate Plots
	 *
	 */
	function "splom.formula"("x", "data"="", "auto.key"="FALSE", "aspect"="1", "between"="list(x = 0.5, y = 0.5)", "panel"="lattice.getOption(\"panel.splom\")", "prepanel"="", "scales"="list()", "strip"="TRUE", "groups"="", "xlab"="gettext(\"Scatter Plot Matrix\")", "xlim", "ylab"="", "ylim", "superpanel"="lattice.getOption(\"panel.pairs\")", "pscales"="5", "varnames"="", "drop.unused.levels"="lattice.getOption(\"drop.unused.levels\")", "...", "lattice.options"="", "default.scales"="list(draw = FALSE, relation = \"same\", axs = \"i\")", "default.prepanel"="lattice.getOption(\"prepanel.default.splom\")", "subset"="TRUE")
	function "splom.linkPoint"("pargs"="trellis.panelArgs()", "threshold"="18", "col"="black", "pch"="16", "cex"="0.8", "...", "verbose"="getOption(\"verbose\")")
	/**
	 * 
	 * Draw Conditional Scatter Plot Matrices and Parallel Coordinate Plots
	 *
	 */
	function "splom.matrix"("x", "data"="", "...", "groups"="", "subset"="TRUE")
	/**
	 * 
	 * Initialization of a display device with appropriate graphical
	 * parameters.
	 *
	 */
	exported function "standard.theme"("name", "color"="name != \"postscript\"")
	/**
	 * 
	 * \code{strip.default} is the function that draws the strips by default
	 * in Trellis plots.  Users can write their own strip functions, but most
	 * commonly this involves calling \code{strip.default} with a slightly
	 * different arguments.  \code{strip.custom} provides a convenient way to
	 * obtain new strip functions that differ from \code{strip.default} only
	 * in the default values of certain arguments.
	 *
	 */
	exported function "strip.custom"("...")
	/**
	 * 
	 * \code{strip.default} is the function that draws the strips by default
	 * in Trellis plots.  Users can write their own strip functions, but most
	 * commonly this involves calling \code{strip.default} with a slightly
	 * different arguments.  \code{strip.custom} provides a convenient way to
	 * obtain new strip functions that differ from \code{strip.default} only
	 * in the default values of certain arguments.
	 *
	 */
	exported function "strip.default"("which.given", "which.panel", "var.name", "factor.levels", "shingle.intervals"="", "strip.names"="c(FALSE, TRUE)", "strip.levels"="c(TRUE, FALSE)", "sep"=" : ", "style"="1", "horizontal"="TRUE", "bg"="trellis.par.get(\"strip.background\")$col[which.given]", "fg"="trellis.par.get(\"strip.shingle\")$col[which.given]", "par.strip.text"="trellis.par.get(\"add.text\")")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	exported function "stripplot"("x", "data", "...")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	function "stripplot.formula"("x", "data"="", "panel"="lattice.getOption(\"panel.stripplot\")", "default.prepanel"="lattice.getOption(\"prepanel.default.stripplot\")", "...")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	function "stripplot.numeric"("x", "data"="", "xlab"="deparse(substitute(x))", "...")
	/**
	 * 
	 * Functions to handle shingles
	 *
	 */
	function "summary.shingle"("object", "showValues"="FALSE", "...")
	/**
	 * 
	 * The \code{print} and \code{plot} methods produce a graph from a
	 * \code{"trellis"} object.  The \code{print} method is necessary for
	 * automatic plotting.  \code{plot} method is essentially
	 * an alias, provided for convenience.  The \code{summary} method
	 * gives a textual summary of the object.  \code{dim} and \code{dimnames}
	 * describe the cross-tabulation induced by conditioning.
	 * \code{panel.error} is the default handler used when an error occurs
	 * while executing the panel function.
	 *
	 */
	function "summary.trellis"("object", "...")
	/**
	 * 
	 * Update method for objects of class \code{"trellis"}, and a way to retrieve
	 * the last printed trellis object (that was saved).
	 *
	 */
	function "t.trellis"("x")
	/**
	 * 
	 * \code{tmd} Creates Tukey Mean-Difference Plots from a trellis object
	 * returned by \code{xyplot}, \code{qq} or \code{qqmath}.  The prepanel
	 * and panel functions are used as appropriate.  The \code{formula}
	 * method for \code{tmd} is provided for convenience, and simply calls
	 * \code{tmd} on the object created by calling \code{xyplot} on that
	 * formula.
	 *
	 */
	exported function "tmd"("object", "...")
	/**
	 * 
	 * \code{tmd} Creates Tukey Mean-Difference Plots from a trellis object
	 * returned by \code{xyplot}, \code{qq} or \code{qqmath}.  The prepanel
	 * and panel functions are used as appropriate.  The \code{formula}
	 * method for \code{tmd} is provided for convenience, and simply calls
	 * \code{tmd} on the object created by calling \code{xyplot} on that
	 * formula.
	 *
	 */
	function "tmd.formula"("object", "data"="", "...")
	/**
	 * 
	 * \code{tmd} Creates Tukey Mean-Difference Plots from a trellis object
	 * returned by \code{xyplot}, \code{qq} or \code{qqmath}.  The prepanel
	 * and panel functions are used as appropriate.  The \code{formula}
	 * method for \code{tmd} is provided for convenience, and simply calls
	 * \code{tmd} on the object created by calling \code{xyplot} on that
	 * formula.
	 *
	 */
	function "tmd.trellis"("object", "xlab"="mean", "ylab"="difference", "panel"="if (qqmath) panel.tmd.qqmath else panel.tmd.default", "prepanel"="if (qqmath) prepanel.tmd.qqmath else prepanel.tmd.default", "...")
	function "trellis.clickFocus"("clip.off"="FALSE", "highlight"="interactive()", "...", "guess"="TRUE", "verbose"="TRUE")
	/**
	 * 
	 *
	 * Control over lattice plots are provided through a collection of user
	 * specifiable functions that perform various tasks during the plotting.
	 * Not all information is available to all functions.  The functions
	 * documented here attempt to provide a consistent interface to access
	 * relevant information from within these user specified functions,
	 * namely those specified as the \code{panel}, \code{strip} and
	 * \code{axis} functions.  Note that this information is not available to
	 * the \code{prepanel} function, which is executed prior to the actual
	 * plotting.
	 *
	 *
	 */
	exported function "trellis.currentLayout"("which"="c(\"packet\", \"panel\")", "prefix"="lattice.getStatus(\"current.prefix\")")
	/**
	 * 
	 * Initialization of a display device with appropriate graphical
	 * parameters.
	 *
	 */
	exported function "trellis.device"("device"="getOption(\"device\")", "color"="!(dev.name == \"postscript\")", "theme"="lattice.getOption(\"default.theme\")", "new"="TRUE", "retain"="FALSE", "...")
	/**
	 * 
	 * The classic Trellis paradigm is to plot the whole object at once,
	 * without the possibility of interacting with it afterwards.  However,
	 * by keeping track of the grid viewports where the panels and strips are
	 * drawn, it is possible to go back to them afterwards and enhance them
	 * one panel at a time.  These functions provide convenient interfaces to
	 * help in this.  Note that these are still experimental and the exact
	 * details may change in future.
	 *
	 */
	exported function "trellis.focus"("name", "column"="stop(\"column must be specified\")", "row"="stop(\"row must be specified\")", "side"="", "clip.off"="FALSE", "highlight"="interactive()", "...", "prefix", "guess"="TRUE", "verbose"="getOption(\"verbose\")")
	/**
	 * 
	 * The classic Trellis paradigm is to plot the whole object at once,
	 * without the possibility of interacting with it afterwards.  However,
	 * by keeping track of the grid viewports where the panels and strips are
	 * drawn, it is possible to go back to them afterwards and enhance them
	 * one panel at a time.  These functions provide convenient interfaces to
	 * help in this.  Note that these are still experimental and the exact
	 * details may change in future.
	 *
	 */
	exported function "trellis.grobname"("name", "type"="c(\"\", \"panel\", \"strip\", \"strip.left\", \"key\", \"colorkey\")", "group"="0", "which.given"="lattice.getStatus(\"current.which.given\", prefix = prefix)", "which.panel"="lattice.getStatus(\"current.which.panel\", prefix = prefix)", "column"="lattice.getStatus(\"current.focus.column\", prefix = prefix)", "row"="lattice.getStatus(\"current.focus.row\", prefix = prefix)", "prefix"="lattice.getStatus(\"current.prefix\")")
	/**
	 * 
	 * Update method for objects of class \code{"trellis"}, and a way to retrieve
	 * the last printed trellis object (that was saved).
	 *
	 */
	exported function "trellis.last.object"("...", "prefix"="lattice.getStatus(\"current.prefix\")")
	/**
	 * 
	 * The classic Trellis paradigm is to plot the whole object at once,
	 * without the possibility of interacting with it afterwards.  However,
	 * by keeping track of the grid viewports where the panels and strips are
	 * drawn, it is possible to go back to them afterwards and enhance them
	 * one panel at a time.  These functions provide convenient interfaces to
	 * help in this.  Note that these are still experimental and the exact
	 * details may change in future.
	 *
	 */
	exported function "trellis.panelArgs"("x", "packet.number")
	/**
	 * 
	 * Functions used to query, display and modify graphical parameters for
	 * fine control of Trellis displays.  Modifications are made to the
	 * settings for the currently active device only.
	 *
	 */
	exported function "trellis.par.get"("name"="")
	/**
	 * 
	 * Functions used to query, display and modify graphical parameters for
	 * fine control of Trellis displays.  Modifications are made to the
	 * settings for the currently active device only.
	 *
	 */
	exported function "trellis.par.set"("name", "value", "...", "theme", "warn"="TRUE", "strict"="FALSE")
	function "trellis.skeleton"("formula"="", "cond", "aspect"="default.args$aspect", "as.table"="default.args$as.table", "between"="default.args$between", "key"="", "legend"="", "page"="default.args$page", "main"="default.args$main", "sub"="default.args$sub", "par.strip.text"="default.args$par.strip.text", "layout"="default.args$layout", "skip"="default.args$skip", "strip"="default.args$strip.default", "strip.left"="FALSE", "xlab.default"="", "ylab.default"="", "xlab"="", "ylab"="", "xlab.top"="", "ylab.right"="", "panel", "xscale.components"="default.args$xscale.components", "yscale.components"="default.args$yscale.components", "axis"="default.args$axis", "subscripts"="TRUE", "index.cond"="", "perm.cond"="", "...", "par.settings"="", "plot.args"="", "lattice.options"="")
	/**
	 * 
	 * The classic Trellis paradigm is to plot the whole object at once,
	 * without the possibility of interacting with it afterwards.  However,
	 * by keeping track of the grid viewports where the panels and strips are
	 * drawn, it is possible to go back to them afterwards and enhance them
	 * one panel at a time.  These functions provide convenient interfaces to
	 * help in this.  Note that these are still experimental and the exact
	 * details may change in future.
	 *
	 */
	exported function "trellis.switchFocus"("name", "side"="", "clip.off"="FALSE", "highlight", "...", "prefix")
	/**
	 * 
	 * The classic Trellis paradigm is to plot the whole object at once,
	 * without the possibility of interacting with it afterwards.  However,
	 * by keeping track of the grid viewports where the panels and strips are
	 * drawn, it is possible to go back to them afterwards and enhance them
	 * one panel at a time.  These functions provide convenient interfaces to
	 * help in this.  Note that these are still experimental and the exact
	 * details may change in future.
	 *
	 */
	exported function "trellis.unfocus"()
	/**
	 * 
	 * The classic Trellis paradigm is to plot the whole object at once,
	 * without the possibility of interacting with it afterwards.  However,
	 * by keeping track of the grid viewports where the panels and strips are
	 * drawn, it is possible to go back to them afterwards and enhance them
	 * one panel at a time.  These functions provide convenient interfaces to
	 * help in this.  Note that these are still experimental and the exact
	 * details may change in future.
	 *
	 */
	exported function "trellis.vpname"("name"="c(\"position\", \"split\", \"split.location\", \"toplevel\", \"figure\",     \"panel\", \"strip\", \"strip.left\", \"legend\", \"legend.region\",     \"main\", \"sub\", \"xlab\", \"ylab\", \"xlab.top\", \"ylab.right\",     \"page\")", "column"="lattice.getStatus(\"current.focus.column\", prefix = prefix)", "row"="lattice.getStatus(\"current.focus.row\", prefix = prefix)", "side"="c(\"left\", \"top\", \"right\", \"bottom\", \"inside\")", "clip.off"="FALSE", "prefix"="lattice.getStatus(\"current.prefix\")")
	function "trunc_POSIXt_TMP"("x", "units"="c(\"secs\", \"mins\", \"hours\", \"days\", \"weeks\", \"months\", \"years\",     \"decades\", \"centuries\")", "start.on.monday"="TRUE")
	/**
	 * 
	 * Update method for objects of class \code{"trellis"}, and a way to retrieve
	 * the last printed trellis object (that was saved).
	 *
	 */
	function "update.trellis"("object", "panel", "aspect", "as.table", "between", "key", "auto.key", "legend", "layout", "main", "page", "par.strip.text", "prepanel", "scales", "skip", "strip", "strip.left", "sub", "xlab", "ylab", "xlab.top", "ylab.right", "xlim", "ylim", "xscale.components", "yscale.components", "axis", "par.settings", "plot.args", "lattice.options", "index.cond", "perm.cond", "...")
	function "updateList"("x", "val")
	function "weighted.banking"("dx", "dy"="1", "xrange"="sum(dx)", "yrange"="sum(dy)")
	/**
	 * 
	 *
	 * Control over lattice plots are provided through a collection of user
	 * specifiable functions that perform various tasks during the plotting.
	 * Not all information is available to all functions.  The functions
	 * documented here attempt to provide a consistent interface to access
	 * relevant information from within these user specified functions,
	 * namely those specified as the \code{panel}, \code{strip} and
	 * \code{axis} functions.  Note that this information is not available to
	 * the \code{prepanel} function, which is executed prior to the actual
	 * plotting.
	 *
	 *
	 */
	exported function "which.packet"("prefix"="lattice.getStatus(\"current.prefix\")")
	/**
	 * 
	 * Generic functions to draw 3d scatter plots and surfaces.  The
	 * \code{"formula"} methods do most of the actual work.
	 *
	 */
	exported function "wireframe"("x", "data", "...")
	/**
	 * 
	 * Generic functions to draw 3d scatter plots and surfaces.  The
	 * \code{"formula"} methods do most of the actual work.
	 *
	 */
	function "wireframe.formula"("x", "data"="", "panel"="lattice.getOption(\"panel.wireframe\")", "default.prepanel"="lattice.getOption(\"prepanel.default.wireframe\")", "...")
	/**
	 * 
	 * Generic functions to draw 3d scatter plots and surfaces.  The
	 * \code{"formula"} methods do most of the actual work.
	 *
	 */
	function "wireframe.matrix"("x", "data"="", "zlab"="deparse(substitute(x))", "aspect", "...", "xlim", "ylim", "row.values"="seq_len(nrow(x))", "column.values"="seq_len(ncol(x))")
	var "wireframePanelCalculations"
	/**
	 * 
	 * Lattice funtions provide control over how the plot axes are annotated
	 * through a common interface.  There are two levels of control.  The
	 * \code{xscale.components} and \code{yscale.components} arguments can be
	 * functions that determine tick mark locations and labels given a
	 * packet.  For more direct control, the \code{axis} argument can be a
	 * function that actually draws the axes.  The functions documented here
	 * are the defaults for these arguments.  They can additonally be used as
	 * components of user written replacements.
	 *
	 */
	exported function "xscale.components.default"("lim", "packet.number"="0", "packet.list"="", "top"="TRUE", "...")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	exported function "xyplot"("x", "data", "...")
	/**
	 * 
	 * This help page documents several commonly used high-level Lattice
	 * functions.  \code{xyplot} produces bivariate scatterplots or
	 * time-series plots, \code{bwplot} produces box-and-whisker plots,
	 * \code{dotplot} produces Cleveland dot plots, \code{barchart} produces
	 * bar plots, and \code{stripplot} produces one-dimensional scatterplots.
	 * All these functions, along with other high-level Lattice functions,
	 * respond to a common set of arguments that control conditioning,
	 * layout, aspect ratio, legends, axis annotation, and many other details
	 * in a consistent manner.  These arguments are described extensively in
	 * this help page, and should be used as the reference for other
	 * high-level functions as well.
	 *
	 * For control and customization of the actual display in each panel, the
	 * help page of the respective default panel function will often be more
	 * informative.  In particular, these help pages describe many arguments
	 * commonly used when calling the corresponding high-level function but
	 * are specific to them.
	 *
	 */
	function "xyplot.formula"("x", "data"="", "allow.multiple"="is.null(groups) || outer", "outer"="!is.null(groups)", "auto.key"="FALSE", "aspect"="fill", "panel"="lattice.getOption(\"panel.xyplot\")", "prepanel"="", "scales"="list()", "strip"="TRUE", "groups"="", "xlab", "xlim", "ylab", "ylim", "drop.unused.levels"="lattice.getOption(\"drop.unused.levels\")", "...", "lattice.options"="", "default.scales"="list()", "default.prepanel"="lattice.getOption(\"prepanel.default.xyplot\")", "subscripts"="!is.null(groups)", "subset"="TRUE")
	/**
	 * 
	 * This function handles time series plotting, including cut-and-stack plots.
	 * Examples are given of superposing, juxtaposing and styling
	 * different time series.
	 *
	 */
	exported function "xyplot.ts"("x", "data"="", "screens"="if (superpose) 1 else colnames(x)", "...", "superpose"="FALSE", "cut"="FALSE", "type"="l", "col"="", "lty"="", "lwd"="", "pch"="", "cex"="", "fill"="", "auto.key", "panel"="if (superpose) \"panel.superpose\" else \"panel.superpose.plain\"", "par.settings"="list()", "layout"="", "as.table"="TRUE", "xlab"="Time", "ylab"="", "default.scales"="list(y = list(relation = if (missing(cut)) \"free\" else \"same\"))")
	/**
	 * 
	 * Lattice funtions provide control over how the plot axes are annotated
	 * through a common interface.  There are two levels of control.  The
	 * \code{xscale.components} and \code{yscale.components} arguments can be
	 * functions that determine tick mark locations and labels given a
	 * packet.  For more direct control, the \code{axis} argument can be a
	 * function that actually draws the axes.  The functions documented here
	 * are the defaults for these arguments.  They can additonally be used as
	 * components of user written replacements.
	 *
	 */
	exported function "yscale.components.default"("lim", "packet.number"="0", "packet.list"="", "right"="TRUE", "...")
}

package "base" "3.3.1" {
	/**
	 * 
	 * These unary and binary operators perform arithmetic on numeric or
	 * complex vectors (or objects which can be coerced to them).
	 *
	 */
	exported primitive function "-"("e1", "e2")
	/**
	 * 
	 * Operators for the \code{"\link{Date}"} class.
	 *
	 * There is an \code{\link{Ops}} method and specific
	 * methods for \code{+} and \code{-} for the \code{\link{Date}} class.
	 *
	 */
	exported function "-.Date"("e1", "e2")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "-.POSIXt"("e1", "e2")
	/**
	 * 
	 * Generate regular sequences.
	 *
	 */
	exported primitive function ":"("NULL")
	/**
	 * 
	 * Accessing exported and internal variables, i.e.\ifelse{latex}{\out{~}}{ }\ifelse{{latex}{\out{~}}{ }}LIST{}\R{} objects
	 * (including lazy loaded data sets) in a namespace.
	 *
	 */
	exported function "::"("pkg", "name")
	/**
	 * 
	 * Accessing exported and internal variables, i.e.\ifelse{latex}{\out{~}}{ }\ifelse{{latex}{\out{~}}{ }}LIST{}\R{} objects
	 * (including lazy loaded data sets) in a namespace.
	 *
	 */
	exported function ":::"("pkg", "name")
	/**
	 * 
	 * These operators act on raw, logical and number-like vectors.
	 *
	 */
	exported primitive function "!"("x")
	/**
	 * 
	 * Convert or print integers in hexadecimal format, with as many digits
	 * as are needed to display the largest, using leading zeroes as
	 * necessary.
	 *
	 */
	exported function "!.hexmode"("a")
	/**
	 * 
	 * Convert or print integers in octal format, with as many digits as are
	 * needed to display the largest, using leading zeroes as necessary.
	 *
	 */
	exported function "!.octmode"("a")
	/**
	 * 
	 * Binary operators which allow the comparison of values in atomic vectors.
	 *
	 */
	exported primitive function "!="("e1", "e2")
	/**
	 * 
	 * Take a sequence of vector, matrix or data-frame arguments and combine
	 * by \emph{c}olumns or \emph{r}ows, respectively.  These are generic
	 * functions with methods for other \R{} classes.
	 *
	 */
	exported function ".__H__.cbind"("...", "deparse.level"="1")
	/**
	 * 
	 * Take a sequence of vector, matrix or data-frame arguments and combine
	 * by \emph{c}olumns or \emph{r}ows, respectively.  These are generic
	 * functions with methods for other \R{} classes.
	 *
	 */
	exported function ".__H__.rbind"("...", "deparse.level"="1")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported var ".__S3MethodsTable__."
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "..getNamespace"("name", "where")
	/**
	 * 
	 * Searches for approximate matches to \code{pattern} (the first argument)
	 * within each element of the string \code{x} (the second argument) using
	 * the generalized Levenshtein edit distance (the minimal possibly
	 * weighted number of insertions, deletions and substitutions needed to
	 * transform one string into another).
	 *
	 */
	exported function ".amatch_bounds"("x"="0.1")
	/**
	 * 
	 * Searches for approximate matches to \code{pattern} (the first argument)
	 * within each element of the string \code{x} (the second argument) using
	 * the generalized Levenshtein edit distance (the minimal possibly
	 * weighted number of insertions, deletions and substitutions needed to
	 * transform one string into another).
	 *
	 */
	exported function ".amatch_costs"("x"="")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".ArgsEnv"
	/**
	 * 
	 * \code{autoload} creates a promise-to-evaluate \code{autoloader} and
	 * stores it with name \code{name} in \code{.AutoloadEnv} environment.
	 * When \R{} attempts to evaluate \code{name}, \code{autoloader} is run,
	 * the package is loaded and \code{name} is re-evaluated in the new
	 * package's environment.  The result is that \R{} behaves as if
	 * \code{file} was loaded but it does not occupy memory.
	 *
	 * \code{.Autoloaded} contains the names of the packages for
	 * which autoloading has been promised.
	 *
	 */
	exported var ".AutoloadEnv"
	/**
	 * 
	 * Get, set, test for and create environments.
	 *
	 */
	exported var ".BaseNamespaceEnv"
	/**
	 * 
	 * Bin a numeric vector and return integer codes for the binning.
	 *
	 */
	exported function ".bincode"("x", "breaks", "right"="TRUE", "include.lowest"="FALSE")
	/**
	 * 
	 * Functions to make calls to compiled code that has been loaded into \R{}.
	 *
	 */
	exported primitive function ".C"(".NAME", "...", "NAOK" = "FALSE", "DUP" = "TRUE", "PACKAGE", "ENCODING")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".C_R_addTaskCallback"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".C_R_getTaskCallbackNames"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".C_R_removeTaskCallback"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported primitive function ".cache_class"("class", "extends")
	/**
	 * 
	 * Functions to pass \R{} objects to compiled C/C++ code that has been
	 * loaded into \R{}.
	 *
	 */
	exported primitive function ".Call"(".NAME", "...", "PACKAGE")
	/**
	 * 
	 * Internal versions of \code{\link{.Call}} and \code{\link{.External}}.
	 *
	 */
	exported primitive function ".Call.graphics"(".NAME", "...", "PACKAGE")
	/**
	 * 
	 * Form row and column sums and means for numeric arrays (or data frames).
	 *
	 */
	exported function ".colMeans"("x", "m", "n", "na.rm"="FALSE")
	/**
	 * 
	 * Form row and column sums and means for numeric arrays (or data frames).
	 *
	 */
	exported function ".colSums"("x", "m", "n", "na.rm"="FALSE")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function ".decode_numeric_version"("x")
	/**
	 * 
	 * When a function is removed from \R{} it should be replaced by a function
	 * which calls \code{.Defunct}.
	 *
	 */
	exported function ".Defunct"("new", "package"="", "msg")
	/**
	 * 
	 * Process the deparsing options for \code{deparse}, \code{dput} and
	 * \code{dump}.
	 *
	 */
	exported function ".deparseOpts"("control")
	/**
	 * 
	 * When an object is about to be removed from \R{} it is first deprecated and
	 * should include a call to \code{.Deprecated}.
	 *
	 */
	exported function ".Deprecated"("new", "package"="", "msg", "old"="as.character(sys.call(sys.parent()))[1L]")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function ".detach"("pos")
	/**
	 * 
	 * A pairlist of the names of open graphics devices is stored in
	 * \code{.Devices}. The name of the active device (see
	 * \code{\link{dev.cur}}) is stored in \code{.Device}.  Both are symbols
	 * and so appear in the base namespace.
	 *
	 */
	exported var ".Device"
	/**
	 * 
	 * A pairlist of the names of open graphics devices is stored in
	 * \code{.Devices}. The name of the active device (see
	 * \code{\link{dev.cur}}) is stored in \code{.Device}.  Both are symbols
	 * and so appear in the base namespace.
	 *
	 */
	exported var ".Devices"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function ".difftime"("xx", "units")
	/**
	 * 
	 * A call to \code{trace} allows you to insert debugging code (e.g., a
	 * call to \code{\link{browser}} or \code{\link{recover}}) at chosen
	 * places in any function.  A call to \code{untrace} cancels the tracing.
	 * Specified methods can be traced the same way, without tracing all
	 * calls to the generic function.  Trace code (\code{tracer}) can be any
	 * \R{} expression.  Tracing can be temporarily turned on or off globally
	 * by calling \code{tracingState}.
	 *
	 */
	exported function ".doTrace"("expr", "msg")
	/**
	 * 
	 * Load the specified file of compiled code if it has not been loaded
	 * already, or unloads it.
	 *
	 */
	exported function ".dynLibs"("new")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function ".encode_numeric_version"("x")
	/**
	 * 
	 * \code{.libPaths} gets/sets the library trees within which packages are
	 * looked for.
	 *
	 */
	exported function ".expand_R_libs_env_var"("x")
	/**
	 * 
	 * Functions to pass \R{} objects to compiled C/C++ code that has been
	 * loaded into \R{}.
	 *
	 */
	exported primitive function ".External"(".NAME", "...", "PACKAGE")
	/**
	 * 
	 * Internal versions of \code{\link{.Call}} and \code{\link{.External}}.
	 *
	 */
	exported primitive function ".External.graphics"(".NAME", "...", "PACKAGE")
	/**
	 * 
	 * Internal versions of \code{\link{.Call}} and \code{\link{.External}}.
	 *
	 */
	exported primitive function ".External2"(".NAME", "...", "PACKAGE")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".F_dchdc"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".F_dqrcf"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".F_dqrdc2"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".F_dqrqty"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".F_dqrqy"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".F_dqrrsd"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".F_dqrxb"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".F_dtrco"
	/**
	 * 
	 * The functions or variables listed here are no longer part of \R{} as
	 * they are no longer needed.
	 *
	 */
	exported function ".find.package"("...")
	/**
	 * 
	 * In \R{}, the startup mechanism is as follows.
	 *
	 * Unless \option{--no-environ} was given on the command line, \R{}
	 * searches for site and user files to process for setting environment
	 * variables.  The name of the site file is the one pointed to by the
	 * environment variable \env{R_ENVIRON}; if this is unset,
	 * \file{\var{\link{R_HOME}}/etc/Renviron.site} is used (if it exists,
	 * which it does not in a \sQuote{factory-fresh} installation).  The name
	 * of the user file can be specified by the \env{R_ENVIRON_USER}
	 * environment variable; if this is unset, the files searched for are
	 * \file{.Renviron} in the current or in the user's home directory (in
	 * that order).  See \sQuote{Details} for how the files are read.
	 *
	 * Then \R{} searches for the site-wide startup profile file of \R{} code
	 * unless the command line option \option{--no-site-file} was given.  The
	 * path of this file is taken from the value of the \env{R_PROFILE}
	 * environment variable (after \link{tilde expansion}).  If this variable
	 * is unset, the default is \file{\var{\link{R_HOME}}/etc/Rprofile.site},
	 * which is used if it exists
	 * (which it does not in a \sQuote{factory-fresh} installation).
	 *#ifdef windows not active  This code is sourced into the \pkg{base} package.  Users need to be
	 * careful not to unintentionally overwrite objects in \pkg{base}, and it
	 * is normally advisable to use \code{\link{local}} if code needs to be
	 * executed: see the examples.
	 *
	 * Then, unless \option{--no-init-file} was given, \R{} searches for a user
	 * profile, a file of \R{} code.  The path of this file can be specified by
	 * the \env{R_PROFILE_USER} environment variable (and
	 * \link{tilde expansion} will be performed).  If this is unset, a file
	 * called \file{.Rprofile} is searched for in the current directory or in
	 * the user's home directory (in that order).  The user profile file is
	 * sourced into the workspace.
	 *
	 * Note that when the site and user profile files are sourced only the
	 * \pkg{base} package is loaded, so objects in other packages need to be
	 * referred to by e.g.\ifelse{latex}{\out{~}}{ }\ifelse{{latex}{\out{~}}{ }}LIST{}\code{utils::dump.frames} or after explicitly
	 * loading the package concerned.
	 *
	 * \R{} then loads a saved image of the user workspace from \file{.RData}
	 * in the current directory if there is one (unless
	 * \option{--no-restore-data} or \option{--no-restore} was specified on
	 * the command line).
	 *
	 * Next, if a function \code{.First} is found on the search path,
	 * it is executed as \code{.First()}.  Finally, function
	 * \code{.First.sys()} in the \pkg{base} package is run.  This calls
	 * \code{\link{require}} to attach the default packages specified by
	 * \code{\link{options}("defaultPackages")}.  If the \pkg{methods}
	 * package is included, this will have been attached earlier (by function
	 * \code{.OptRequireMethods()}) so that namespace initializations such
	 * as those from the user workspace will proceed correctly.
	 *
	 * A function \code{.First} (and \code{\link{.Last}}) can be defined in
	 * appropriate \file{.Rprofile} or \file{Rprofile.site} files or have
	 * been saved in \file{.RData}.  If you want a different set of packages
	 * than the default ones when you start, insert a call to
	 * \code{\link{options}} in the \file{.Rprofile} or \file{Rprofile.site}
	 * file.  For example, \code{options(defaultPackages = character())} will
	 * attach no extra packages on startup (only the \pkg{base} package) (or
	 * set \code{R_DEFAULT_PACKAGES=NULL} as an environment variable before
	 * running \R{}).  Using \code{options(defaultPackages = "")} or
	 * \code{R_DEFAULT_PACKAGES=""} enforces the R \emph{system} default.
	 *
	 * On front-ends which support it, the commands history is read from the
	 * file specified by the environment variable \env{R_HISTFILE} (default
	 * \file{.Rhistory} in the current directory) unless
	 * \option{--no-restore-history} or \option{--no-restore} was specified.
	 *
	 * The command-line option \option{--vanilla} implies
	 * \option{--no-site-file}, \option{--no-init-file},
	 * \option{--no-environ} and (except for \command{R CMD})
	 * \option{--no-restore}
	 *#ifdef windows not active
	 */
	exported function ".First.sys"()
	/**
	 * 
	 * Formatting numbers individually and flexibly, \code{formatC()} using
	 * \code{C} style format specifications.
	 *
	 * \code{prettyNum()} is used for \dQuote{prettifying} (possibly
	 * formatted) numbers, also in \code{\link{format.default}}.
	 *
	 * \code{.format.zeros()}, an auxiliary function of \code{prettyNum()}
	 * re-formats the zeros in a vector \code{x} of formatted numbers.
	 *
	 */
	exported function ".format.zeros"("x", "zero.print", "nx"="suppressWarnings(as.numeric(x))")
	/**
	 * 
	 * Functions to make calls to compiled code that has been loaded into \R{}.
	 *
	 */
	exported primitive function ".Fortran"(".NAME", "...", "NAOK" = "FALSE", "DUP" = "TRUE", "PACKAGE", "ENCODING")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".GenericArgsEnv"
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function ".getNamespace"("name")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function ".getNamespaceInfo"("ns", "which")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function ".getRequiredPackages"("file"="DESCRIPTION", "lib.loc"="", "quietly"="FALSE", "useImports"="FALSE")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function ".getRequiredPackages2"("pkgInfo", "quietly"="FALSE", "lib.loc"="", "useImports"="FALSE")
	/**
	 * 
	 * Get, set, test for and create environments.
	 *
	 */
	exported var ".GlobalEnv"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function ".gt"("x", "i", "j")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function ".gtn"("x", "strictly")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function ".handleSimpleError"("h", "msg", "call")
	/**
	 * 
	 *\code{.Internal} performs a call to an internal code
	 *which is built in to the \R{} interpreter.
	 *
	 *Only true \R{} wizards should even consider using this function, and only
	 *\R{} developers can add to the list of internal functions.
	 *
	 */
	exported primitive function ".Internal"("call")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported primitive function ".isMethodsDispatchOn"("onOff" = "NULL")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function ".isOpen"("srcfile")
	/**
	 * 
	 * The condition number of a regular (square) matrix is the product of
	 * the \emph{norm} of the matrix and the norm of its inverse (or
	 * pseudo-inverse), and hence depends on the kind of matrix-norm.
	 *
	 * \code{kappa()} computes by default (an estimate of) the 2-norm
	 * condition number of a matrix or of the \eqn{{R}} matrix of a \eqn{{QR}}
	 * decomposition, perhaps of a linear fit.  The 2-norm condition number
	 * can be shown to be the ratio of the largest to the smallest
	 * \emph{non-zero} singular value of the matrix.
	 *
	 * \code{rcond()} computes an approximation of the \bold{r}eciprocal
	 * \bold{cond}ition number, see the details.
	 *
	 */
	exported function ".kappa_tri"("z", "exact"="FALSE", "LINPACK"="TRUE", "norm"="", "...")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported var ".knownS3Generics"
	/**
	 * 
	 * Computes the generalised kronecker product of two arrays,
	 * \code{X} and \code{Y}.
	 *
	 */
	exported function ".kronecker"("X", "Y", "FUN"="*", "make.dimnames"="FALSE", "...")
	/**
	 * 
	 *   The function \code{quit} or its alias \code{q} terminate the current
	 *   \R{} session.
	 *
	 */
	exported function ".Last.sys"()
	/**
	 * 
	 * The value of the internal evaluation of a top-level \R{} expression
	 * is always assigned to \code{.Last.value} (in \code{package:base})
	 * before further processing (e.g., printing).
	 *
	 */
	exported var ".Last.value"
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported var ".leap.seconds"
	/**
	 * 
	 * \code{.libPaths} gets/sets the library trees within which packages are
	 * looked for.
	 *
	 */
	exported function ".libPaths"("new")
	/**
	 * 
	 * \code{.libPaths} gets/sets the library trees within which packages are
	 * looked for.
	 *
	 */
	exported var ".Library"
	/**
	 * 
	 * \code{.libPaths} gets/sets the library trees within which packages are
	 * looked for.
	 *
	 */
	exported var ".Library.site"
	/**
	 * 
	 * \code{.Machine} is a variable holding information on the numerical
	 * characteristics of the machine \R{} is running on, such as the largest
	 * double or integer and the machine's precision.
	 *
	 */
	exported var ".Machine"
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function ".make_numeric_version"("x", "strict"="TRUE", "regexp", "classes"="")
	/**
	 * 
	 * Generate a diagnostic message from its arguments.
	 *
	 */
	exported function ".makeMessage"("...", "domain"="", "appendLF"="FALSE")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function ".mapply"("FUN", "dots", "MoreArgs")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function ".maskedMsg"("same", "pkg", "by")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function ".mergeExportMethods"("new", "ns")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function ".mergeImportMethods"("impenv", "expenv", "metaname")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".methodsNamespace"
	/**
	 * 
	 * \code{library} and \code{require} load and attach add-on packages.
	 *
	 */
	exported var ".noGenerics"
	/**
	 * 
	 * In order to pinpoint missing functionality, the \R{} core team uses
	 * these functions for missing \R{} functions and not yet used arguments of
	 * existing \R{} functions (which are typically there for compatibility
	 * purposes).
	 *
	 * You are very welcome to contribute your code \dots{}
	 *
	 */
	exported function ".NotYetImplemented"()
	/**
	 * 
	 * In order to pinpoint missing functionality, the \R{} core team uses
	 * these functions for missing \R{} functions and not yet used arguments of
	 * existing \R{} functions (which are typically there for compatibility
	 * purposes).
	 *
	 * You are very welcome to contribute your code \dots{}
	 *
	 */
	exported function ".NotYetUsed"("arg", "error"="TRUE")
	/**
	 * 
	 * Allow the user to set and examine a variety of global \emph{options}
	 * which affect the way in which \R{} computes and displays its results.
	 *
	 */
	exported var ".Options"
	/**
	 * 
	 * In \R{}, the startup mechanism is as follows.
	 *
	 * Unless \option{--no-environ} was given on the command line, \R{}
	 * searches for site and user files to process for setting environment
	 * variables.  The name of the site file is the one pointed to by the
	 * environment variable \env{R_ENVIRON}; if this is unset,
	 * \file{\var{\link{R_HOME}}/etc/Renviron.site} is used (if it exists,
	 * which it does not in a \sQuote{factory-fresh} installation).  The name
	 * of the user file can be specified by the \env{R_ENVIRON_USER}
	 * environment variable; if this is unset, the files searched for are
	 * \file{.Renviron} in the current or in the user's home directory (in
	 * that order).  See \sQuote{Details} for how the files are read.
	 *
	 * Then \R{} searches for the site-wide startup profile file of \R{} code
	 * unless the command line option \option{--no-site-file} was given.  The
	 * path of this file is taken from the value of the \env{R_PROFILE}
	 * environment variable (after \link{tilde expansion}).  If this variable
	 * is unset, the default is \file{\var{\link{R_HOME}}/etc/Rprofile.site},
	 * which is used if it exists
	 * (which it does not in a \sQuote{factory-fresh} installation).
	 *#ifdef windows not active  This code is sourced into the \pkg{base} package.  Users need to be
	 * careful not to unintentionally overwrite objects in \pkg{base}, and it
	 * is normally advisable to use \code{\link{local}} if code needs to be
	 * executed: see the examples.
	 *
	 * Then, unless \option{--no-init-file} was given, \R{} searches for a user
	 * profile, a file of \R{} code.  The path of this file can be specified by
	 * the \env{R_PROFILE_USER} environment variable (and
	 * \link{tilde expansion} will be performed).  If this is unset, a file
	 * called \file{.Rprofile} is searched for in the current directory or in
	 * the user's home directory (in that order).  The user profile file is
	 * sourced into the workspace.
	 *
	 * Note that when the site and user profile files are sourced only the
	 * \pkg{base} package is loaded, so objects in other packages need to be
	 * referred to by e.g.\ifelse{latex}{\out{~}}{ }\ifelse{{latex}{\out{~}}{ }}LIST{}\code{utils::dump.frames} or after explicitly
	 * loading the package concerned.
	 *
	 * \R{} then loads a saved image of the user workspace from \file{.RData}
	 * in the current directory if there is one (unless
	 * \option{--no-restore-data} or \option{--no-restore} was specified on
	 * the command line).
	 *
	 * Next, if a function \code{.First} is found on the search path,
	 * it is executed as \code{.First()}.  Finally, function
	 * \code{.First.sys()} in the \pkg{base} package is run.  This calls
	 * \code{\link{require}} to attach the default packages specified by
	 * \code{\link{options}("defaultPackages")}.  If the \pkg{methods}
	 * package is included, this will have been attached earlier (by function
	 * \code{.OptRequireMethods()}) so that namespace initializations such
	 * as those from the user workspace will proceed correctly.
	 *
	 * A function \code{.First} (and \code{\link{.Last}}) can be defined in
	 * appropriate \file{.Rprofile} or \file{Rprofile.site} files or have
	 * been saved in \file{.RData}.  If you want a different set of packages
	 * than the default ones when you start, insert a call to
	 * \code{\link{options}} in the \file{.Rprofile} or \file{Rprofile.site}
	 * file.  For example, \code{options(defaultPackages = character())} will
	 * attach no extra packages on startup (only the \pkg{base} package) (or
	 * set \code{R_DEFAULT_PACKAGES=NULL} as an environment variable before
	 * running \R{}).  Using \code{options(defaultPackages = "")} or
	 * \code{R_DEFAULT_PACKAGES=""} enforces the R \emph{system} default.
	 *
	 * On front-ends which support it, the commands history is read from the
	 * file specified by the environment variable \env{R_HISTFILE} (default
	 * \file{.Rhistory} in the current directory) unless
	 * \option{--no-restore-history} or \option{--no-restore} was specified.
	 *
	 * The command-line option \option{--vanilla} implies
	 * \option{--no-site-file}, \option{--no-init-file},
	 * \option{--no-environ} and (except for \command{R CMD})
	 * \option{--no-restore}
	 *#ifdef windows not active
	 */
	exported function ".OptRequireMethods"()
	/**
	 * 
	 * \code{.packages} returns information about package availability.
	 *
	 */
	exported function ".packages"("all.available"="FALSE", "lib.loc"="")
	/**
	 * 
	 * Generate a diagnostic message from its arguments.
	 *
	 */
	exported function ".packageStartupMessage"("message", "call"="")
	/**
	 * 
	 * The functions or variables listed here are no longer part of \R{} as
	 * they are no longer needed.
	 *
	 */
	exported function ".path.package"("...")
	/**
	 * 
	 * \code{.Platform} is a list with some details of the platform under
	 * which \R{} was built.  This provides means to write OS-portable \R{}
	 * code.
	 *
	 */
	exported var ".Platform"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported var ".popath"
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function ".POSIXct"("xx", "tz"="")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function ".POSIXlt"("xx", "tz"="")
	/**
	 * 
	 * \code{.Primitive} looks up by name a \sQuote{primitive}
	 * (internally implemented) function.
	 *
	 */
	exported primitive function ".Primitive"("name")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported primitive function ".primTrace"("obj")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported primitive function ".primUntrace"("obj")
	/**
	 * 
	 * The functions or variables listed here are no longer part of \R{} as
	 * they are no longer needed.
	 *
	 */
	exported function ".readRDS"("...")
	/**
	 * 
	 * Gives a list of \code{\link{attach}}ed \emph{packages}
	 * (see \code{\link{library}}), and \R{} objects, usually
	 * \code{\link{data.frame}s}.
	 *
	 */
	exported function ".rmpkg"("pkg")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function ".row_names_info"("x", "type"="1")
	/**
	 * 
	 * Form row and column sums and means for numeric arrays (or data frames).
	 *
	 */
	exported function ".rowMeans"("x", "m", "n", "na.rm"="FALSE")
	/**
	 * 
	 * Form row and column sums and means for numeric arrays (or data frames).
	 *
	 */
	exported function ".rowSums"("x", "m", "n", "na.rm"="FALSE")
	/**
	 * 
	 * Many \R{}-internal functions are \emph{generic} and allow
	 * methods to be written for.
	 *
	 */
	exported var ".S3PrimitiveGenerics"
	/**
	 * 
	 * The functions or variables listed here are no longer part of \R{} as
	 * they are no longer needed.
	 *
	 */
	exported function ".saveRDS"("...")
	/**
	 * 
	 * Internal interface to run a script through its interpreter.
	 *
	 */
	exported function ".Script"("interpreter", "script", "args", "...")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function ".set_row_names"("n")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function ".signalSimpleWarning"("msg", "call")
	/**
	 * Miscellaneous internal/programming utilities.
	 */
	exported function ".standard_regexps"()
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported primitive function ".subset"("x", "...")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported primitive function ".subset2"("x", "...")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function ".TAOCP1997init"("seed")
	/**
	 * 
	 * By default \code{traceback()} prints the call stack of the last
	 * uncaught error, i.e., the sequence of calls that lead to the error.
	 * This is useful when an error occurs with an unidentifiable error
	 * message.  It can also be used to print the current stack or
	 * arbitrary lists of deparsed calls.
	 *
	 * \code{.traceback()} now \emph{returns} the above call stack (and
	 * \code{traceback(x, *)} can be regarded as convenience function for
	 * printing the result of \code{.traceback(x)}).
	 *
	 */
	exported function ".traceback"("x"="")
	/**
	 * 
	 * These functions allow users to set actions to be taken before packages
	 * are attached/detached and namespaces are (un)loaded.
	 *
	 */
	exported var ".userHooksEnv"
	/**
	 * 
	 * Open parenthesis, \code{(}, and open brace, \code{{}, are
	 * \code{\link{.Primitive}} functions in \R{}.
	 *
	 * Effectively, \code{(} is semantically equivalent to the identity
	 * \code{function(x) x}, whereas \code{{} is slightly more interesting,
	 * see examples.
	 *
	 */
	exported primitive function "("("NULL")
	/**
	 * 
	 * Operators acting on vectors, matrices, arrays and lists to extract or
	 * replace parts.
	 *
	 */
	exported primitive function "["("NULL")
	/**
	 * 
	 * Change the class of an object to indicate that it should be treated
	 * \sQuote{as is}.
	 *
	 */
	exported function "[.AsIs"("x", "i", "...")
	/**
	 * 
	 * Extract or replace subsets of data frames.
	 *
	 */
	exported function "[.data.frame"("x", "i", "j", "drop"="if (missing(i)) TRUE else length(cols) == 1")
	/**
	 * 
	 * Description of the class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "[.Date"("x", "...", "drop"="TRUE")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "[.difftime"("x", "...", "drop"="TRUE")
	/**
	 * 
	 * Operators acting on vectors, matrices, arrays and lists to extract or
	 * replace parts.
	 *
	 */
	exported function "[.Dlist"("x", "i", "...")
	/**
	 * 
	 * Extract or replace subsets of factors.
	 *
	 */
	exported function "[.factor"("x", "...", "drop"="FALSE")
	/**
	 * 
	 * Convert or print integers in hexadecimal format, with as many digits
	 * as are needed to display the largest, using leading zeroes as
	 * necessary.
	 *
	 */
	exported function "[.hexmode"("x", "i")
	/**
	 * 
	 * Operators acting on vectors, matrices, arrays and lists to extract or
	 * replace parts.
	 *
	 */
	exported function "[.listof"("x", "i", "...")
	/**
	 * 
	 * Print character strings without quotes.
	 *
	 */
	exported function "[.noquote"("x", "...")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "[.numeric_version"("x", "i", "j")
	/**
	 * 
	 * Convert or print integers in octal format, with as many digits as are
	 * needed to display the largest, using leading zeroes as necessary.
	 *
	 */
	exported function "[.octmode"("x", "i")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "[.POSIXct"("x", "...", "drop"="TRUE")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "[.POSIXlt"("x", "...", "drop"="TRUE")
	/**
	 * 
	 * Operators acting on vectors, matrices, arrays and lists to extract or
	 * replace parts.
	 *
	 */
	exported function "[.simple.list"("x", "i", "...")
	/**
	 * 
	 * \code{table} uses the cross-classifying factors to build a contingency
	 * table of the counts at each combination of factor levels.
	 *
	 */
	exported function "[.table"("x", "i", "j", "...", "drop"="TRUE")
	/**
	 * 
	 * \code{warnings} and its \code{print} method print the
	 * variable \code{last.warning} in a pleasing form.
	 *
	 */
	exported function "[.warnings"("x", "...")
	/**
	 * 
	 * Operators acting on vectors, matrices, arrays and lists to extract or
	 * replace parts.
	 *
	 */
	exported primitive function "[["("NULL")
	/**
	 * 
	 * Extract or replace subsets of data frames.
	 *
	 */
	exported function "[[.data.frame"("x", "...", "exact"="TRUE")
	/**
	 * 
	 * Description of the class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "[[.Date"("x", "...", "drop"="TRUE")
	/**
	 * 
	 * Extract or replace subsets of factors.
	 *
	 */
	exported function "[[.factor"("x", "...")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "[[.numeric_version"("x", "...", "exact"="NA")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "[[.POSIXct"("x", "...", "drop"="TRUE")
	/**
	 * 
	 * Operators acting on vectors, matrices, arrays and lists to extract or
	 * replace parts.
	 *
	 */
	exported primitive function "[[<-"("NULL")
	/**
	 * 
	 * Extract or replace subsets of data frames.
	 *
	 */
	exported function "[[<-.data.frame"("x", "i", "j", "value")
	/**
	 * 
	 * Extract or replace subsets of factors.
	 *
	 */
	exported function "[[<-.factor"("x", "...", "value")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "[[<-.numeric_version"("x", "...", "value")
	/**
	 * 
	 * Operators acting on vectors, matrices, arrays and lists to extract or
	 * replace parts.
	 *
	 */
	exported primitive function "[<-"("NULL")
	/**
	 * 
	 * Extract or replace subsets of data frames.
	 *
	 */
	exported function "[<-.data.frame"("x", "i", "j", "value")
	/**
	 * 
	 * Description of the class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "[<-.Date"("x", "...", "value")
	/**
	 * 
	 * Extract or replace subsets of factors.
	 *
	 */
	exported function "[<-.factor"("x", "...", "value")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "[<-.numeric_version"("x", "i", "j", "value")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "[<-.POSIXct"("x", "...", "value")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "[<-.POSIXlt"("x", "i", "value")
	/**
	 * 
	 * Open parenthesis, \code{(}, and open brace, \code{{}, are
	 * \code{\link{.Primitive}} functions in \R{}.
	 *
	 * Effectively, \code{(} is semantically equivalent to the identity
	 * \code{function(x) x}, whereas \code{{} is slightly more interesting,
	 * see examples.
	 *
	 */
	exported primitive function "{"("NULL")
	/**
	 * 
	 * Extract or replace the contents of a slot in a object with a
	 * formal (S4) class structure.
	 *
	 */
	exported primitive function "@"("NULL")
	/**
	 * 
	 * Extract or replace the contents of a slot in a object with a
	 * formal (S4) class structure.
	 *
	 */
	exported primitive function "@<-"("NULL")
	/**
	 * 
	 * These unary and binary operators perform arithmetic on numeric or
	 * complex vectors (or objects which can be coerced to them).
	 *
	 */
	exported primitive function "*"("e1", "e2")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "*.difftime"("e1", "e2")
	/**
	 * 
	 * These unary and binary operators perform arithmetic on numeric or
	 * complex vectors (or objects which can be coerced to them).
	 *
	 */
	exported primitive function "/"("e1", "e2")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "/.difftime"("e1", "e2")
	/**
	 * 
	 * These operators act on raw, logical and number-like vectors.
	 *
	 */
	exported primitive function "&"("e1", "e2")
	/**
	 * 
	 * Convert or print integers in hexadecimal format, with as many digits
	 * as are needed to display the largest, using leading zeroes as
	 * necessary.
	 *
	 */
	exported function "&.hexmode"("a", "b")
	/**
	 * 
	 * Convert or print integers in octal format, with as many digits as are
	 * needed to display the largest, using leading zeroes as necessary.
	 *
	 */
	exported function "&.octmode"("a", "b")
	/**
	 * 
	 * These operators act on raw, logical and number-like vectors.
	 *
	 */
	exported primitive function "&&"("NULL")
	/**
	 * 
	 * Multiplies two matrices, if they are conformable.  If one argument is
	 * a vector, it will be promoted to either a row or column matrix to make
	 * the two arguments conformable.  If both are vectors of the same
	 * length, it will return the inner product (as a matrix).
	 *
	 */
	exported primitive function "%*%"("x", "y")
	/**
	 * 
	 * These unary and binary operators perform arithmetic on numeric or
	 * complex vectors (or objects which can be coerced to them).
	 *
	 */
	exported primitive function "%/%"("e1", "e2")
	/**
	 * 
	 * These unary and binary operators perform arithmetic on numeric or
	 * complex vectors (or objects which can be coerced to them).
	 *
	 */
	exported primitive function "%%"("e1", "e2")
	/**
	 * 
	 * \code{match} returns a vector of the positions of (first) matches of
	 * its first argument in its second.
	 *
	 * \code{%in%} is a more intuitive interface as a binary operator,
	 * which returns a logical vector indicating if there is a match or not
	 * for its left operand.
	 *
	 */
	exported function "%in%"("x", "table")
	/**
	 * 
	 * The outer product of the arrays \code{X} and \code{Y} is the array
	 * \code{A} with dimension \code{c(dim(X), dim(Y))} where element
	 * \code{A[c(arrayindex.x, arrayindex.y)]
	 *   = FUN(X[arrayindex.x], Y[arrayindex.y], \dots{})}.
	 *
	 */
	exported function "%o%"("X", "Y")
	/**
	 * 
	 * Computes the generalised kronecker product of two arrays,
	 * \code{X} and \code{Y}.
	 *
	 */
	exported function "%x%"("X", "Y")
	/**
	 * 
	 * These unary and binary operators perform arithmetic on numeric or
	 * complex vectors (or objects which can be coerced to them).
	 *
	 */
	exported primitive function "^"("e1", "e2")
	/**
	 * 
	 * These unary and binary operators perform arithmetic on numeric or
	 * complex vectors (or objects which can be coerced to them).
	 *
	 */
	exported primitive function "+"("e1", "e2")
	/**
	 * 
	 * Operators for the \code{"\link{Date}"} class.
	 *
	 * There is an \code{\link{Ops}} method and specific
	 * methods for \code{+} and \code{-} for the \code{\link{Date}} class.
	 *
	 */
	exported function "+.Date"("e1", "e2")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "+.POSIXt"("e1", "e2")
	/**
	 * 
	 * Binary operators which allow the comparison of values in atomic vectors.
	 *
	 */
	exported primitive function "<"("e1", "e2")
	/**
	 * 
	 * Assign a value to a name.
	 *
	 */
	exported primitive function "<-"("NULL")
	/**
	 * 
	 * Assign a value to a name.
	 *
	 */
	exported primitive function "<<-"("NULL")
	/**
	 * 
	 * Binary operators which allow the comparison of values in atomic vectors.
	 *
	 */
	exported primitive function "<="("e1", "e2")
	/**
	 * 
	 * Assign a value to a name.
	 *
	 */
	exported primitive function "="("NULL")
	/**
	 * 
	 * Binary operators which allow the comparison of values in atomic vectors.
	 *
	 */
	exported primitive function "=="("e1", "e2")
	/**
	 * 
	 * Binary operators which allow the comparison of values in atomic vectors.
	 *
	 */
	exported primitive function ">"("e1", "e2")
	/**
	 * 
	 * Binary operators which allow the comparison of values in atomic vectors.
	 *
	 */
	exported primitive function ">="("e1", "e2")
	/**
	 * 
	 * These operators act on raw, logical and number-like vectors.
	 *
	 */
	exported primitive function "|"("e1", "e2")
	/**
	 * 
	 * Convert or print integers in hexadecimal format, with as many digits
	 * as are needed to display the largest, using leading zeroes as
	 * necessary.
	 *
	 */
	exported function "|.hexmode"("a", "b")
	/**
	 * 
	 * Convert or print integers in octal format, with as many digits as are
	 * needed to display the largest, using leading zeroes as necessary.
	 *
	 */
	exported function "|.octmode"("a", "b")
	/**
	 * 
	 * These operators act on raw, logical and number-like vectors.
	 *
	 */
	exported primitive function "||"("NULL")
	/**
	 * 
	 * Tilde is used to separate the left- and right-hand sides in a model formula.
	 *
	 */
	exported primitive function "~"("NULL")
	/**
	 * 
	 * Operators acting on vectors, matrices, arrays and lists to extract or
	 * replace parts.
	 *
	 */
	exported primitive function "$"("NULL")
	/**
	 * 
	 * Extract or replace subsets of data frames.
	 *
	 */
	exported function "$.data.frame"("x", "name")
	/**
	 * 
	 * This function provides a way to get a list of all the DLLs (see
	 * \code{\link{dyn.load}}) that are currently loaded in the \R{} session.
	 *
	 */
	exported function "$.DLLInfo"("x", "name")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "$.package_version"("x", "name")
	/**
	 * 
	 * Operators acting on vectors, matrices, arrays and lists to extract or
	 * replace parts.
	 *
	 */
	exported primitive function "$<-"("NULL")
	/**
	 * 
	 * Extract or replace subsets of data frames.
	 *
	 */
	exported function "$<-.data.frame"("x", "name", "value")
	/**
	 * 
	 * Abbreviate strings to at least \code{minlength} characters,
	 * such that they remain \emph{unique} (if they were),
	 * unless \code{strict = TRUE}.
	 *
	 */
	exported function "abbreviate"("names.arg", "minlength"="4", "use.classes"="TRUE", "dot"="FALSE", "strict"="FALSE", "method"="c(\"left.kept\", \"both.sides\")")
	/**
	 * 
	 * \code{abs(x)} computes the absolute value of x, \code{sqrt(x)} computes the
	 * (principal) square root of x, \eqn{{\sqrt{x}}}.% Details for complex x are below
	 *
	 * The naming follows the standard for computer languages such as C or Fortran.
	 *
	 */
	exported primitive function "abs"("x")
	/**
	 * 
	 * These functions give the obvious trigonometric functions.  They
	 * respectively compute the cosine, sine, tangent, arc-cosine, arc-sine,
	 * arc-tangent, and the two-argument arc-tangent.
	 *
	 * \code{cospi(x)}, \code{sinpi(x)}, and \code{tanpi(x)}, compute
	 * \code{cos(pi*x)}, \code{sin(pi*x)}, and \code{tan(pi*x)}.
	 *
	 */
	exported primitive function "acos"("x")
	/**
	 * 
	 * These functions give the obvious hyperbolic functions.  They
	 * respectively compute the hyperbolic cosine, sine, tangent, and their
	 * inverses, arc-cosine, arc-sine, arc-tangent (or \sQuote{\emph{area cosine}},
	 * etc).
	 *
	 */
	exported primitive function "acosh"("x")
	/**
	 * 
	 * The function \code{factor} is used to encode a vector as a factor (the
	 * terms \sQuote{category} and \sQuote{enumerated type} are also used for
	 * factors).  If argument \code{ordered} is \code{TRUE}, the factor
	 * levels are assumed to be ordered.  For compatibility with S there is
	 * also a function \code{ordered}.
	 *
	 * \code{is.factor}, \code{is.ordered}, \code{as.factor} and \code{as.ordered}
	 * are the membership and coercion functions for these classes.
	 *
	 */
	exported function "addNA"("x", "ifany"="FALSE")
	/**
	 * 
	 * \code{addTaskCallback} registers an R function
	 * that is to be called each time a top-level task
	 * is completed.
	 *
	 * \code{removeTaskCallback} un-registers a function
	 * that was registered earlier via \code{addTaskCallback}.
	 *
	 * These provide low-level access to the internal/native
	 * mechanism for managing task-completion actions.
	 * One can use \code{\link{taskCallbackManager}}
	 * at the S-language level to manage S functions
	 * that are called at the completion of each task.
	 * This is easier and more direct.
	 *
	 */
	exported function "addTaskCallback"("f", "data"="", "name"="character()")
	/**
	 * 
	 * Searches for approximate matches to \code{pattern} (the first argument)
	 * within each element of the string \code{x} (the second argument) using
	 * the generalized Levenshtein edit distance (the minimal possibly
	 * weighted number of insertions, deletions and substitutions needed to
	 * transform one string into another).
	 *
	 */
	exported function "agrep"("pattern", "x", "max.distance"="0.1", "costs"="", "ignore.case"="FALSE", "value"="FALSE", "fixed"="TRUE", "useBytes"="FALSE")
	/**
	 * 
	 * Searches for approximate matches to \code{pattern} (the first argument)
	 * within each element of the string \code{x} (the second argument) using
	 * the generalized Levenshtein edit distance (the minimal possibly
	 * weighted number of insertions, deletions and substitutions needed to
	 * transform one string into another).
	 *
	 */
	exported function "agrepl"("pattern", "x", "max.distance"="0.1", "costs"="", "ignore.case"="FALSE", "fixed"="TRUE", "useBytes"="FALSE")
	/**
	 * 
	 * Functions to construct, coerce and check for both kinds of \R{} lists.
	 *
	 */
	exported function "alist"("...")
	/**
	 * 
	 * Given a set of logical vectors, are all of the values true?
	 *
	 */
	exported primitive function "all"("...", "na.rm" = "FALSE")
	/**
	 * 
	 *   \code{all.equal(x, y)} is a utility to compare \R{} objects \code{x}
	 *   and \code{y} testing \sQuote{near equality}.  If they are different,
	 *   comparison is still made to some extent, and a report of the
	 *   differences is returned.    Do not use \code{all.equal} directly in
	 *   \code{if} expressions---either use \code{isTRUE(all.equal(....))} or
	 *   \code{\link{identical}} if appropriate.
	 *
	 */
	exported function "all.equal"("target", "current", "...")
	/**
	 * 
	 *   \code{all.equal(x, y)} is a utility to compare \R{} objects \code{x}
	 *   and \code{y} testing \sQuote{near equality}.  If they are different,
	 *   comparison is still made to some extent, and a report of the
	 *   differences is returned.    Do not use \code{all.equal} directly in
	 *   \code{if} expressions---either use \code{isTRUE(all.equal(....))} or
	 *   \code{\link{identical}} if appropriate.
	 *
	 */
	exported function "all.equal.character"("target", "current", "...", "check.attributes"="TRUE")
	/**
	 * 
	 *   \code{all.equal(x, y)} is a utility to compare \R{} objects \code{x}
	 *   and \code{y} testing \sQuote{near equality}.  If they are different,
	 *   comparison is still made to some extent, and a report of the
	 *   differences is returned.    Do not use \code{all.equal} directly in
	 *   \code{if} expressions---either use \code{isTRUE(all.equal(....))} or
	 *   \code{\link{identical}} if appropriate.
	 *
	 */
	exported function "all.equal.default"("target", "current", "...")
	/**
	 * 
	 *   \code{all.equal(x, y)} is a utility to compare \R{} objects \code{x}
	 *   and \code{y} testing \sQuote{near equality}.  If they are different,
	 *   comparison is still made to some extent, and a report of the
	 *   differences is returned.    Do not use \code{all.equal} directly in
	 *   \code{if} expressions---either use \code{isTRUE(all.equal(....))} or
	 *   \code{\link{identical}} if appropriate.
	 *
	 */
	exported function "all.equal.environment"("target", "current", "all.names"="TRUE", "...")
	/**
	 * 
	 *   \code{all.equal(x, y)} is a utility to compare \R{} objects \code{x}
	 *   and \code{y} testing \sQuote{near equality}.  If they are different,
	 *   comparison is still made to some extent, and a report of the
	 *   differences is returned.    Do not use \code{all.equal} directly in
	 *   \code{if} expressions---either use \code{isTRUE(all.equal(....))} or
	 *   \code{\link{identical}} if appropriate.
	 *
	 */
	exported function "all.equal.envRefClass"("target", "current", "...")
	/**
	 * 
	 *   \code{all.equal(x, y)} is a utility to compare \R{} objects \code{x}
	 *   and \code{y} testing \sQuote{near equality}.  If they are different,
	 *   comparison is still made to some extent, and a report of the
	 *   differences is returned.    Do not use \code{all.equal} directly in
	 *   \code{if} expressions---either use \code{isTRUE(all.equal(....))} or
	 *   \code{\link{identical}} if appropriate.
	 *
	 */
	exported function "all.equal.factor"("target", "current", "...", "check.attributes"="TRUE")
	/**
	 * 
	 *   \code{all.equal(x, y)} is a utility to compare \R{} objects \code{x}
	 *   and \code{y} testing \sQuote{near equality}.  If they are different,
	 *   comparison is still made to some extent, and a report of the
	 *   differences is returned.    Do not use \code{all.equal} directly in
	 *   \code{if} expressions---either use \code{isTRUE(all.equal(....))} or
	 *   \code{\link{identical}} if appropriate.
	 *
	 */
	exported function "all.equal.formula"("target", "current", "...")
	/**
	 * 
	 *   \code{all.equal(x, y)} is a utility to compare \R{} objects \code{x}
	 *   and \code{y} testing \sQuote{near equality}.  If they are different,
	 *   comparison is still made to some extent, and a report of the
	 *   differences is returned.    Do not use \code{all.equal} directly in
	 *   \code{if} expressions---either use \code{isTRUE(all.equal(....))} or
	 *   \code{\link{identical}} if appropriate.
	 *
	 */
	exported function "all.equal.language"("target", "current", "...")
	/**
	 * 
	 *   \code{all.equal(x, y)} is a utility to compare \R{} objects \code{x}
	 *   and \code{y} testing \sQuote{near equality}.  If they are different,
	 *   comparison is still made to some extent, and a report of the
	 *   differences is returned.    Do not use \code{all.equal} directly in
	 *   \code{if} expressions---either use \code{isTRUE(all.equal(....))} or
	 *   \code{\link{identical}} if appropriate.
	 *
	 */
	exported function "all.equal.list"("target", "current", "...", "check.attributes"="TRUE", "use.names"="TRUE")
	/**
	 * 
	 *   \code{all.equal(x, y)} is a utility to compare \R{} objects \code{x}
	 *   and \code{y} testing \sQuote{near equality}.  If they are different,
	 *   comparison is still made to some extent, and a report of the
	 *   differences is returned.    Do not use \code{all.equal} directly in
	 *   \code{if} expressions---either use \code{isTRUE(all.equal(....))} or
	 *   \code{\link{identical}} if appropriate.
	 *
	 */
	exported function "all.equal.numeric"("target", "current", "tolerance"="sqrt(.Machine$double.eps)", "scale"="", "...", "check.attributes"="TRUE")
	/**
	 * 
	 *   \code{all.equal(x, y)} is a utility to compare \R{} objects \code{x}
	 *   and \code{y} testing \sQuote{near equality}.  If they are different,
	 *   comparison is still made to some extent, and a report of the
	 *   differences is returned.    Do not use \code{all.equal} directly in
	 *   \code{if} expressions---either use \code{isTRUE(all.equal(....))} or
	 *   \code{\link{identical}} if appropriate.
	 *
	 */
	exported function "all.equal.POSIXt"("target", "current", "...", "tolerance"="0.001", "scale")
	/**
	 * 
	 *   \code{all.equal(x, y)} is a utility to compare \R{} objects \code{x}
	 *   and \code{y} testing \sQuote{near equality}.  If they are different,
	 *   comparison is still made to some extent, and a report of the
	 *   differences is returned.    Do not use \code{all.equal} directly in
	 *   \code{if} expressions---either use \code{isTRUE(all.equal(....))} or
	 *   \code{\link{identical}} if appropriate.
	 *
	 */
	exported function "all.equal.raw"("target", "current", "...", "check.attributes"="TRUE")
	/**
	 * 
	 * Return a character vector containing all the names which occur in an
	 * expression or call.
	 *
	 */
	exported function "all.names"("expr", "functions"="TRUE", "max.names"="-1L", "unique"="FALSE")
	/**
	 * 
	 * Return a character vector containing all the names which occur in an
	 * expression or call.
	 *
	 */
	exported function "all.vars"("expr", "functions"="FALSE", "max.names"="-1L", "unique"="TRUE")
	/**
	 * 
	 * Given a set of logical vectors, is at least one of the values true?
	 *
	 */
	exported primitive function "any"("...", "na.rm" = "FALSE")
	/**
	 * 
	 * \code{duplicated()} determines which elements of a vector or data frame are duplicates
	 * of elements with smaller subscripts, and returns a logical vector
	 * indicating which elements (rows) are duplicates.
	 *
	 * \code{anyDuplicated(.)} is a \dQuote{generalized} more efficient
	 * shortcut for \code{any(duplicated(.))}.
	 *
	 */
	exported function "anyDuplicated"("x", "incomparables"="FALSE", "...")
	/**
	 * 
	 * \code{duplicated()} determines which elements of a vector or data frame are duplicates
	 * of elements with smaller subscripts, and returns a logical vector
	 * indicating which elements (rows) are duplicates.
	 *
	 * \code{anyDuplicated(.)} is a \dQuote{generalized} more efficient
	 * shortcut for \code{any(duplicated(.))}.
	 *
	 */
	exported function "anyDuplicated.array"("x", "incomparables"="FALSE", "MARGIN"="1", "fromLast"="FALSE", "...")
	/**
	 * 
	 * \code{duplicated()} determines which elements of a vector or data frame are duplicates
	 * of elements with smaller subscripts, and returns a logical vector
	 * indicating which elements (rows) are duplicates.
	 *
	 * \code{anyDuplicated(.)} is a \dQuote{generalized} more efficient
	 * shortcut for \code{any(duplicated(.))}.
	 *
	 */
	exported function "anyDuplicated.data.frame"("x", "incomparables"="FALSE", "fromLast"="FALSE", "...")
	/**
	 * 
	 * \code{duplicated()} determines which elements of a vector or data frame are duplicates
	 * of elements with smaller subscripts, and returns a logical vector
	 * indicating which elements (rows) are duplicates.
	 *
	 * \code{anyDuplicated(.)} is a \dQuote{generalized} more efficient
	 * shortcut for \code{any(duplicated(.))}.
	 *
	 */
	exported function "anyDuplicated.default"("x", "incomparables"="FALSE", "fromLast"="FALSE", "...")
	/**
	 * 
	 * \code{duplicated()} determines which elements of a vector or data frame are duplicates
	 * of elements with smaller subscripts, and returns a logical vector
	 * indicating which elements (rows) are duplicates.
	 *
	 * \code{anyDuplicated(.)} is a \dQuote{generalized} more efficient
	 * shortcut for \code{any(duplicated(.))}.
	 *
	 */
	exported function "anyDuplicated.matrix"("x", "incomparables"="FALSE", "MARGIN"="1", "fromLast"="FALSE", "...")
	/**
	 * 
	 * \code{NA} is a logical constant of length 1 which contains a missing
	 * value indicator.  \code{NA} can be coerced to any other vector
	 * type except raw.  There are also constants \code{NA_integer_},
	 * \code{NA_real_}, \code{NA_complex_} and \code{NA_character_} of the
	 * other atomic vector types which support missing values: all of these
	 * are \link{reserved} words in the \R{} language.
	 *
	 * The generic function \code{is.na} indicates which elements are missing.
	 *
	 * The generic function \code{is.na<-} sets elements to \code{NA}.
	 *
	 * The generic function \code{anyNA} implements \code{any(is.na(x))} in a
	 * possibly faster way (especially for atomic vectors).
	 *
	 */
	exported primitive function "anyNA"("x", "recursive" = "FALSE")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "anyNA.numeric_version"("x", "recursive"="FALSE")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "anyNA.POSIXlt"("x", "recursive"="FALSE")
	/**
	 * 
	 * Transpose an array by permuting its dimensions and optionally resizing
	 * it.
	 *
	 */
	exported function "aperm"("a", "perm", "...")
	/**
	 * 
	 * Transpose an array by permuting its dimensions and optionally resizing
	 * it.
	 *
	 */
	exported function "aperm.default"("a", "perm"="", "resize"="TRUE", "...")
	/**
	 * 
	 * Transpose an array by permuting its dimensions and optionally resizing
	 * it.
	 *
	 */
	exported function "aperm.table"("a", "perm"="", "resize"="TRUE", "keep.class"="TRUE", "...")
	/**
	 * 
	 * Add elements to a vector.
	 *
	 */
	exported function "append"("x", "values", "after"="length(x)")
	/**
	 * 
	 * Returns a vector or array or list of values obtained by applying a
	 * function to margins of an array or matrix.
	 *
	 */
	exported function "apply"("X", "MARGIN", "FUN", "...")
	/**
	 * 
	 * Basic functions which support complex arithmetic in \R{}, in addition to
	 * the arithmetic operators \code{+}, \code{-}, \code{*}, \code{/}, and \code{^}.
	 *
	 */
	exported primitive function "Arg"("z")
	/**
	 * 
	 * Displays the argument names and corresponding default values of a
	 * function or primitive.
	 *
	 */
	exported function "args"("name")
	/**
	 * 
	 * Creates or tests for arrays.
	 *
	 */
	exported function "array"("data"="NA", "dim"="length(data)", "dimnames"="")
	/**
	 * 
	 * Give the \code{TRUE} indices of a logical object, allowing for array
	 * indices.
	 *
	 */
	exported function "arrayInd"("ind", ".dim", ".dimnames"="", "useNames"="FALSE")
	/**
	 * 
	 * Creates or tests for arrays.
	 *
	 */
	exported function "as.array"("x", "...")
	/**
	 * 
	 * Creates or tests for arrays.
	 *
	 */
	exported function "as.array.default"("x", "...")
	/**
	 * 
	 * Create or test for objects of mode \code{"call"}.
	 *
	 */
	exported primitive function "as.call"("x")
	/**
	 * 
	 * Create or test for objects of type \code{"character"}.
	 *
	 */
	exported primitive function "as.character"("x", "...")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "as.character.condition"("x", "...")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "as.character.Date"("x", "...")
	/**
	 * 
	 * Create or test for objects of type \code{"character"}.
	 *
	 */
	exported function "as.character.default"("x", "...")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "as.character.error"("x", "...")
	/**
	 * 
	 * Create or test for objects of type \code{"character"}.
	 *
	 */
	exported function "as.character.factor"("x", "...")
	/**
	 * 
	 * Convert or print integers in hexadecimal format, with as many digits
	 * as are needed to display the largest, using leading zeroes as
	 * necessary.
	 *
	 */
	exported function "as.character.hexmode"("x", "...")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "as.character.numeric_version"("x", "...")
	/**
	 * 
	 * Convert or print integers in octal format, with as many digits as are
	 * needed to display the largest, using leading zeroes as necessary.
	 *
	 */
	exported function "as.character.octmode"("x", "...")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * classes \code{"POSIXlt"} and \code{"POSIXct"} representing calendar
	 * dates and times.
	 *
	 */
	exported function "as.character.POSIXt"("x", "...")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "as.character.srcref"("x", "useSource"="TRUE", "to", "...")
	/**
	 * 
	 * Basic functions which support complex arithmetic in \R{}, in addition to
	 * the arithmetic operators \code{+}, \code{-}, \code{*}, \code{/}, and \code{^}.
	 *
	 */
	exported primitive function "as.complex"("x", "...")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame"("x", "row.names"="", "optional"="FALSE", "...")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.array"("x", "row.names"="", "optional"="FALSE", "...")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.AsIs"("x", "row.names"="", "optional"="FALSE", "...")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.character"("x", "...", "stringsAsFactors"="default.stringsAsFactors()")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.complex"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.data.frame"("x", "row.names"="", "...")
	/**
	 * 
	 * Description of the class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "as.data.frame.Date"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.default"("x", "...")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.difftime"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.factor"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.integer"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.list"("x", "row.names"="", "optional"="FALSE", "...", "cut.names"="FALSE", "col.names"="names(x)", "fix.empty.names"="TRUE", "stringsAsFactors"="default.stringsAsFactors()")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.logical"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.matrix"("x", "row.names"="", "optional"="FALSE", "...", "stringsAsFactors"="default.stringsAsFactors()")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.model.matrix"("x", "row.names"="", "optional"="FALSE", "...")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.noquote"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.numeric"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "as.data.frame.numeric_version"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.ordered"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "as.data.frame.POSIXct"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "as.data.frame.POSIXlt"("x", "row.names"="", "optional"="FALSE", "...")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.raw"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * 
	 * \code{table} uses the cross-classifying factors to build a contingency
	 * table of the counts at each combination of factor levels.
	 *
	 */
	exported function "as.data.frame.table"("x", "row.names"="", "...", "responseName"="Freq", "stringsAsFactors"="TRUE", "sep"="", "base"="list(LETTERS)")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.ts"("x", "...")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "as.data.frame.vector"("x", "row.names"="", "optional"="FALSE", "...", "nm"="paste(deparse(substitute(x), width.cutoff = 500L), collapse = \" \")")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "as.Date"("x", "...")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "as.Date.character"("x", "format", "...")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "as.Date.date"("x", "...")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "as.Date.dates"("x", "...")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "as.Date.default"("x", "...")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "as.Date.factor"("x", "...")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "as.Date.numeric"("x", "origin", "...")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "as.Date.POSIXct"("x", "tz"="UTC", "...")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "as.Date.POSIXlt"("x", "...")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "as.difftime"("tim", "format"="%X", "units"="auto")
	/**
	 * 
	 * Create, coerce to or test for a double-precision vector.
	 *
	 */
	exported primitive function "as.double"("x", "...")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "as.double.difftime"("x", "units"="auto", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.double.POSIXlt"("x", "...")
	/**
	 * 
	 * A generic function coercing an \R{} object to an
	 * \code{\link{environment}}.  A number or a character string is
	 * converted to the corresponding environment on the search path.
	 *
	 */
	exported primitive function "as.environment"("x")
	/**
	 * 
	 * Creates or tests for objects of mode \code{"expression"}.
	 *
	 */
	exported function "as.expression"("x", "...")
	/**
	 * 
	 * Creates or tests for objects of mode \code{"expression"}.
	 *
	 */
	exported function "as.expression.default"("x", "...")
	/**
	 * 
	 * The function \code{factor} is used to encode a vector as a factor (the
	 * terms \sQuote{category} and \sQuote{enumerated type} are also used for
	 * factors).  If argument \code{ordered} is \code{TRUE}, the factor
	 * levels are assumed to be ordered.  For compatibility with S there is
	 * also a function \code{ordered}.
	 *
	 * \code{is.factor}, \code{is.ordered}, \code{as.factor} and \code{as.ordered}
	 * are the membership and coercion functions for these classes.
	 *
	 */
	exported function "as.factor"("x")
	/**
	 * 
	 * \code{as.function} is a generic function which is used to convert
	 * objects to functions.
	 *
	 * \code{as.function.default} works on a list \code{x}, which should contain the
	 * concatenation of a formal argument list and an expression or an
	 * object of mode \code{"\link{call}"} which will become the function body.
	 * The function will be defined in a specified environment, by default
	 * that of the caller.
	 *
	 */
	exported function "as.function"("x", "...")
	/**
	 * 
	 * \code{as.function} is a generic function which is used to convert
	 * objects to functions.
	 *
	 * \code{as.function.default} works on a list \code{x}, which should contain the
	 * concatenation of a formal argument list and an expression or an
	 * object of mode \code{"\link{call}"} which will become the function body.
	 * The function will be defined in a specified environment, by default
	 * that of the caller.
	 *
	 */
	exported function "as.function.default"("x", "envir"="parent.frame()", "...")
	/**
	 * 
	 * Convert or print integers in hexadecimal format, with as many digits
	 * as are needed to display the largest, using leading zeroes as
	 * necessary.
	 *
	 */
	exported function "as.hexmode"("x")
	/**
	 * 
	 * Creates or tests for objects of type \code{"integer"}.
	 *
	 */
	exported primitive function "as.integer"("x", "...")
	/**
	 * 
	 * Functions to construct, coerce and check for both kinds of \R{} lists.
	 *
	 */
	exported function "as.list"("x", "...")
	/**
	 * 
	 * Functions to construct, coerce and check for both kinds of \R{} lists.
	 *
	 */
	exported function "as.list.data.frame"("x", "...")
	/**
	 * 
	 * Description of the class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "as.list.Date"("x", "...")
	/**
	 * 
	 * Functions to construct, coerce and check for both kinds of \R{} lists.
	 *
	 */
	exported function "as.list.default"("x", "...")
	/**
	 * 
	 * Functions to construct, coerce and check for both kinds of \R{} lists.
	 *
	 */
	exported function "as.list.environment"("x", "all.names"="FALSE", "sorted"="FALSE", "...")
	/**
	 * 
	 * Functions to construct, coerce and check for both kinds of \R{} lists.
	 *
	 */
	exported function "as.list.factor"("x", "...")
	/**
	 * 
	 * Functions to construct, coerce and check for both kinds of \R{} lists.
	 *
	 */
	exported function "as.list.function"("x", "...")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "as.list.numeric_version"("x", "...")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "as.list.POSIXct"("x", "...")
	/**
	 * 
	 * Create or test for objects of type \code{"logical"}, and the basic
	 * logical constants.
	 *
	 */
	exported primitive function "as.logical"("x", "...")
	/**
	 * 
	 * Create or test for objects of type \code{"logical"}, and the basic
	 * logical constants.
	 *
	 */
	exported function "as.logical.factor"("x", "...")
	/**
	 * 
	 * \code{matrix} creates a matrix from the given set of values.
	 *
	 * \code{as.matrix} attempts to turn its argument into a matrix.
	 *
	 * \code{is.matrix} tests if its argument is a (strict) matrix.
	 *
	 */
	exported function "as.matrix"("x", "...")
	/**
	 * 
	 * \code{matrix} creates a matrix from the given set of values.
	 *
	 * \code{as.matrix} attempts to turn its argument into a matrix.
	 *
	 * \code{is.matrix} tests if its argument is a (strict) matrix.
	 *
	 */
	exported function "as.matrix.data.frame"("x", "rownames.force"="NA", "...")
	/**
	 * 
	 * \code{matrix} creates a matrix from the given set of values.
	 *
	 * \code{as.matrix} attempts to turn its argument into a matrix.
	 *
	 * \code{is.matrix} tests if its argument is a (strict) matrix.
	 *
	 */
	exported function "as.matrix.default"("x", "...")
	/**
	 * 
	 * Print character strings without quotes.
	 *
	 */
	exported function "as.matrix.noquote"("x", "...")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "as.matrix.POSIXlt"("x", "...")
	/**
	 * 
	 * A \sQuote{name} (also known as a \sQuote{symbol}) is a way to refer to
	 * \R{} objects by name (rather than the value of the object, if any, bound
	 * to that name).
	 *
	 * \code{as.name} and \code{as.symbol} are identical: they attempt to
	 * coerce the argument to a name.
	 *
	 * \code{is.symbol} and the identical \code{is.name} return \code{TRUE}
	 * or \code{FALSE} depending on whether the argument is a name or not.
	 *
	 */
	exported function "as.name"("x")
	/**
	 * 
	 * \code{NULL} represents the null object in \R{}: it is a \link{reserved}
	 * word.  \code{NULL} is often returned by expressions and functions
	 * whose value is undefined.
	 *
	 * \code{as.null} ignores its argument and returns the value \code{NULL}.
	 *
	 * \code{is.null} returns \code{TRUE} if its argument
	 * is \code{NULL} and \code{FALSE} otherwise.
	 *
	 */
	exported function "as.null"("x", "...")
	/**
	 * 
	 * \code{NULL} represents the null object in \R{}: it is a \link{reserved}
	 * word.  \code{NULL} is often returned by expressions and functions
	 * whose value is undefined.
	 *
	 * \code{as.null} ignores its argument and returns the value \code{NULL}.
	 *
	 * \code{is.null} returns \code{TRUE} if its argument
	 * is \code{NULL} and \code{FALSE} otherwise.
	 *
	 */
	exported function "as.null.default"("x", "...")
	/**
	 * 
	 * Creates or coerces objects of type \code{"numeric"}.
	 * \code{is.numeric} is a more general test of an object being
	 * interpretable as numbers.
	 *
	 */
	exported primitive function "as.numeric"("x", "...")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "as.numeric_version"("x")
	/**
	 * 
	 * Convert or print integers in octal format, with as many digits as are
	 * needed to display the largest, using leading zeroes as necessary.
	 *
	 */
	exported function "as.octmode"("x")
	/**
	 * 
	 * The function \code{factor} is used to encode a vector as a factor (the
	 * terms \sQuote{category} and \sQuote{enumerated type} are also used for
	 * factors).  If argument \code{ordered} is \code{TRUE}, the factor
	 * levels are assumed to be ordered.  For compatibility with S there is
	 * also a function \code{ordered}.
	 *
	 * \code{is.factor}, \code{is.ordered}, \code{as.factor} and \code{as.ordered}
	 * are the membership and coercion functions for these classes.
	 *
	 */
	exported function "as.ordered"("x")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "as.package_version"("x")
	/**
	 * 
	 * Functions to construct, coerce and check for both kinds of \R{} lists.
	 *
	 */
	exported function "as.pairlist"("x")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXct"("x", "tz"="", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXct.date"("x", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXct.Date"("x", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXct.dates"("x", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXct.default"("x", "tz"="", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXct.numeric"("x", "tz"="", "origin", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXct.POSIXlt"("x", "tz"="", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXlt"("x", "tz"="", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXlt.character"("x", "tz"="", "format", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXlt.date"("x", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXlt.Date"("x", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXlt.dates"("x", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXlt.default"("x", "tz"="", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXlt.factor"("x", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXlt.numeric"("x", "tz"="", "origin", "...")
	/**
	 * 
	 * Functions to manipulate objects of classes \code{"POSIXlt"} and
	 * \code{"POSIXct"} representing calendar dates and times.
	 *
	 */
	exported function "as.POSIXlt.POSIXct"("x", "tz"="", "...")
	/**
	 * 
	 * \code{qr} computes the QR decomposition of a matrix.
	 *
	 */
	exported function "as.qr"("x")
	/**
	 * 
	 * Creates or tests for objects of type \code{"raw"}.
	 *
	 */
	exported primitive function "as.raw"("x")
	/**
	 * 
	 * Create, coerce to or test for a double-precision vector.
	 *
	 */
	exported function "as.single"("x", "...")
	/**
	 * 
	 * Create, coerce to or test for a double-precision vector.
	 *
	 */
	exported function "as.single.default"("x", "...")
	/**
	 * 
	 * A \sQuote{name} (also known as a \sQuote{symbol}) is a way to refer to
	 * \R{} objects by name (rather than the value of the object, if any, bound
	 * to that name).
	 *
	 * \code{as.name} and \code{as.symbol} are identical: they attempt to
	 * coerce the argument to a name.
	 *
	 * \code{is.symbol} and the identical \code{is.name} return \code{TRUE}
	 * or \code{FALSE} depending on whether the argument is a name or not.
	 *
	 */
	exported function "as.symbol"("x")
	/**
	 * 
	 * \code{table} uses the cross-classifying factors to build a contingency
	 * table of the counts at each combination of factor levels.
	 *
	 */
	exported function "as.table"("x", "...")
	/**
	 * 
	 * \code{table} uses the cross-classifying factors to build a contingency
	 * table of the counts at each combination of factor levels.
	 *
	 */
	exported function "as.table.default"("x", "...")
	/**
	 * 
	 * \code{vector} produces a vector of the given length and mode.
	 *
	 * \code{as.vector}, a generic, attempts to coerce its argument into a
	 * vector of mode \code{mode} (the default is to coerce to whichever
	 * vector mode is most convenient): if the result is atomic all
	 * attributes are removed.
	 *
	 * \code{is.vector} returns \code{TRUE} if \code{x} is a vector of the
	 * specified mode having no attributes \emph{other than names}.  It returns
	 * \code{FALSE} otherwise.
	 *
	 */
	exported function "as.vector"("x", "mode"="any")
	/**
	 * 
	 * \code{vector} produces a vector of the given length and mode.
	 *
	 * \code{as.vector}, a generic, attempts to coerce its argument into a
	 * vector of mode \code{mode} (the default is to coerce to whichever
	 * vector mode is most convenient): if the result is atomic all
	 * attributes are removed.
	 *
	 * \code{is.vector} returns \code{TRUE} if \code{x} is a vector of the
	 * specified mode having no attributes \emph{other than names}.  It returns
	 * \code{FALSE} otherwise.
	 *
	 */
	exported function "as.vector.factor"("x", "mode"="any")
	/**
	 * 
	 * These functions give the obvious trigonometric functions.  They
	 * respectively compute the cosine, sine, tangent, arc-cosine, arc-sine,
	 * arc-tangent, and the two-argument arc-tangent.
	 *
	 * \code{cospi(x)}, \code{sinpi(x)}, and \code{tanpi(x)}, compute
	 * \code{cos(pi*x)}, \code{sin(pi*x)}, and \code{tan(pi*x)}.
	 *
	 */
	exported primitive function "asin"("x")
	/**
	 * 
	 * These functions give the obvious hyperbolic functions.  They
	 * respectively compute the hyperbolic cosine, sine, tangent, and their
	 * inverses, arc-cosine, arc-sine, arc-tangent (or \sQuote{\emph{area cosine}},
	 * etc).
	 *
	 */
	exported primitive function "asinh"("x")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "asNamespace"("ns", "base.OK"="TRUE")
	/**
	 * 
	 * Tests whether the object is an instance of an S4 class.
	 *
	 */
	exported function "asS3"("object", "flag"="TRUE", "complete"="TRUE")
	/**
	 * 
	 * Tests whether the object is an instance of an S4 class.
	 *
	 */
	exported function "asS4"("object", "flag"="TRUE", "complete"="TRUE")
	/**
	 * 
	 * Assign a value to a name in an environment.
	 *
	 */
	exported function "assign"("x", "value", "pos"="-1", "envir"="as.environment(pos)", "inherits"="FALSE", "immediate"="TRUE")
	/**
	 * 
	 * These functions give the obvious trigonometric functions.  They
	 * respectively compute the cosine, sine, tangent, arc-cosine, arc-sine,
	 * arc-tangent, and the two-argument arc-tangent.
	 *
	 * \code{cospi(x)}, \code{sinpi(x)}, and \code{tanpi(x)}, compute
	 * \code{cos(pi*x)}, \code{sin(pi*x)}, and \code{tan(pi*x)}.
	 *
	 */
	exported primitive function "atan"("x")
	/**
	 * 
	 * These functions give the obvious trigonometric functions.  They
	 * respectively compute the cosine, sine, tangent, arc-cosine, arc-sine,
	 * arc-tangent, and the two-argument arc-tangent.
	 *
	 * \code{cospi(x)}, \code{sinpi(x)}, and \code{tanpi(x)}, compute
	 * \code{cos(pi*x)}, \code{sin(pi*x)}, and \code{tan(pi*x)}.
	 *
	 */
	exported function "atan2"("y", "x")
	/**
	 * 
	 * These functions give the obvious hyperbolic functions.  They
	 * respectively compute the hyperbolic cosine, sine, tangent, and their
	 * inverses, arc-cosine, arc-sine, arc-tangent (or \sQuote{\emph{area cosine}},
	 * etc).
	 *
	 */
	exported primitive function "atanh"("x")
	/**
	 * 
	 * The database is attached to the \R{} search path.  This means that the
	 * database is searched by \R{} when evaluating a variable, so objects in
	 * the database can be accessed by simply giving their names.
	 *
	 */
	exported function "attach"("what", "pos"="2", "name"="deparse(substitute(what))", "warn.conflicts"="TRUE")
	/**
	 * 
	 * Functions to load and unload name spaces.
	 *
	 */
	exported function "attachNamespace"("ns", "pos"="2", "depends"="")
	/**
	 * 
	 * Get or set specific attributes of an object.
	 *
	 */
	exported primitive function "attr"("x", "which", "exact" = "FALSE")
	/**
	 * 
	 *   \code{all.equal(x, y)} is a utility to compare \R{} objects \code{x}
	 *   and \code{y} testing \sQuote{near equality}.  If they are different,
	 *   comparison is still made to some extent, and a report of the
	 *   differences is returned.    Do not use \code{all.equal} directly in
	 *   \code{if} expressions---either use \code{isTRUE(all.equal(....))} or
	 *   \code{\link{identical}} if appropriate.
	 *
	 */
	exported function "attr.all.equal"("target", "current", "...", "check.attributes"="TRUE", "check.names"="TRUE")
	/**
	 * 
	 * Get or set specific attributes of an object.
	 *
	 */
	exported primitive function "attr<-"("x", "which", "value")
	/**
	 * 
	 * These functions access an object's attributes.
	 * The first form below returns the object's attribute list.
	 * The replacement forms uses the list on the right-hand
	 * side of the assignment as the object's attributes (if appropriate).
	 *
	 */
	exported primitive function "attributes"("obj")
	/**
	 * 
	 * These functions access an object's attributes.
	 * The first form below returns the object's attribute list.
	 * The replacement forms uses the list on the right-hand
	 * side of the assignment as the object's attributes (if appropriate).
	 *
	 */
	exported primitive function "attributes<-"("obj", "value")
	/**
	 * 
	 * \code{autoload} creates a promise-to-evaluate \code{autoloader} and
	 * stores it with name \code{name} in \code{.AutoloadEnv} environment.
	 * When \R{} attempts to evaluate \code{name}, \code{autoloader} is run,
	 * the package is loaded and \code{name} is re-evaluated in the new
	 * package's environment.  The result is that \R{} behaves as if
	 * \code{file} was loaded but it does not occupy memory.
	 *
	 * \code{.Autoloaded} contains the names of the packages for
	 * which autoloading has been promised.
	 *
	 */
	exported function "autoload"("name", "package", "reset"="FALSE", "...")
	/**
	 * 
	 * \code{autoload} creates a promise-to-evaluate \code{autoloader} and
	 * stores it with name \code{name} in \code{.AutoloadEnv} environment.
	 * When \R{} attempts to evaluate \code{name}, \code{autoloader} is run,
	 * the package is loaded and \code{name} is re-evaluated in the new
	 * package's environment.  The result is that \R{} behaves as if
	 * \code{file} was loaded but it does not occupy memory.
	 *
	 * \code{.Autoloaded} contains the names of the packages for
	 * which autoloading has been promised.
	 *
	 */
	exported function "autoloader"("name", "package", "...")
	/**
	 * 
	 * Solves a triangular system of linear equations.
	 *
	 */
	exported function "backsolve"("r", "x", "k"="ncol(r)", "upper.tri"="TRUE", "transpose"="FALSE")
	/**
	 * 
	 * Get, set, test for and create environments.
	 *
	 */
	exported primitive function "baseenv"()
	/**
	 * 
	 * \code{basename} removes all of the path up to and including the last
	 * path separator (if any).
	 *
	 * \code{dirname} returns the part of the \code{path} up to but
	 * excluding the last path separator, or \code{"."} if there is no path
	 * separator.
	 *
	 */
	exported function "basename"("path")
	/**
	 * 
	 * Bessel Functions of integer and fractional order, of first
	 * and second kind, \eqn{{J_{\nu}}{J(nu)}} and \eqn{{Y_{\nu}}{Y(nu)}}, and
	 * Modified Bessel functions (of first and third kind),
	 * \eqn{{I_{\nu}}{I(nu)}} and \eqn{{K_{\nu}}{K(nu)}}.
	 *
	 */
	exported function "besselI"("x", "nu", "expon.scaled"="FALSE")
	/**
	 * 
	 * Bessel Functions of integer and fractional order, of first
	 * and second kind, \eqn{{J_{\nu}}{J(nu)}} and \eqn{{Y_{\nu}}{Y(nu)}}, and
	 * Modified Bessel functions (of first and third kind),
	 * \eqn{{I_{\nu}}{I(nu)}} and \eqn{{K_{\nu}}{K(nu)}}.
	 *
	 */
	exported function "besselJ"("x", "nu")
	/**
	 * 
	 * Bessel Functions of integer and fractional order, of first
	 * and second kind, \eqn{{J_{\nu}}{J(nu)}} and \eqn{{Y_{\nu}}{Y(nu)}}, and
	 * Modified Bessel functions (of first and third kind),
	 * \eqn{{I_{\nu}}{I(nu)}} and \eqn{{K_{\nu}}{K(nu)}}.
	 *
	 */
	exported function "besselK"("x", "nu", "expon.scaled"="FALSE")
	/**
	 * 
	 * Bessel Functions of integer and fractional order, of first
	 * and second kind, \eqn{{J_{\nu}}{J(nu)}} and \eqn{{Y_{\nu}}{Y(nu)}}, and
	 * Modified Bessel functions (of first and third kind),
	 * \eqn{{I_{\nu}}{I(nu)}} and \eqn{{K_{\nu}}{K(nu)}}.
	 *
	 */
	exported function "besselY"("x", "nu")
	/**
	 * 
	 * Special mathematical functions related to the beta and gamma
	 * functions.
	 *
	 */
	exported function "beta"("a", "b")
	/**
	 * 
	 * These functions represent an interface for adjustments
	 * to environments and bindings within environments.  They allow for
	 * locking environments as well as individual bindings, and for linking
	 * a variable to a function.
	 *
	 */
	exported function "bindingIsActive"("sym", "env")
	/**
	 * 
	 * These functions represent an interface for adjustments
	 * to environments and bindings within environments.  They allow for
	 * locking environments as well as individual bindings, and for linking
	 * a variable to a function.
	 *
	 */
	exported function "bindingIsLocked"("sym", "env")
	/**
	 * 
	 * If Native Language Support was enabled in this build of \R{}, attempt to
	 * translate character vectors or set where the translations are to be found.
	 *
	 */
	exported function "bindtextdomain"("domain", "dirname"="")
	/**
	 * 
	 * Logical operations on integer vectors with elements viewed as sets of bits.
	 *
	 */
	exported function "bitwAnd"("a", "b")
	/**
	 * 
	 * Logical operations on integer vectors with elements viewed as sets of bits.
	 *
	 */
	exported function "bitwNot"("a")
	/**
	 * 
	 * Logical operations on integer vectors with elements viewed as sets of bits.
	 *
	 */
	exported function "bitwOr"("a", "b")
	/**
	 * 
	 * Logical operations on integer vectors with elements viewed as sets of bits.
	 *
	 */
	exported function "bitwShiftL"("a", "n")
	/**
	 * 
	 * Logical operations on integer vectors with elements viewed as sets of bits.
	 *
	 */
	exported function "bitwShiftR"("a", "n")
	/**
	 * 
	 * Logical operations on integer vectors with elements viewed as sets of bits.
	 *
	 */
	exported function "bitwXor"("a", "b")
	/**
	 * 
	 * Get or set the body of a function.
	 *
	 */
	exported function "body"("fun"="sys.function(sys.parent())")
	/**
	 * 
	 * Get or set the body of a function.
	 *
	 */
	exported function "body<-"("fun", "envir"="environment(fun)", "value")
	/**
	 * 
	 * An analogue of the LISP backquote macro.  \code{bquote} quotes its
	 * argument except that terms wrapped in \code{.()} are evaluated in the
	 * specified \code{where} environment.
	 *
	 */
	exported function "bquote"("expr", "where"="parent.frame()")
	/**
	 * 
	 * These are the basic control-flow constructs of the \R{} language.  They
	 * function in much the same way as control statements in any Algol-like
	 * language.  They are all \link{reserved} words.
	 *
	 */
	exported primitive function "break"("NULL")
	/**
	 * 
	 * Interrupt the execution of an expression and allow the inspection of
	 * the environment where \code{browser} was called from.
	 *
	 */
	exported primitive function "browser"("text" = "\"\"", "condition" = "NULL", "expr" = "TRUE", "skipCalls" = "0L")
	/**
	 * 
	 *A call to browser can provide context by supplying either a text
	 *argument or a condition argument.  These functions can be used to
	 *retrieve either of these arguments.
	 *
	 */
	exported function "browserCondition"("n"="1")
	/**
	 * 
	 *A call to browser can provide context by supplying either a text
	 *argument or a condition argument.  These functions can be used to
	 *retrieve either of these arguments.
	 *
	 */
	exported function "browserSetDebug"("n"="1")
	/**
	 * 
	 *A call to browser can provide context by supplying either a text
	 *argument or a condition argument.  These functions can be used to
	 *retrieve either of these arguments.
	 *
	 */
	exported function "browserText"("n"="1")
	/**
	 * 
	 * Return the names of all the built-in objects.  These are fetched
	 * directly from the symbol table of the \R{} interpreter.
	 *
	 */
	exported function "builtins"("internal"="FALSE")
	/**
	 * 
	 * Function \code{by} is an object-oriented wrapper for
	 * \code{\link{tapply}} applied to data frames.
	 *
	 */
	exported function "by"("data", "INDICES", "FUN", "...", "simplify"="TRUE")
	/**
	 * 
	 * Function \code{by} is an object-oriented wrapper for
	 * \code{\link{tapply}} applied to data frames.
	 *
	 */
	exported function "by.data.frame"("data", "INDICES", "FUN", "...", "simplify"="TRUE")
	/**
	 * 
	 * Function \code{by} is an object-oriented wrapper for
	 * \code{\link{tapply}} applied to data frames.
	 *
	 */
	exported function "by.default"("data", "INDICES", "FUN", "...", "simplify"="TRUE")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "bzfile"("description", "open"="", "encoding"="getOption(\"encoding\")", "compression"="9")
	/**
	 * 
	 * This is a generic function which combines its arguments.
	 *
	 * The default method combines its arguments to form a vector.
	 * All arguments are coerced to a common type which is the type
	 * of the returned value, and all attributes except names are removed.
	 *
	 */
	exported primitive function "c"("...", "recursive" = "FALSE")
	/**
	 * 
	 * Description of the class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "c.Date"("...", "recursive"="FALSE")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "c.difftime"("...", "recursive"="FALSE")
	/**
	 * 
	 * Print character strings without quotes.
	 *
	 */
	exported function "c.noquote"("...", "recursive"="FALSE")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "c.numeric_version"("...", "recursive"="FALSE")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "c.POSIXct"("...", "recursive"="FALSE")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "c.POSIXlt"("...", "recursive"="FALSE")
	/**
	 * 
	 * \code{warnings} and its \code{print} method print the
	 * variable \code{last.warning} in a pleasing form.
	 *
	 */
	exported function "c.warnings"("...", "recursive"="FALSE")
	/**
	 * 
	 * Create or test for objects of mode \code{"call"}.
	 *
	 */
	exported primitive function "call"("name", "...")
	/**
	 * 
	 *A downward-only version of Scheme's call with current continuation.
	 *
	 */
	exported function "callCC"("fun")
	/**
	 * 
	 * Report on the optional features which have been compiled into this
	 * build of \R{}.
	 *
	 */
	exported function "capabilities"("what"="")
	/**
	 * 
	 * Translate characters in character vectors, in particular from upper to
	 * lower case or vice versa.
	 *
	 */
	exported function "casefold"("x", "upper"="FALSE")
	/**
	 * 
	 * Outputs the objects, concatenating the representations.  \code{cat}
	 * performs much less conversion than \code{\link{print}}.
	 *
	 */
	exported function "cat"("...", "file"="", "sep"=" ", "fill"="FALSE", "labels"="", "append"="FALSE")
	/**
	 * 
	 * Take a sequence of vector, matrix or data-frame arguments and combine
	 * by \emph{c}olumns or \emph{r}ows, respectively.  These are generic
	 * functions with methods for other \R{} classes.
	 *
	 */
	exported function "cbind"("...", "deparse.level"="1")
	/**
	 * 
	 * Take a sequence of vector, matrix or data-frame arguments and combine
	 * by \emph{c}olumns or \emph{r}ows, respectively.  These are generic
	 * functions with methods for other \R{} classes.
	 *
	 */
	exported function "cbind.data.frame"("...", "deparse.level"="1")
	/**
	 * 
	 * \code{ceiling} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the smallest integers not less than the
	 * corresponding elements of \code{x}.
	 *
	 * \code{floor} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the largest integers not greater than the
	 * corresponding elements of \code{x}.
	 *
	 * \code{trunc} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the integers formed by truncating the values in
	 * \code{x} toward \code{0}.
	 *
	 * \code{round} rounds the values in its first argument to the specified
	 * number of decimal places (default 0).
	 *
	 * \code{signif} rounds the values in its first argument to the specified
	 * number of significant digits.
	 *
	 */
	exported primitive function "ceiling"("x")
	/**
	 * 
	 * Seeks a unique match of its first argument among the
	 * elements of its second.  If successful, it returns this element;
	 * otherwise, it performs an action specified by the third argument.
	 *
	 */
	exported function "char.expand"("input", "target", "nomatch"="stop(\"no match\")")
	/**
	 * 
	 * Create or test for objects of type \code{"character"}.
	 *
	 */
	exported function "character"("length"="0")
	/**
	 * 
	 * \code{charmatch} seeks matches for the elements of its first argument
	 * among those of its second.
	 *
	 */
	exported function "charmatch"("x", "table", "nomatch"="NA")
	/**
	 * 
	 * Conversion and manipulation of  objects of type \code{"raw"}.
	 *
	 */
	exported function "charToRaw"("x")
	/**
	 * 
	 * Translate characters in character vectors, in particular from upper to
	 * lower case or vice versa.
	 *
	 */
	exported function "chartr"("old", "new", "x")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "check_tzones"("...")
	/**
	 * 
	 * Warn about extraneous arguments in the \code{...} of its caller.  A
	 * utility to be used e.g., in S3 methods which need a formal \code{...}
	 * argument but do not make any use of it.  This helps catching user
	 * errors in calling the function in question (which is the caller of
	 * \code{chkDots()}.
	 *
	 */
	exported function "chkDots"("...", "which.call"="-1", "allowed"="character(0)")
	/**
	 * 
	 * Compute the Choleski factorization of a real symmetric
	 * positive-definite square matrix.
	 *
	 */
	exported function "chol"("x", "...")
	/**
	 * 
	 * Compute the Choleski factorization of a real symmetric
	 * positive-definite square matrix.
	 *
	 */
	exported function "chol.default"("x", "pivot"="FALSE", "LINPACK"="FALSE", "tol"="-1", "...")
	/**
	 * 
	 * Invert a symmetric, positive definite square matrix from its Choleski
	 * decomposition.  Equivalently, compute \eqn{{(X'X)^{-1}}{(X'X)^(-1)}}
	 * from the (\eqn{{R}} part) of the QR decomposition of \eqn{{X}}.
	 *
	 */
	exported function "chol2inv"("x", "size"="NCOL(x)", "LINPACK"="FALSE")
	/**
	 * 
	 * Special mathematical functions related to the beta and gamma
	 * functions.
	 *
	 */
	exported function "choose"("n", "k")
	/**
	 * 
	 * \R{} possesses a simple generic function mechanism which can be used for
	 * an object-oriented style of programming.  Method dispatch takes place
	 * based on the class of the first argument to the generic function.
	 *
	 */
	exported primitive function "class"("x")
	/**
	 * 
	 * \R{} possesses a simple generic function mechanism which can be used for
	 * an object-oriented style of programming.  Method dispatch takes place
	 * based on the class of the first argument to the generic function.
	 *
	 */
	exported primitive function "class<-"("x", "value")
	/**
	 * 
	 * Functions to push back text lines onto a \link{connection}, and to enquire
	 * how many lines are currently pushed back.
	 *
	 */
	exported function "clearPushBack"("connection")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "close"("con", "...")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "close.connection"("con", "type"="rw", "...")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "close.srcfile"("con", "...")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "close.srcfilealias"("con", "...")
	/**
	 * 
	 * Display aspects of \link{connections}.
	 *
	 */
	exported function "closeAllConnections"()
	/**
	 * 
	 * Returns a matrix of integers indicating their column number in a
	 * matrix-like object, or a factor of column labels.
	 *
	 */
	exported function "col"("x", "as.factor"="FALSE")
	/**
	 * 
	 * Form row and column sums and means for numeric arrays (or data frames).
	 *
	 */
	exported function "colMeans"("x", "na.rm"="FALSE", "dims"="1")
	/**
	 * 
	 * Retrieve or set the row or column names of a matrix-like object.
	 *
	 */
	exported function "colnames"("x", "do.NULL"="TRUE", "prefix"="col")
	/**
	 * 
	 * Retrieve or set the row or column names of a matrix-like object.
	 *
	 */
	exported function "colnames<-"("x", "value")
	/**
	 * 
	 * Form row and column sums and means for numeric arrays (or data frames).
	 *
	 */
	exported function "colSums"("x", "na.rm"="FALSE", "dims"="1")
	/**
	 * 
	 * Provides access to a copy of the command line arguments supplied when
	 * this \R{} session was invoked.
	 *
	 */
	exported function "commandArgs"("trailingOnly"="FALSE")
	/**
	 * 
	 * These functions set and query a \emph{comment}
	 * attribute for any \R{} objects.  This is typically useful for
	 * \code{\link{data.frame}}s or model fits.
	 *
	 * Contrary to other \code{\link{attributes}}, the \code{comment} is not
	 * printed (by \code{\link{print}} or \code{\link{print.default}}).
	 *
	 * Assigning \code{NULL} or a zero-length character vector removes the
	 * comment.
	 *
	 */
	exported function "comment"("x")
	/**
	 * 
	 * These functions set and query a \emph{comment}
	 * attribute for any \R{} objects.  This is typically useful for
	 * \code{\link{data.frame}}s or model fits.
	 *
	 * Contrary to other \code{\link{attributes}}, the \code{comment} is not
	 * printed (by \code{\link{print}} or \code{\link{print.default}}).
	 *
	 * Assigning \code{NULL} or a zero-length character vector removes the
	 * comment.
	 *
	 */
	exported function "comment<-"("x", "value")
	/**
	 * 
	 * Basic functions which support complex arithmetic in \R{}, in addition to
	 * the arithmetic operators \code{+}, \code{-}, \code{*}, \code{/}, and \code{^}.
	 *
	 */
	exported function "complex"("length.out"="0", "real"="numeric()", "imaginary"="numeric()", "modulus"="1", "argument"="0")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "computeRestarts"("cond"="")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "conditionCall"("c")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "conditionCall.condition"("c")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "conditionMessage"("c")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "conditionMessage.condition"("c")
	/**
	 * 
	 *   \code{conflicts} reports on objects that exist with the same name in
	 *   two or more places on the \code{\link{search}} path, usually because
	 *   an object in the user's workspace or a package is masking a system
	 *   object of the same name.  This helps discover unintentional masking.
	 *
	 */
	exported function "conflicts"("where"="search()", "detail"="FALSE")
	/**
	 * 
	 * Basic functions which support complex arithmetic in \R{}, in addition to
	 * the arithmetic operators \code{+}, \code{-}, \code{*}, \code{/}, and \code{^}.
	 *
	 */
	exported primitive function "Conj"("z")
	/**
	 * 
	 * The \R{} Who-is-who, describing who made significant contributions to
	 * the development of \R{}.
	 *
	 */
	exported function "contributors"()
	/**
	 * 
	 * These functions give the obvious trigonometric functions.  They
	 * respectively compute the cosine, sine, tangent, arc-cosine, arc-sine,
	 * arc-tangent, and the two-argument arc-tangent.
	 *
	 * \code{cospi(x)}, \code{sinpi(x)}, and \code{tanpi(x)}, compute
	 * \code{cos(pi*x)}, \code{sin(pi*x)}, and \code{tan(pi*x)}.
	 *
	 */
	exported primitive function "cos"("x")
	/**
	 * 
	 * These functions give the obvious hyperbolic functions.  They
	 * respectively compute the hyperbolic cosine, sine, tangent, and their
	 * inverses, arc-cosine, arc-sine, arc-tangent (or \sQuote{\emph{area cosine}},
	 * etc).
	 *
	 */
	exported primitive function "cosh"("x")
	/**
	 * 
	 * These functions give the obvious trigonometric functions.  They
	 * respectively compute the cosine, sine, tangent, arc-cosine, arc-sine,
	 * arc-tangent, and the two-argument arc-tangent.
	 *
	 * \code{cospi(x)}, \code{sinpi(x)}, and \code{tanpi(x)}, compute
	 * \code{cos(pi*x)}, \code{sin(pi*x)}, and \code{tan(pi*x)}.
	 *
	 */
	exported primitive function "cospi"("x")
	/**
	 * 
	 * Given matrices \code{x} and \code{y} as arguments, return a matrix
	 * cross-product.  This is formally equivalent to (but usually slightly
	 * faster than) the call \code{t(x) %*% y} (\code{crossprod}) or
	 * \code{x %*% t(y)} (\code{tcrossprod}).
	 *
	 */
	exported function "crossprod"("x", "y"="")
	/**
	 * 
	 * Report information on the C stack size and usage (if available).
	 *
	 */
	exported function "Cstack_info"()
	/**
	 * 
	 * Returns a vector whose elements are the cumulative sums, products,
	 * minima or maxima of the elements of the argument.
	 *
	 */
	exported primitive function "cummax"("x")
	/**
	 * 
	 * Returns a vector whose elements are the cumulative sums, products,
	 * minima or maxima of the elements of the argument.
	 *
	 */
	exported primitive function "cummin"("x")
	/**
	 * 
	 * Returns a vector whose elements are the cumulative sums, products,
	 * minima or maxima of the elements of the argument.
	 *
	 */
	exported primitive function "cumprod"("x")
	/**
	 * 
	 * Returns a vector whose elements are the cumulative sums, products,
	 * minima or maxima of the elements of the argument.
	 *
	 */
	exported primitive function "cumsum"("x")
	/**
	 * 
	 * Retrieve the headers for a URL for a supported protocol such as
	 * \code{http://}, \code{ftp://}, \code{https://} and \code{ftps://}.
	 * An optional function not supported on all platforms.
	 *
	 */
	exported function "curlGetHeaders"("url", "redirect"="TRUE", "verify"="TRUE")
	/**
	 * 
	 * \code{cut} divides the range of \code{x} into intervals
	 * and codes the values in \code{x} according to which
	 * interval they fall.  The leftmost interval corresponds to level one,
	 * the next leftmost to level two and so on.
	 *
	 */
	exported function "cut"("x", "...")
	/**
	 * 
	 * Method for \code{\link{cut}} applied to date-time objects.
	 *
	 */
	exported function "cut.Date"("x", "breaks", "labels"="", "start.on.monday"="TRUE", "right"="FALSE", "...")
	/**
	 * 
	 * \code{cut} divides the range of \code{x} into intervals
	 * and codes the values in \code{x} according to which
	 * interval they fall.  The leftmost interval corresponds to level one,
	 * the next leftmost to level two and so on.
	 *
	 */
	exported function "cut.default"("x", "breaks", "labels"="", "include.lowest"="FALSE", "right"="TRUE", "dig.lab"="3", "ordered_result"="FALSE", "...")
	/**
	 * 
	 * Method for \code{\link{cut}} applied to date-time objects.
	 *
	 */
	exported function "cut.POSIXt"("x", "breaks", "labels"="", "start.on.monday"="TRUE", "right"="FALSE", "...")
	/**
	 * 
	 * Determine the class of an arbitrary \R{} object.
	 *
	 */
	exported function "data.class"("x")
	/**
	 * 
	 * The function \code{data.frame()} creates data frames, tightly coupled
	 * collections of variables which share many of the properties of
	 * matrices and of lists, used as the fundamental data structure by most
	 * of \R{}'s modeling software.
	 *
	 */
	exported function "data.frame"("...", "row.names"="", "check.rows"="FALSE", "check.names"="TRUE", "fix.empty.names"="TRUE", "stringsAsFactors"="default.stringsAsFactors()")
	/**
	 * 
	 * Return the matrix obtained by converting all the variables in a data
	 * frame to numeric mode and then binding them together as the columns of
	 * a matrix.  Factors and ordered factors are replaced by their internal
	 * codes.
	 *
	 */
	exported function "data.matrix"("frame", "rownames.force"="NA")
	/**
	 * 
	 * Returns a character string of the current system date and time.
	 *
	 */
	exported function "date"()
	/**
	 * 
	 * Set, unset or query the debugging flag on a function.
	 * The \code{text} and \code{condition} arguments are the same as those
	 * that can be supplied via a call to \code{browser}. They can be retrieved
	 * by the user once the browser has been entered, and provide a mechanism to
	 * allow users to identify which breakpoint has been activated.
	 *
	 */
	exported function "debug"("fun", "text"="", "condition"="")
	/**
	 * 
	 * Set, unset or query the debugging flag on a function.
	 * The \code{text} and \code{condition} arguments are the same as those
	 * that can be supplied via a call to \code{browser}. They can be retrieved
	 * by the user once the browser has been entered, and provide a mechanism to
	 * allow users to identify which breakpoint has been activated.
	 *
	 */
	exported function "debuggingState"("on"="")
	/**
	 * 
	 * Set, unset or query the debugging flag on a function.
	 * The \code{text} and \code{condition} arguments are the same as those
	 * that can be supplied via a call to \code{browser}. They can be retrieved
	 * by the user once the browser has been entered, and provide a mechanism to
	 * allow users to identify which breakpoint has been activated.
	 *
	 */
	exported function "debugonce"("fun", "text"="", "condition"="")
	/**
	 * 
	 * The function \code{data.frame()} creates data frames, tightly coupled
	 * collections of variables which share many of the properties of
	 * matrices and of lists, used as the fundamental data structure by most
	 * of \R{}'s modeling software.
	 *
	 */
	exported function "default.stringsAsFactors"()
	/**
	 * 
	 * \code{delayedAssign} creates a \emph{promise} to evaluate the given
	 * expression if its value is requested.  This provides direct access
	 * to the \emph{lazy evaluation} mechanism used by \R{} for the evaluation
	 * of (interpreted) functions.
	 *
	 */
	exported function "delayedAssign"("x", "value", "eval.env"="parent.frame(1)", "assign.env"="parent.frame(1)")
	/**
	 * 
	 * Turn unevaluated expressions into character strings.
	 *
	 */
	exported function "deparse"("expr", "width.cutoff"="60", "backtick"="mode(expr) %in% c(\"call\", \"expression\", \"(\", \"function\")", "control"="c(\"keepInteger\", \"showAttributes\", \"keepNA\")", "nlines"="-1L")
	/**
	 * 
	 * \code{det} calculates the determinant of a matrix.  \code{determinant}
	 * is a generic function that returns separately the modulus of the determinant,
	 * optionally on the logarithm scale, and the sign of the determinant.
	 * 
	 */
	exported function "det"("x", "...")
	/**
	 * 
	 * Detach a database, i.e., remove it from the \code{\link{search}()}
	 * path of available \R{} objects.  Usually this is either a
	 * \code{\link{data.frame}} which has been \code{\link{attach}}ed or a
	 * package which was attached by \code{\link{library}}.
	 *
	 */
	exported function "detach"("name", "pos"="2", "unload"="FALSE", "character.only"="FALSE", "force"="FALSE")
	/**
	 * 
	 * \code{det} calculates the determinant of a matrix.  \code{determinant}
	 * is a generic function that returns separately the modulus of the determinant,
	 * optionally on the logarithm scale, and the sign of the determinant.
	 * 
	 */
	exported function "determinant"("x", "logarithm"="TRUE", "...")
	/**
	 * 
	 * \code{det} calculates the determinant of a matrix.  \code{determinant}
	 * is a generic function that returns separately the modulus of the determinant,
	 * optionally on the logarithm scale, and the sign of the determinant.
	 * 
	 */
	exported function "determinant.matrix"("x", "logarithm"="TRUE", "...")
	/**
	 * 
	 * Writes an ASCII text representation of an \R{} object to a file
	 * or connection, or uses one to recreate the object.
	 *
	 */
	exported function "dget"("file", "keep.source"="FALSE")
	/**
	 * 
	 * Extract or replace the diagonal of a matrix,
	 * or construct a diagonal matrix.
	 *
	 */
	exported function "diag"("x"="1", "nrow", "ncol")
	/**
	 * 
	 * Extract or replace the diagonal of a matrix,
	 * or construct a diagonal matrix.
	 *
	 */
	exported function "diag<-"("x", "value")
	/**
	 * 
	 * Returns suitably lagged and iterated differences.
	 *
	 */
	exported function "diff"("x", "...")
	/**
	 * 
	 * Returns suitably lagged and iterated differences.
	 *
	 */
	exported function "diff.Date"("x", "lag"="1", "differences"="1", "...")
	/**
	 * 
	 * Returns suitably lagged and iterated differences.
	 *
	 */
	exported function "diff.default"("x", "lag"="1", "differences"="1", "...")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "diff.difftime"("x", "...")
	/**
	 * 
	 * Returns suitably lagged and iterated differences.
	 *
	 */
	exported function "diff.POSIXt"("x", "lag"="1", "differences"="1", "...")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "difftime"("time1", "time2", "tz", "units"="c(\"auto\", \"secs\", \"mins\", \"hours\", \"days\", \"weeks\")")
	/**
	 * 
	 * Special mathematical functions related to the beta and gamma
	 * functions.
	 *
	 */
	exported primitive function "digamma"("x")
	/**
	 * 
	 * Retrieve or set the dimension of an object.
	 *
	 */
	exported primitive function "dim"("x")
	/**
	 * 
	 * Retrieve or set the dimension of an object.
	 *
	 */
	exported function "dim.data.frame"("x")
	/**
	 * 
	 * Retrieve or set the dimension of an object.
	 *
	 */
	exported primitive function "dim<-"("x", "value")
	/**
	 * 
	 * Retrieve or set the dimnames of an object.
	 *
	 */
	exported primitive function "dimnames"("x")
	/**
	 * 
	 * Retrieve or set the dimnames of an object.
	 *
	 */
	exported function "dimnames.data.frame"("x")
	/**
	 * 
	 * Retrieve or set the dimnames of an object.
	 *
	 */
	exported primitive function "dimnames<-"("x", "value")
	/**
	 * 
	 * Retrieve or set the dimnames of an object.
	 *
	 */
	exported function "dimnames<-.data.frame"("x", "value")
	/**
	 * 
	 * These functions produce a character vector of the names of files or
	 * directories in the named directory.
	 *
	 */
	exported function "dir"("path"=".", "pattern"="", "all.files"="FALSE", "full.names"="FALSE", "recursive"="FALSE", "ignore.case"="FALSE", "include.dirs"="FALSE", "no.."="FALSE")
	/**
	 * 
	 * These functions provide a low-level interface to the computer's
	 * file system.
	 *
	 */
	exported function "dir.create"("path", "showWarnings"="TRUE", "recursive"="FALSE", "mode"="0777")
	/**
	 * 
	 * These functions provide a low-level interface to the computer's
	 * file system.
	 *
	 */
	exported function "dir.exists"("paths")
	/**
	 * 
	 * \code{basename} removes all of the path up to and including the last
	 * path separator (if any).
	 *
	 * \code{dirname} returns the part of the \code{path} up to but
	 * excluding the last path separator, or \code{"."} if there is no path
	 * separator.
	 *
	 */
	exported function "dirname"("path")
	/**
	 * 
	 * \code{do.call} constructs and executes a function call from a name or
	 * a function and a list of arguments to be passed to it.
	 *
	 */
	exported function "do.call"("what", "args", "quote"="FALSE", "envir"="parent.frame()")
	/**
	 * 
	 * The \code{dontCheck} function is the same as \code{\link{identity}}, but 
	 * is interpreted by \command{R CMD check} code analysis as a directive
	 * to suppress checking of \code{x}.  Currently this is only used by
	 *\code{\link{checkFF}(registration = TRUE)}
	 * when checking the \code{.NAME} argument of foreign function calls.
	 *
	 */
	exported function "dontCheck"("x")
	/**
	 * 
	 * Create, coerce to or test for a double-precision vector.
	 *
	 */
	exported function "double"("length"="0")
	/**
	 * 
	 * Writes an ASCII text representation of an \R{} object to a file
	 * or connection, or uses one to recreate the object.
	 *
	 */
	exported function "dput"("x", "file"="", "control"="c(\"keepNA\", \"keepInteger\", \"showAttributes\")")
	/**
	 * 
	 * Single or double quote text by combining with appropriate single or
	 * double left and right quotation marks.
	 *
	 */
	exported function "dQuote"("x")
	/**
	 * 
	 * Delete the dimensions of an array which have only one level.
	 *
	 */
	exported function "drop"("x")
	/**
	 * 
	 * The function \code{droplevels} is used to drop unused levels from a factor or, more commonly, from factors in a data frame.
	 *
	 */
	exported function "droplevels"("x", "...")
	/**
	 * 
	 * The function \code{droplevels} is used to drop unused levels from a factor or, more commonly, from factors in a data frame.
	 *
	 */
	exported function "droplevels.data.frame"("x", "except"="", "...")
	/**
	 * 
	 * The function \code{droplevels} is used to drop unused levels from a factor or, more commonly, from factors in a data frame.
	 *
	 */
	exported function "droplevels.factor"("x", "...")
	/**
	 * 
	 * This function takes a vector of names of \R{} objects and produces
	 * text representations of the objects on a file or connection.
	 * A \code{dump} file can usually be \code{\link{source}}d into another
	 * \R{} session.
	 *
	 */
	exported function "dump"("list", "file"="dumpdata.R", "append"="FALSE", "control"="all", "envir"="parent.frame()", "evaluate"="TRUE")
	/**
	 * 
	 * \code{duplicated()} determines which elements of a vector or data frame are duplicates
	 * of elements with smaller subscripts, and returns a logical vector
	 * indicating which elements (rows) are duplicates.
	 *
	 * \code{anyDuplicated(.)} is a \dQuote{generalized} more efficient
	 * shortcut for \code{any(duplicated(.))}.
	 *
	 */
	exported function "duplicated"("x", "incomparables"="FALSE", "...")
	/**
	 * 
	 * \code{duplicated()} determines which elements of a vector or data frame are duplicates
	 * of elements with smaller subscripts, and returns a logical vector
	 * indicating which elements (rows) are duplicates.
	 *
	 * \code{anyDuplicated(.)} is a \dQuote{generalized} more efficient
	 * shortcut for \code{any(duplicated(.))}.
	 *
	 */
	exported function "duplicated.array"("x", "incomparables"="FALSE", "MARGIN"="1", "fromLast"="FALSE", "...")
	/**
	 * 
	 * \code{duplicated()} determines which elements of a vector or data frame are duplicates
	 * of elements with smaller subscripts, and returns a logical vector
	 * indicating which elements (rows) are duplicates.
	 *
	 * \code{anyDuplicated(.)} is a \dQuote{generalized} more efficient
	 * shortcut for \code{any(duplicated(.))}.
	 *
	 */
	exported function "duplicated.data.frame"("x", "incomparables"="FALSE", "fromLast"="FALSE", "...")
	/**
	 * 
	 * \code{duplicated()} determines which elements of a vector or data frame are duplicates
	 * of elements with smaller subscripts, and returns a logical vector
	 * indicating which elements (rows) are duplicates.
	 *
	 * \code{anyDuplicated(.)} is a \dQuote{generalized} more efficient
	 * shortcut for \code{any(duplicated(.))}.
	 *
	 */
	exported function "duplicated.default"("x", "incomparables"="FALSE", "fromLast"="FALSE", "nmax"="NA", "...")
	/**
	 * 
	 * \code{duplicated()} determines which elements of a vector or data frame are duplicates
	 * of elements with smaller subscripts, and returns a logical vector
	 * indicating which elements (rows) are duplicates.
	 *
	 * \code{anyDuplicated(.)} is a \dQuote{generalized} more efficient
	 * shortcut for \code{any(duplicated(.))}.
	 *
	 */
	exported function "duplicated.matrix"("x", "incomparables"="FALSE", "MARGIN"="1", "fromLast"="FALSE", "...")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "duplicated.numeric_version"("x", "incomparables"="FALSE", "...")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "duplicated.POSIXlt"("x", "incomparables"="FALSE", "...")
	/**
	 * 
	 * Load or unload DLLs (also known as shared objects), and test whether a
	 * C function or Fortran subroutine is available.
	 *
	 */
	exported function "dyn.load"("x", "local"="TRUE", "now"="TRUE", "...")
	/**
	 * 
	 * Load or unload DLLs (also known as shared objects), and test whether a
	 * C function or Fortran subroutine is available.
	 *
	 */
	exported function "dyn.unload"("x")
	/**
	 * 
	 * Search by name for an object (\code{get}) or zero or more objects
	 * (\code{mget}).
	 *
	 */
	exported function "dynGet"("x", "ifnotfound"="stop(gettextf(\"%s not found\", sQuote(x)), domain = NA)", "minframe"="1", "inherits"="FALSE")
	/**
	 * 
	 * \code{eapply} applies \code{FUN} to the named values from an
	 * \code{\link{environment}} and returns the results as a list.  The user
	 * can request that all named objects are used (normally names that begin
	 * with a dot are not).  The output is not sorted and no enclosing
	 * environments are searched.
	 *
	 * This is a \link{primitive} function.
	 *
	 */
	exported function "eapply"("env", "FUN", "...", "all.names"="FALSE", "USE.NAMES"="TRUE")
	/**
	 * 
	 * Computes eigenvalues and eigenvectors of numeric (double, integer,
	 * logical) or complex matrices.
	 *
	 */
	exported function "eigen"("x", "symmetric", "only.values"="FALSE", "EISPACK"="FALSE")
	/**
	 * 
	 * Get, set, test for and create environments.
	 *
	 */
	exported primitive function "emptyenv"()
	/**
	 * 
	 * Read or set the declared encodings for a character vector.
	 *
	 */
	exported primitive function "enc2native"("x")
	/**
	 * 
	 * Read or set the declared encodings for a character vector.
	 *
	 */
	exported primitive function "enc2utf8"("x")
	/**
	 * 
	 * \code{encodeString} escapes the strings in a character vector in the
	 * same way \code{print.default} does, and optionally fits the encoded
	 * strings within a field width.
	 *
	 */
	exported function "encodeString"("x", "width"="0", "quote"="", "na.encode"="TRUE", "justify"="c(\"left\", \"right\", \"centre\", \"none\")")
	/**
	 * 
	 * Read or set the declared encodings for a character vector.
	 *
	 */
	exported function "Encoding"("x")
	/**
	 * 
	 * Read or set the declared encodings for a character vector.
	 *
	 */
	exported function "Encoding<-"("x", "value")
	/**
	 * 
	 * Determines if entries of \code{x} start or end with string (entries of)
	 * \code{prefix} or \code{suffix} respectively, where strings are
	 * recycled to common lengths.
	 *
	 * \code{startsWith()} is equivalent to but much faster than
	 * \preformatted{substring(x, 1, nchar(prefix)) == prefix}
	 * or also \preformatted{grepl("^<prefix>", x)} where \code{prefix} is
	 * not to contain special regular expression characters.
	 *
	 */
	exported function "endsWith"("x", "suffix")
	/**
	 * 
	 * \code{substitute} returns the parse tree for the (unevaluated)
	 * expression \code{expr}, substituting any variables bound in
	 * \code{env}.
	 *
	 * \code{quote} simply returns its argument. The argument is not evaluated
	 * and can be any R expression.
	 *
	 * \code{enquote} is a simple one-line utility which transforms a call of
	 * the form \code{Foo(....)} into the call \code{quote(Foo(....))}.  This
	 * is typically used to protect a \code{\link{call}} from early evaluation.
	 *
	 */
	exported function "enquote"("cl")
	/**
	 * 
	 * Get, set, test for and create environments.
	 *
	 */
	exported function "env.profile"("env")
	/**
	 * 
	 * Get, set, test for and create environments.
	 *
	 */
	exported function "environment"("fun"="")
	/**
	 * 
	 * Get, set, test for and create environments.
	 *
	 */
	exported primitive function "environment<-"("fun", "value")
	/**
	 * 
	 * These functions represent an interface for adjustments
	 * to environments and bindings within environments.  They allow for
	 * locking environments as well as individual bindings, and for linking
	 * a variable to a function.
	 *
	 */
	exported function "environmentIsLocked"("env")
	/**
	 * 
	 * Get, set, test for and create environments.
	 *
	 */
	exported function "environmentName"("env")
	/**
	 * 
	 * Evaluate an \R{} expression in a specified environment.
	 *
	 */
	exported function "eval"("expr", "envir"="parent.frame()", "enclos"="if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()")
	/**
	 * 
	 * Evaluate an \R{} expression in a specified environment.
	 *
	 */
	exported function "eval.parent"("expr", "n"="1")
	/**
	 * 
	 * Evaluate an \R{} expression in a specified environment.
	 *
	 */
	exported function "evalq"("expr", "envir"="parent.frame()", "enclos"="if (is.list(envir) || is.pairlist(envir)) parent.frame() else baseenv()")
	/**
	 * 
	 * Look for an \R{} object of the given name and possibly return it
	 *
	 */
	exported function "exists"("x", "where"="-1", "envir"="if (missing(frame)) as.environment(where) else sys.frame(frame)", "frame", "mode"="any", "inherits"="TRUE")
	/**
	 * 
	 * \code{log} computes logarithms, by default natural logarithms,
	 * \code{log10} computes common (i.e., base 10) logarithms, and
	 * \code{log2} computes binary (i.e., base 2) logarithms.
	 * The general form \code{log(x, base)} computes logarithms with base
	 * \code{base}.
	 *
	 * \code{log1p(x)} computes \eqn{{\log(1+x)}{log(1+x)}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 * \code{exp} computes the exponential function.
	 *
	 * \code{expm1(x)} computes \eqn{{\exp(x) - 1}{exp(x) - 1}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 */
	exported primitive function "exp"("x")
	/**
	 * 
	 * Create a data frame from all combinations of the supplied vectors or
	 * factors.  See the description of the return value for precise details of
	 * the way this is done.
	 *
	 */
	exported function "expand.grid"("...", "KEEP.OUT.ATTRS"="TRUE", "stringsAsFactors"="TRUE")
	/**
	 * 
	 * \code{log} computes logarithms, by default natural logarithms,
	 * \code{log10} computes common (i.e., base 10) logarithms, and
	 * \code{log2} computes binary (i.e., base 2) logarithms.
	 * The general form \code{log(x, base)} computes logarithms with base
	 * \code{base}.
	 *
	 * \code{log1p(x)} computes \eqn{{\log(1+x)}{log(1+x)}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 * \code{exp} computes the exponential function.
	 *
	 * \code{expm1(x)} computes \eqn{{\exp(x) - 1}{exp(x) - 1}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 */
	exported primitive function "expm1"("x")
	/**
	 * 
	 * Creates or tests for objects of mode \code{"expression"}.
	 *
	 */
	exported primitive function "expression"("...")
	/**
	 * 
	 * Report versions of (external) third-party software used.
	 *
	 */
	exported function "extSoftVersion"()
	/**
	 * 
	 * Create or test for objects of type \code{"logical"}, and the basic
	 * logical constants.
	 *
	 */
	exported var "F"
	/**
	 * 
	 * The function \code{factor} is used to encode a vector as a factor (the
	 * terms \sQuote{category} and \sQuote{enumerated type} are also used for
	 * factors).  If argument \code{ordered} is \code{TRUE}, the factor
	 * levels are assumed to be ordered.  For compatibility with S there is
	 * also a function \code{ordered}.
	 *
	 * \code{is.factor}, \code{is.ordered}, \code{as.factor} and \code{as.ordered}
	 * are the membership and coercion functions for these classes.
	 *
	 */
	exported function "factor"("x"="character()", "levels", "labels", "exclude"="NA", "ordered"="is.ordered(x)", "nmax"="NA")
	/**
	 * 
	 * Special mathematical functions related to the beta and gamma
	 * functions.
	 *
	 */
	exported function "factorial"("x")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "fifo"("description", "open"="", "blocking"="FALSE", "encoding"="getOption(\"encoding\")")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "file"("description"="", "open"="", "blocking"="TRUE", "encoding"="getOption(\"encoding\")", "raw"="FALSE", "method"="getOption(\"url.method\", \"default\")")
	/**
	 * 
	 * Utility function to access information about files on the user's
	 * file systems.
	 *
	 */
	exported function "file.access"("names", "mode"="0")
	/**
	 * 
	 * These functions provide a low-level interface to the computer's
	 * file system.
	 *
	 */
	exported function "file.append"("file1", "file2")
	/**
	 * 
	 *Choose a file interactively.
	 *
	 */
	exported function "file.choose"("new"="FALSE")
	/**
	 * 
	 * These functions provide a low-level interface to the computer's
	 * file system.
	 *
	 */
	exported function "file.copy"("from", "to", "overwrite", "recursive"="FALSE", "copy.mode"="TRUE", "copy.date"="FALSE")
	/**
	 * 
	 * These functions provide a low-level interface to the computer's
	 * file system.
	 *
	 */
	exported function "file.create"("...", "showWarnings"="TRUE")
	/**
	 * 
	 * These functions provide a low-level interface to the computer's
	 * file system.
	 *
	 */
	exported function "file.exists"("...")
	/**
	 * 
	 * Utility function to extract information about files on the user's
	 * file systems.
	 *
	 */
	exported function "file.info"("...", "extra_cols"="TRUE")
	/**
	 * 
	 * These functions provide a low-level interface to the computer's
	 * file system.
	 *
	 */
	exported function "file.link"("from", "to")
	/**
	 * 
	 * Utility function to extract information about files on the user's
	 * file systems.
	 *
	 */
	exported function "file.mode"("...")
	/**
	 * 
	 * Utility function to extract information about files on the user's
	 * file systems.
	 *
	 */
	exported function "file.mtime"("...")
	/**
	 * 
	 * Construct the path to a file from components in a platform-independent
	 * way.
	 *
	 */
	exported function "file.path"("...", "fsep"=".Platform$file.sep")
	/**
	 * 
	 * These functions provide a low-level interface to the computer's
	 * file system.
	 *
	 */
	exported function "file.remove"("...")
	/**
	 * 
	 * These functions provide a low-level interface to the computer's
	 * file system.
	 *
	 */
	exported function "file.rename"("from", "to")
	/**
	 * Display one or more (plain) text files, in a platform
	 * specific way, typically via a \sQuote{pager}.
	 *
	 */
	exported function "file.show"("...", "header"="rep(\"\", nfiles)", "title"="R Information", "delete.file"="FALSE", "pager"="getOption(\"pager\")", "encoding"="")
	/**
	 * 
	 * Utility function to extract information about files on the user's
	 * file systems.
	 *
	 */
	exported function "file.size"("...")
	/**
	 * 
	 * These functions provide a low-level interface to the computer's
	 * file system.
	 *
	 */
	exported function "file.symlink"("from", "to")
	/**
	 * 
	 * \code{Reduce} uses a binary function to successively combine the
	 * elements of a given vector and a possibly given initial value.
	 * \code{Filter} extracts the elements of a vector for which a predicate
	 * (logical) function gives true.  \code{Find} and \code{Position} give
	 * the first or last such element and its position in the vector,
	 * respectively.  \code{Map} applies a function to the corresponding
	 * elements of given vectors.  \code{Negate} creates the negation of a
	 * given function.
	 *
	 */
	exported function "Filter"("f", "x")
	/**
	 * 
	 * \code{Reduce} uses a binary function to successively combine the
	 * elements of a given vector and a possibly given initial value.
	 * \code{Filter} extracts the elements of a vector for which a predicate
	 * (logical) function gives true.  \code{Find} and \code{Position} give
	 * the first or last such element and its position in the vector,
	 * respectively.  \code{Map} applies a function to the corresponding
	 * elements of given vectors.  \code{Negate} creates the negation of a
	 * given function.
	 *
	 */
	exported function "Find"("f", "x", "right"="FALSE", "nomatch"="")
	/**
	 * 
	 * Find the paths to one or more packages.
	 *
	 */
	exported function "find.package"("package"="", "lib.loc"="", "quiet"="FALSE", "verbose"="getOption(\"verbose\")")
	/**
	 * 
	 * Given a vector of non-decreasing breakpoints in \code{vec}, find the
	 * interval containing each element of \code{x}; i.e., if
	 * \code{i <- findInterval(x,v)}, for each index \code{j} in \code{x}
	 * \eqn{{v_{i_j} \le x_j < v_{i_j + 1}}{v[i[j]] \le x[j] < v[i[j] + 1]}}
	 * where \eqn{{v_0 := -\infty}{v[0] := - Inf}},
	 * \eqn{{v_{N+1} := +\infty}{v[N+1] := + Inf}}, and \code{N <- length(v)}.
	 * At the two boundaries, the returned index may differ by 1, depending
	 * on the optional arguments \code{rightmost.closed} and \code{all.inside}.
	 *
	 */
	exported function "findInterval"("x", "vec", "rightmost.closed"="FALSE", "all.inside"="FALSE", "left.open"="FALSE")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function "findPackageEnv"("info")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "findRestart"("name", "cond"="")
	/**
	 * 
	 * \code{ceiling} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the smallest integers not less than the
	 * corresponding elements of \code{x}.
	 *
	 * \code{floor} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the largest integers not greater than the
	 * corresponding elements of \code{x}.
	 *
	 * \code{trunc} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the integers formed by truncating the values in
	 * \code{x} toward \code{0}.
	 *
	 * \code{round} rounds the values in its first argument to the specified
	 * number of decimal places (default 0).
	 *
	 * \code{signif} rounds the values in its first argument to the specified
	 * number of significant digits.
	 *
	 */
	exported primitive function "floor"("x")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "flush"("con")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "flush.connection"("con")
	/**
	 * 
	 * These are the basic control-flow constructs of the \R{} language.  They
	 * function in much the same way as control statements in any Algol-like
	 * language.  They are all \link{reserved} words.
	 *
	 */
	exported primitive function "for"("NULL")
	/**
	 * 
	 * Forces the evaluation of a function argument.
	 *
	 */
	exported function "force"("x")
	/**
	 * 
	 * Call a function with a specified number of leading arguments forced
	 * before the call if the function is a closure.
	 *
	 */
	exported primitive function "forceAndCall"("n", "FUN", "...")
	/**
	 * 
	 * Get or set the formal arguments of a \code{\link{function}}.
	 *
	 */
	exported function "formals"("fun"="sys.function(sys.parent())")
	/**
	 * 
	 * Get or set the formal arguments of a \code{\link{function}}.
	 *
	 */
	exported function "formals<-"("fun", "envir"="environment(fun)", "value")
	/**
	 * 
	 * Format an \R{} object for pretty printing.
	 *
	 */
	exported function "format"("x", "...")
	/**
	 * 
	 * Format an \R{} object for pretty printing.
	 *
	 */
	exported function "format.AsIs"("x", "width"="12", "...")
	/**
	 * 
	 * Format an \R{} object for pretty printing.
	 *
	 */
	exported function "format.data.frame"("x", "...", "justify"="none")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "format.Date"("x", "...")
	/**
	 * 
	 * Format an \R{} object for pretty printing.
	 *
	 */
	exported function "format.default"("x", "trim"="FALSE", "digits"="", "nsmall"="0", "justify"="c(\"left\", \"right\", \"centre\", \"none\")", "width"="", "na.encode"="TRUE", "scientific"="NA", "big.mark"="", "big.interval"="3", "small.mark"="", "small.interval"="5", "decimal.mark"="getOption(\"OutDec\")", "zero.print"="", "drop0trailing"="FALSE", "...")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "format.difftime"("x", "...")
	/**
	 * 
	 * Format an \R{} object for pretty printing.
	 *
	 */
	exported function "format.factor"("x", "...")
	/**
	 * 
	 * Convert or print integers in hexadecimal format, with as many digits
	 * as are needed to display the largest, using leading zeroes as
	 * necessary.
	 *
	 */
	exported function "format.hexmode"("x", "width"="", "upper.case"="FALSE", "...")
	/**
	 * 
	 * Information is returned on how \code{\link{format}(x, digits, nsmall)}
	 * would be formatted.
	 *
	 */
	exported function "format.info"("x", "digits"="", "nsmall"="0")
	/**
	 * 
	 * \code{library} and \code{require} load and attach add-on packages.
	 *
	 */
	exported function "format.libraryIQR"("x", "...")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "format.numeric_version"("x", "...")
	/**
	 * 
	 * Convert or print integers in octal format, with as many digits as are
	 * needed to display the largest, using leading zeroes as necessary.
	 *
	 */
	exported function "format.octmode"("x", "width"="", "...")
	/**
	 * 
	 * \code{library} and \code{require} load and attach add-on packages.
	 *
	 */
	exported function "format.packageInfo"("x", "...")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * classes \code{"POSIXlt"} and \code{"POSIXct"} representing calendar
	 * dates and times.
	 *
	 */
	exported function "format.POSIXct"("x", "format"="", "tz"="", "usetz"="FALSE", "...")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * classes \code{"POSIXlt"} and \code{"POSIXct"} representing calendar
	 * dates and times.
	 *
	 */
	exported function "format.POSIXlt"("x", "format"="", "usetz"="FALSE", "...")
	/**
	 * 
	 * \code{format.pval} is intended for formatting p-values.
	 *
	 */
	exported function "format.pval"("pv", "digits"="max(1L, getOption(\"digits\") - 2L)", "eps"=".Machine$double.eps", "na.form"="NA", "...")
	/**
	 * 
	 * \code{summary} is a generic function used to produce result summaries
	 * of the results of various model fitting functions.  The function
	 * invokes particular \code{\link{methods}} which depend on the
	 * \code{\link{class}} of the first argument.
	 *
	 */
	exported function "format.summaryDefault"("x", "...")
	/**
	 * 
	 * Formatting numbers individually and flexibly, \code{formatC()} using
	 * \code{C} style format specifications.
	 *
	 * \code{prettyNum()} is used for \dQuote{prettifying} (possibly
	 * formatted) numbers, also in \code{\link{format.default}}.
	 *
	 * \code{.format.zeros()}, an auxiliary function of \code{prettyNum()}
	 * re-formats the zeros in a vector \code{x} of formatted numbers.
	 *
	 */
	exported function "formatC"("x", "digits"="", "width"="", "format"="", "flag"="", "mode"="", "big.mark"="", "big.interval"="3", "small.mark"="", "small.interval"="5", "decimal.mark"="getOption(\"OutDec\")", "preserve.width"="individual", "zero.print"="", "drop0trailing"="FALSE")
	/**
	 * Format vectors of items and their descriptions as 2-column
	 * tables or LaTeX-style description lists.
	 *
	 */
	exported function "formatDL"("x", "y", "style"="c(\"table\", \"list\")", "width"="0.9 * getOption(\"width\")", "indent"="")
	/**
	 * 
	 * Solves a triangular system of linear equations.
	 *
	 */
	exported function "forwardsolve"("l", "x", "k"="ncol(l)", "upper.tri"="FALSE", "transpose"="FALSE")
	/**
	 * 
	 * These functions provide the base mechanisms for defining
	 * new functions in the \R{} language.
	 *
	 */
	exported primitive function "function"("NULL")
	/**
	 * 
	 * Special mathematical functions related to the beta and gamma
	 * functions.
	 *
	 */
	exported primitive function "gamma"("x")
	/**
	 * 
	 * A call of \code{gc} causes a garbage collection to take place.
	 * \code{gcinfo} sets a flag so that
	 * automatic collection is either silent (\code{verbose = FALSE}) or
	 * prints memory usage statistics (\code{verbose = TRUE}).
	 *
	 */
	exported function "gc"("verbose"="getOption(\"verbose\")", "reset"="FALSE")
	/**
	 * 
	 * This function reports the time spent in garbage collection so far in
	 * the \R{} session while GC timing was enabled.
	 *
	 */
	exported primitive function "gc.time"("on" = "TRUE")
	/**
	 * 
	 * A call of \code{gc} causes a garbage collection to take place.
	 * \code{gcinfo} sets a flag so that
	 * automatic collection is either silent (\code{verbose = FALSE}) or
	 * prints memory usage statistics (\code{verbose = TRUE}).
	 *
	 */
	exported function "gcinfo"("verbose")
	/**
	 * 
	 * Provokes garbage collection on (nearly) every memory allocation.
	 * Intended to ferret out memory protection bugs.  Also makes \R{} run
	 * \emph{very} slowly, unfortunately.
	 *
	 */
	exported function "gctorture"("on"="TRUE")
	/**
	 * 
	 * Provokes garbage collection on (nearly) every memory allocation.
	 * Intended to ferret out memory protection bugs.  Also makes \R{} run
	 * \emph{very} slowly, unfortunately.
	 *
	 */
	exported function "gctorture2"("step", "wait", "inhibit_release"="FALSE")
	/**
	 * 
	 * Search by name for an object (\code{get}) or zero or more objects
	 * (\code{mget}).
	 *
	 */
	exported function "get"("x", "pos"="-1L", "envir"="as.environment(pos)", "mode"="any", "inherits"="TRUE")
	/**
	 * 
	 * Look for an \R{} object of the given name and possibly return it
	 *
	 */
	exported function "get0"("x", "envir"="pos.to.env(-1L)", "mode"="any", "inherits"="TRUE", "ifnotfound"="")
	/**
	 * 
	 * Display aspects of \link{connections}.
	 *
	 */
	exported function "getAllConnections"()
	/**
	 * 
	 * This is an internal function that is called from \R{}'s C code to
	 * determine the enclosing namespace of a
	 * \code{.C}/\code{.Call}/\code{.Fortran}/\code{.External} call which has
	 * no \code{PACKAGE} argument. If the call has been made from a function
	 * within a namespace, then we can find the DLL associated with that
	 * namespace.  The purpose of this is to avoid having to use the
	 * \code{PACKAGE} argument in these native calls and so better support
	 * versions of packages.
	 *
	 * This is an internal function that may be migrated to internal C
	 * code in the future and so should not be used by \R{} programmers.
	 *
	 */
	exported function "getCallingDLL"("f"="sys.function(-1)", "doStop"="FALSE")
	/**
	 * 
	 * This is an internal function that is called from \R{}'s C code to
	 * determine the enclosing namespace of a
	 * \code{.C}/\code{.Call}/\code{.Fortran}/\code{.External} call which has
	 * no \code{PACKAGE} argument. If the call has been made from a function
	 * within a namespace, then we can find the DLL associated with that
	 * namespace.  The purpose of this is to avoid having to use the
	 * \code{PACKAGE} argument in these native calls and so better support
	 * versions of packages.
	 *
	 * This is an internal function that may be migrated to internal C
	 * code in the future and so should not be used by \R{} programmers.
	 *
	 */
	exported function "getCallingDLLe"("e")
	/**
	 * 
	 * Display aspects of \link{connections}.
	 *
	 */
	exported function "getConnection"("what")
	/**
	 * 
	 * This function allows us to query the set of routines
	 * in a DLL that are registered with R to enhance
	 * dynamic lookup, error handling when calling native routines,
	 * and potentially security in the future.
	 * This function provides a description of each of the
	 * registered routines in the DLL for the different interfaces,
	 * i.e.\ifelse{latex}{\out{~}}{ }\ifelse{{latex}{\out{~}}{ }}LIST{}\code{\link{.C}}, \code{\link{.Call}}, \code{\link{.Fortran}}
	 * and \code{\link{.External}}.
	 *
	 */
	exported function "getDLLRegisteredRoutines"("dll", "addNames"="TRUE")
	/**
	 * 
	 * This function allows us to query the set of routines
	 * in a DLL that are registered with R to enhance
	 * dynamic lookup, error handling when calling native routines,
	 * and potentially security in the future.
	 * This function provides a description of each of the
	 * registered routines in the DLL for the different interfaces,
	 * i.e.\ifelse{latex}{\out{~}}{ }\ifelse{{latex}{\out{~}}{ }}LIST{}\code{\link{.C}}, \code{\link{.Call}}, \code{\link{.Fortran}}
	 * and \code{\link{.External}}.
	 *
	 */
	exported function "getDLLRegisteredRoutines.character"("dll", "addNames"="TRUE")
	/**
	 * 
	 * This function allows us to query the set of routines
	 * in a DLL that are registered with R to enhance
	 * dynamic lookup, error handling when calling native routines,
	 * and potentially security in the future.
	 * This function provides a description of each of the
	 * registered routines in the DLL for the different interfaces,
	 * i.e.\ifelse{latex}{\out{~}}{ }\ifelse{{latex}{\out{~}}{ }}LIST{}\code{\link{.C}}, \code{\link{.Call}}, \code{\link{.Fortran}}
	 * and \code{\link{.External}}.
	 *
	 */
	exported function "getDLLRegisteredRoutines.DLLInfo"("dll", "addNames"="TRUE")
	/**
	 * 
	 * Operators acting on vectors, matrices, arrays and lists to extract or
	 * replace parts.
	 *
	 */
	exported function "getElement"("object", "name")
	/**
	 * 
	 * \code{stop} stops execution of the current expression and executes
	 * an error action.
	 *
	 * \code{geterrmessage} gives the last error message.
	 *
	 */
	exported function "geterrmessage"()
	/**
	 * 
	 * Internal functions to support reflection on namespace objects.
	 *
	 */
	exported function "getExportedValue"("ns", "name")
	/**
	 * 
	 * These functions allow users to set actions to be taken before packages
	 * are attached/detached and namespaces are (un)loaded.
	 *
	 */
	exported function "getHook"("hookName")
	/**
	 * 
	 * This function provides a way to get a list of all the DLLs (see
	 * \code{\link{dyn.load}}) that are currently loaded in the \R{} session.
	 *
	 */
	exported function "getLoadedDLLs"()
	/**
	 * 
	 * Internal functions to support reflection on namespace objects.
	 *
	 */
	exported function "getNamespace"("name")
	/**
	 * 
	 * Internal functions to support reflection on namespace objects.
	 *
	 */
	exported function "getNamespaceExports"("ns")
	/**
	 * 
	 * Internal functions to support reflection on namespace objects.
	 *
	 */
	exported function "getNamespaceImports"("ns")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "getNamespaceInfo"("ns", "which")
	/**
	 * 
	 * Internal functions to support reflection on namespace objects.
	 *
	 */
	exported function "getNamespaceName"("ns")
	/**
	 * 
	 * Internal functions to support reflection on namespace objects.
	 *
	 */
	exported function "getNamespaceUsers"("ns")
	/**
	 * 
	 * Internal functions to support reflection on namespace objects.
	 *
	 */
	exported function "getNamespaceVersion"("ns")
	/**
	 * 
	 * This finds and returns a description of one or more dynamically loaded
	 * or \sQuote{exported} built-in native symbols.  For each name, it
	 * returns information about the name of the symbol, the library in which
	 * it is located and, if available, the number of arguments it expects
	 * and by which interface it should be called (i.e \code{\link{.Call}},
	 * \code{\link{.C}}, \code{\link{.Fortran}}, or
	 * \code{\link{.External}}). Additionally, it returns the address of the
	 * symbol and this can be passed to other C routines.  Specifically, this
	 * provides a way to explicitly share symbols between different
	 * dynamically loaded package libraries.  Also, it provides a way to
	 * query where symbols were resolved, and aids diagnosing strange
	 * behavior associated with dynamic resolution.
	 *
	 */
	exported function "getNativeSymbolInfo"("name", "PACKAGE", "unlist"="TRUE", "withRegistrationInfo"="FALSE")
	/**
	 * 
	 * Allow the user to set and examine a variety of global \emph{options}
	 * which affect the way in which \R{} computes and displays its results.
	 *
	 */
	exported function "getOption"("x", "default"="")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "getRversion"()
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "getSrcLines"("srcfile", "first", "last")
	/**
	 * 
	 * This provides a way to get the names (or identifiers)
	 * for the currently registered task callbacks
	 * that are invoked at the conclusion of each top-level task.
	 * These identifiers can be used to remove a callback.
	 *
	 */
	exported function "getTaskCallbackNames"()
	/**
	 * 
	 * If Native Language Support was enabled in this build of \R{}, attempt to
	 * translate character vectors or set where the translations are to be found.
	 *
	 */
	exported function "gettext"("...", "domain"="")
	/**
	 * 
	 * A wrapper for the C function \code{sprintf}, that returns a character
	 * vector containing a formatted combination of text and variable values.
	 *
	 */
	exported function "gettextf"("fmt", "...", "domain"="")
	/**
	 * 
	 * \code{getwd} returns an absolute filepath representing the current
	 * working directory of the \R{} process; \code{setwd(dir)} is used to set
	 * the working directory to \code{dir}.
	 *
	 */
	exported function "getwd"()
	/**
	 * 
	 * Generate factors by specifying the pattern of their levels.
	 *
	 */
	exported function "gl"("n", "k", "length"="n * k", "labels"="seq_len(n)", "ordered"="FALSE")
	/**
	 * 
	 * Get, set, test for and create environments.
	 *
	 */
	exported primitive function "globalenv"()
	/**
	 * 
	 * \code{grep}, \code{grepl}, \code{regexpr}, \code{gregexpr} and
	 * \code{regexec} search for matches to argument \code{pattern} within
	 * each element of a character vector: they differ in the format of and
	 * amount of detail in the results.
	 *
	 * \code{sub} and \code{gsub} perform replacement of the first and all
	 * matches respectively.
	 *
	 */
	exported function "gregexpr"("pattern", "text", "ignore.case"="FALSE", "perl"="FALSE", "fixed"="FALSE", "useBytes"="FALSE")
	/**
	 * 
	 * \code{grep}, \code{grepl}, \code{regexpr}, \code{gregexpr} and
	 * \code{regexec} search for matches to argument \code{pattern} within
	 * each element of a character vector: they differ in the format of and
	 * amount of detail in the results.
	 *
	 * \code{sub} and \code{gsub} perform replacement of the first and all
	 * matches respectively.
	 *
	 */
	exported function "grep"("pattern", "x", "ignore.case"="FALSE", "perl"="FALSE", "value"="FALSE", "fixed"="FALSE", "useBytes"="FALSE", "invert"="FALSE")
	/**
	 * 
	 * \code{grep}, \code{grepl}, \code{regexpr}, \code{gregexpr} and
	 * \code{regexec} search for matches to argument \code{pattern} within
	 * each element of a character vector: they differ in the format of and
	 * amount of detail in the results.
	 *
	 * \code{sub} and \code{gsub} perform replacement of the first and all
	 * matches respectively.
	 *
	 */
	exported function "grepl"("pattern", "x", "ignore.case"="FALSE", "perl"="FALSE", "fixed"="FALSE", "useBytes"="FALSE")
	/**
	 * 
	 * \code{grepRaw} searches for substring \code{pattern} matches within a
	 * raw vector \code{x}.
	 *
	 */
	exported function "grepRaw"("pattern", "x", "offset"="1", "ignore.case"="FALSE", "value"="FALSE", "fixed"="FALSE", "all"="FALSE", "invert"="FALSE")
	/**
	 * 
	 * \code{grouping} returns a permutation which rearranges its first
	 * argument such that identical values are adjacent to each other.  Also
	 * returned as attributes are the group-wise partitioning and the maximum
	 * group size.
	 *
	 */
	exported function "grouping"("...")
	/**
	 * 
	 * \code{grep}, \code{grepl}, \code{regexpr}, \code{gregexpr} and
	 * \code{regexec} search for matches to argument \code{pattern} within
	 * each element of a character vector: they differ in the format of and
	 * amount of detail in the results.
	 *
	 * \code{sub} and \code{gsub} perform replacement of the first and all
	 * matches respectively.
	 *
	 */
	exported function "gsub"("pattern", "replacement", "x", "ignore.case"="FALSE", "perl"="FALSE", "fixed"="FALSE", "useBytes"="FALSE")
	/**
	 * 
	 * \code{gzcon} provides a modified connection that wraps an existing
	 * connection, and decompresses reads or compresses writes through that
	 * connection.  Standard \code{gzip} headers are assumed.
	 *
	 */
	exported function "gzcon"("con", "level"="6", "allowNonCompressed"="TRUE", "text"="FALSE")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "gzfile"("description", "open"="", "encoding"="getOption(\"encoding\")", "compression"="6")
	/**
	 * 
	 * Change the class of an object to indicate that it should be treated
	 * \sQuote{as is}.
	 *
	 */
	exported function "I"("x")
	/**
	 * 
	 * This uses system facilities to convert a character vector between
	 * encodings: the \sQuote{i} stands for \sQuote{internationalization}.
	 *
	 */
	exported function "iconv"("x", "from"="", "to"="", "sub"="NA", "mark"="TRUE", "toRaw"="FALSE")
	/**
	 * 
	 * This uses system facilities to convert a character vector between
	 * encodings: the \sQuote{i} stands for \sQuote{internationalization}.
	 *
	 */
	exported function "iconvlist"()
	/**
	 * 
	 * Controls the way collation is done by ICU (an optional part of the \R{}
	 * build).
	 *
	 */
	exported function "icuGetCollate"("type"="c(\"actual\", \"valid\")")
	/**
	 * 
	 * Controls the way collation is done by ICU (an optional part of the \R{}
	 * build).
	 *
	 */
	exported function "icuSetCollate"("...")
	/**
	 * 
	 * The safe and reliable way to test two objects for being
	 * \emph{exactly} equal.  It returns \code{TRUE} in this case,
	 * \code{FALSE} in every other case.
	 *
	 */
	exported function "identical"("x", "y", "num.eq"="TRUE", "single.NA"="TRUE", "attrib.as.set"="TRUE", "ignore.bytecode"="TRUE", "ignore.environment"="FALSE")
	/**
	 * 
	 * A trivial identity function returning its argument.
	 *
	 */
	exported function "identity"("x")
	/**
	 * 
	 * These are the basic control-flow constructs of the \R{} language.  They
	 * function in much the same way as control statements in any Algol-like
	 * language.  They are all \link{reserved} words.
	 *
	 */
	exported primitive function "if"("NULL")
	/**
	 * 
	 * \code{ifelse} returns a value with the same shape as
	 * \code{test} which is filled with elements selected
	 * from either \code{yes} or \code{no}
	 * depending on whether the element of \code{test}
	 * is \code{TRUE} or \code{FALSE}.
	 *
	 */
	exported function "ifelse"("test", "yes", "no")
	/**
	 * 
	 * Basic functions which support complex arithmetic in \R{}, in addition to
	 * the arithmetic operators \code{+}, \code{-}, \code{*}, \code{/}, and \code{^}.
	 *
	 */
	exported primitive function "Im"("z")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "importIntoEnv"("impenv", "impnames", "expenv", "expnames")
	/**
	 * 
	 * \R{} possesses a simple generic function mechanism which can be used for
	 * an object-oriented style of programming.  Method dispatch takes place
	 * based on the class of the first argument to the generic function.
	 *
	 */
	exported function "inherits"("x", "what", "which"="FALSE")
	/**
	 * 
	 * Creates or tests for objects of type \code{"integer"}.
	 *
	 */
	exported function "integer"("length"="0")
	/**
	 * 
	 * \code{interaction} computes a factor which represents the interaction
	 * of the given factors.  The result of \code{interaction} is always unordered.
	 *
	 */
	exported function "interaction"("...", "drop"="FALSE", "sep"=".", "lex.order"="FALSE")
	/**
	 * 
	 * Return \code{TRUE} when \R{} is being used interactively and
	 * \code{FALSE} otherwise.
	 *
	 */
	exported primitive function "interactive"()
	/**
	 * 
	 * Performs \bold{set} union, intersection, (asymmetric!) difference,
	 * equality and membership on two vectors.
	 *
	 */
	exported function "intersect"("x", "y")
	/**
	 * 
	 * Conversion and manipulation of  objects of type \code{"raw"}.
	 *
	 */
	exported function "intToBits"("x")
	/**
	 * 
	 * Conversion of UTF-8 encoded character vectors to and from integer vectors.
	 *
	 */
	exported function "intToUtf8"("x", "multiple"="FALSE")
	/**
	 * 
	 * Compute the lengths and values of runs of equal values in a vector
	 * -- or the reverse operation.
	 *
	 */
	exported function "inverse.rle"("x", "...")
	/**
	 * 
	 * Return a (temporarily) invisible copy of an object.
	 *
	 */
	exported primitive function "invisible"("x")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "invokeRestart"("r", "...")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "invokeRestartInteractively"("r")
	/**
	 * 
	 * Creates or tests for arrays.
	 *
	 */
	exported primitive function "is.array"("x")
	/**
	 * 
	 * \code{is.atomic} returns \code{TRUE} if \code{x} is of an atomic type
	 * (or \code{NULL}) and \code{FALSE} otherwise.
	 *
	 * \code{is.recursive} returns \code{TRUE} if \code{x} has a recursive
	 * (list-like) structure and \code{FALSE} otherwise.
	 *
	 */
	exported primitive function "is.atomic"("x")
	/**
	 * 
	 * Create or test for objects of mode \code{"call"}.
	 *
	 */
	exported primitive function "is.call"("x")
	/**
	 * 
	 * Create or test for objects of type \code{"character"}.
	 *
	 */
	exported primitive function "is.character"("x")
	/**
	 * 
	 * Basic functions which support complex arithmetic in \R{}, in addition to
	 * the arithmetic operators \code{+}, \code{-}, \code{*}, \code{/}, and \code{^}.
	 *
	 */
	exported primitive function "is.complex"("x")
	/**
	 * 
	 * Functions to check if an object is a data frame, or coerce it if possible.
	 *
	 */
	exported function "is.data.frame"("x")
	/**
	 * 
	 * Create, coerce to or test for a double-precision vector.
	 *
	 */
	exported primitive function "is.double"("x")
	/**
	 * 
	 * Performs \bold{set} union, intersection, (asymmetric!) difference,
	 * equality and membership on two vectors.
	 *
	 */
	exported function "is.element"("el", "set")
	/**
	 * 
	 * Get, set, test for and create environments.
	 *
	 */
	exported primitive function "is.environment"("x")
	/**
	 * 
	 * Creates or tests for objects of mode \code{"expression"}.
	 *
	 */
	exported primitive function "is.expression"("x")
	/**
	 * 
	 * The function \code{factor} is used to encode a vector as a factor (the
	 * terms \sQuote{category} and \sQuote{enumerated type} are also used for
	 * factors).  If argument \code{ordered} is \code{TRUE}, the factor
	 * levels are assumed to be ordered.  For compatibility with S there is
	 * also a function \code{ordered}.
	 *
	 * \code{is.factor}, \code{is.ordered}, \code{as.factor} and \code{as.ordered}
	 * are the membership and coercion functions for these classes.
	 *
	 */
	exported function "is.factor"("x")
	/**
	 * 
	 * \code{is.finite} and \code{is.infinite} return a vector of the same
	 * length as \code{x}, indicating which elements are finite (not infinite
	 * and not missing) or infinite.
	 *
	 * \code{Inf} and \code{-Inf} are positive and negative infinity
	 * whereas \code{NaN} means \sQuote{Not a Number}.  (These apply to numeric
	 * values and real and imaginary parts of complex values but not to
	 * values of integer vectors.)  \code{Inf} and \code{NaN} are
	 * \link{reserved} words in the \R{} language.
	 *
	 */
	exported primitive function "is.finite"("x")
	/**
	 * Checks whether its argument is a (primitive) function.
	 */
	exported primitive function "is.function"("x")
	/**
	 * 
	 * \code{is.finite} and \code{is.infinite} return a vector of the same
	 * length as \code{x}, indicating which elements are finite (not infinite
	 * and not missing) or infinite.
	 *
	 * \code{Inf} and \code{-Inf} are positive and negative infinity
	 * whereas \code{NaN} means \sQuote{Not a Number}.  (These apply to numeric
	 * values and real and imaginary parts of complex values but not to
	 * values of integer vectors.)  \code{Inf} and \code{NaN} are
	 * \link{reserved} words in the \R{} language.
	 *
	 */
	exported primitive function "is.infinite"("x")
	/**
	 * 
	 * Creates or tests for objects of type \code{"integer"}.
	 *
	 */
	exported primitive function "is.integer"("x")
	/**
	 * 
	 * \code{is.language} returns \code{TRUE} if \code{x} is a
	 * variable \code{\link{name}}, a \code{\link{call}}, or an
	 * \code{\link{expression}}.
	 *
	 */
	exported primitive function "is.language"("x")
	/**
	 * 
	 * Functions to construct, coerce and check for both kinds of \R{} lists.
	 *
	 */
	exported primitive function "is.list"("x")
	/**
	 * 
	 * Load or unload DLLs (also known as shared objects), and test whether a
	 * C function or Fortran subroutine is available.
	 *
	 */
	exported function "is.loaded"("symbol", "PACKAGE"="", "type"="")
	/**
	 * 
	 * Create or test for objects of type \code{"logical"}, and the basic
	 * logical constants.
	 *
	 */
	exported primitive function "is.logical"("x")
	/**
	 * 
	 * \code{matrix} creates a matrix from the given set of values.
	 *
	 * \code{as.matrix} attempts to turn its argument into a matrix.
	 *
	 * \code{is.matrix} tests if its argument is a (strict) matrix.
	 *
	 */
	exported primitive function "is.matrix"("x")
	/**
	 * 
	 * \code{NA} is a logical constant of length 1 which contains a missing
	 * value indicator.  \code{NA} can be coerced to any other vector
	 * type except raw.  There are also constants \code{NA_integer_},
	 * \code{NA_real_}, \code{NA_complex_} and \code{NA_character_} of the
	 * other atomic vector types which support missing values: all of these
	 * are \link{reserved} words in the \R{} language.
	 *
	 * The generic function \code{is.na} indicates which elements are missing.
	 *
	 * The generic function \code{is.na<-} sets elements to \code{NA}.
	 *
	 * The generic function \code{anyNA} implements \code{any(is.na(x))} in a
	 * possibly faster way (especially for atomic vectors).
	 *
	 */
	exported primitive function "is.na"("x")
	/**
	 * 
	 * \code{NA} is a logical constant of length 1 which contains a missing
	 * value indicator.  \code{NA} can be coerced to any other vector
	 * type except raw.  There are also constants \code{NA_integer_},
	 * \code{NA_real_}, \code{NA_complex_} and \code{NA_character_} of the
	 * other atomic vector types which support missing values: all of these
	 * are \link{reserved} words in the \R{} language.
	 *
	 * The generic function \code{is.na} indicates which elements are missing.
	 *
	 * The generic function \code{is.na<-} sets elements to \code{NA}.
	 *
	 * The generic function \code{anyNA} implements \code{any(is.na(x))} in a
	 * possibly faster way (especially for atomic vectors).
	 *
	 */
	exported function "is.na.data.frame"("x")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "is.na.numeric_version"("x")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "is.na.POSIXlt"("x")
	/**
	 * 
	 * \code{NA} is a logical constant of length 1 which contains a missing
	 * value indicator.  \code{NA} can be coerced to any other vector
	 * type except raw.  There are also constants \code{NA_integer_},
	 * \code{NA_real_}, \code{NA_complex_} and \code{NA_character_} of the
	 * other atomic vector types which support missing values: all of these
	 * are \link{reserved} words in the \R{} language.
	 *
	 * The generic function \code{is.na} indicates which elements are missing.
	 *
	 * The generic function \code{is.na<-} sets elements to \code{NA}.
	 *
	 * The generic function \code{anyNA} implements \code{any(is.na(x))} in a
	 * possibly faster way (especially for atomic vectors).
	 *
	 */
	exported function "is.na<-"("x", "value")
	/**
	 * 
	 * \code{NA} is a logical constant of length 1 which contains a missing
	 * value indicator.  \code{NA} can be coerced to any other vector
	 * type except raw.  There are also constants \code{NA_integer_},
	 * \code{NA_real_}, \code{NA_complex_} and \code{NA_character_} of the
	 * other atomic vector types which support missing values: all of these
	 * are \link{reserved} words in the \R{} language.
	 *
	 * The generic function \code{is.na} indicates which elements are missing.
	 *
	 * The generic function \code{is.na<-} sets elements to \code{NA}.
	 *
	 * The generic function \code{anyNA} implements \code{any(is.na(x))} in a
	 * possibly faster way (especially for atomic vectors).
	 *
	 */
	exported function "is.na<-.default"("x", "value")
	/**
	 * 
	 * The function \code{factor} is used to encode a vector as a factor (the
	 * terms \sQuote{category} and \sQuote{enumerated type} are also used for
	 * factors).  If argument \code{ordered} is \code{TRUE}, the factor
	 * levels are assumed to be ordered.  For compatibility with S there is
	 * also a function \code{ordered}.
	 *
	 * \code{is.factor}, \code{is.ordered}, \code{as.factor} and \code{as.ordered}
	 * are the membership and coercion functions for these classes.
	 *
	 */
	exported function "is.na<-.factor"("x", "value")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "is.na<-.numeric_version"("x", "value")
	/**
	 * 
	 * A \sQuote{name} (also known as a \sQuote{symbol}) is a way to refer to
	 * \R{} objects by name (rather than the value of the object, if any, bound
	 * to that name).
	 *
	 * \code{as.name} and \code{as.symbol} are identical: they attempt to
	 * coerce the argument to a name.
	 *
	 * \code{is.symbol} and the identical \code{is.name} return \code{TRUE}
	 * or \code{FALSE} depending on whether the argument is a name or not.
	 *
	 */
	exported primitive function "is.name"("x")
	/**
	 * 
	 * \code{is.finite} and \code{is.infinite} return a vector of the same
	 * length as \code{x}, indicating which elements are finite (not infinite
	 * and not missing) or infinite.
	 *
	 * \code{Inf} and \code{-Inf} are positive and negative infinity
	 * whereas \code{NaN} means \sQuote{Not a Number}.  (These apply to numeric
	 * values and real and imaginary parts of complex values but not to
	 * values of integer vectors.)  \code{Inf} and \code{NaN} are
	 * \link{reserved} words in the \R{} language.
	 *
	 */
	exported primitive function "is.nan"("x")
	/**
	 * 
	 * \code{NULL} represents the null object in \R{}: it is a \link{reserved}
	 * word.  \code{NULL} is often returned by expressions and functions
	 * whose value is undefined.
	 *
	 * \code{as.null} ignores its argument and returns the value \code{NULL}.
	 *
	 * \code{is.null} returns \code{TRUE} if its argument
	 * is \code{NULL} and \code{FALSE} otherwise.
	 *
	 */
	exported primitive function "is.null"("x")
	/**
	 * 
	 * Creates or coerces objects of type \code{"numeric"}.
	 * \code{is.numeric} is a more general test of an object being
	 * interpretable as numbers.
	 *
	 */
	exported primitive function "is.numeric"("x")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "is.numeric_version"("x")
	/**
	 * 
	 * Creates or coerces objects of type \code{"numeric"}.
	 * \code{is.numeric} is a more general test of an object being
	 * interpretable as numbers.
	 *
	 */
	exported function "is.numeric.Date"("x")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "is.numeric.difftime"("x")
	/**
	 * 
	 * Creates or coerces objects of type \code{"numeric"}.
	 * \code{is.numeric} is a more general test of an object being
	 * interpretable as numbers.
	 *
	 */
	exported function "is.numeric.POSIXt"("x")
	/**
	 * 
	 *   A function rather for internal use.  It returns \code{TRUE} if the
	 *   object \code{x} has the \R{} internal \code{OBJECT} bit set, and
	 *   \code{FALSE} otherwise.  The \code{OBJECT} bit is set when a
	 *   \code{"class"} attribute is added and removed when that attribute is
	 *   removed, so this is a very efficient way to check if an object has a
	 *   class attribute.  (S4 objects always should.)
	 *
	 */
	exported primitive function "is.object"("x")
	/**
	 * 
	 * The function \code{factor} is used to encode a vector as a factor (the
	 * terms \sQuote{category} and \sQuote{enumerated type} are also used for
	 * factors).  If argument \code{ordered} is \code{TRUE}, the factor
	 * levels are assumed to be ordered.  For compatibility with S there is
	 * also a function \code{ordered}.
	 *
	 * \code{is.factor}, \code{is.ordered}, \code{as.factor} and \code{as.ordered}
	 * are the membership and coercion functions for these classes.
	 *
	 */
	exported function "is.ordered"("x")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "is.package_version"("x")
	/**
	 * 
	 * Functions to construct, coerce and check for both kinds of \R{} lists.
	 *
	 */
	exported primitive function "is.pairlist"("x")
	/**
	 * Checks whether its argument is a (primitive) function.
	 */
	exported function "is.primitive"("x")
	/**
	 * 
	 * \code{qr} computes the QR decomposition of a matrix.
	 *
	 */
	exported function "is.qr"("x")
	/**
	 * 
	 * Test if running under \R{}.
	 *
	 */
	exported function "is.R"()
	/**
	 * 
	 * Creates or tests for objects of type \code{"raw"}.
	 *
	 */
	exported primitive function "is.raw"("x")
	/**
	 * 
	 * \code{is.atomic} returns \code{TRUE} if \code{x} is of an atomic type
	 * (or \code{NULL}) and \code{FALSE} otherwise.
	 *
	 * \code{is.recursive} returns \code{TRUE} if \code{x} has a recursive
	 * (list-like) structure and \code{FALSE} otherwise.
	 *
	 */
	exported primitive function "is.recursive"("x")
	/**
	 * 
	 * \code{is.single} reports an error.  There are no single precision
	 * values in R.
	 *
	 */
	exported primitive function "is.single"("x")
	/**
	 * 
	 * A \sQuote{name} (also known as a \sQuote{symbol}) is a way to refer to
	 * \R{} objects by name (rather than the value of the object, if any, bound
	 * to that name).
	 *
	 * \code{as.name} and \code{as.symbol} are identical: they attempt to
	 * coerce the argument to a name.
	 *
	 * \code{is.symbol} and the identical \code{is.name} return \code{TRUE}
	 * or \code{FALSE} depending on whether the argument is a name or not.
	 *
	 */
	exported primitive function "is.symbol"("x")
	/**
	 * 
	 * \code{table} uses the cross-classifying factors to build a contingency
	 * table of the counts at each combination of factor levels.
	 *
	 */
	exported function "is.table"("x")
	/**
	 * 
	 * Test if an object is not sorted (in increasing order), without the
	 * cost of sorting it.
	 *
	 */
	exported function "is.unsorted"("x", "na.rm"="FALSE", "strictly"="FALSE")
	/**
	 * 
	 * \code{vector} produces a vector of the given length and mode.
	 *
	 * \code{as.vector}, a generic, attempts to coerce its argument into a
	 * vector of mode \code{mode} (the default is to coerce to whichever
	 * vector mode is most convenient): if the result is atomic all
	 * attributes are removed.
	 *
	 * \code{is.vector} returns \code{TRUE} if \code{x} is a vector of the
	 * specified mode having no attributes \emph{other than names}.  It returns
	 * \code{FALSE} otherwise.
	 *
	 */
	exported function "is.vector"("x", "mode"="any")
	/**
	 * 
	 * Display aspects of \link{connections}.
	 *
	 */
	exported function "isatty"("con")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "isBaseNamespace"("ns")
	/**
	 * 
	 * Set, unset or query the debugging flag on a function.
	 * The \code{text} and \code{condition} arguments are the same as those
	 * that can be supplied via a call to \code{browser}. They can be retrieved
	 * by the user once the browser has been entered, and provide a mechanism to
	 * allow users to identify which breakpoint has been activated.
	 *
	 */
	exported function "isdebugged"("fun")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "isIncomplete"("con")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "isNamespace"("ns")
	/**
	 * 
	 * Functions to load and unload name spaces.
	 *
	 */
	exported function "isNamespaceLoaded"("name")
	/**
	 * 
	 * Convenience wrappers to create date-times from numeric representations.
	 *
	 */
	exported function "ISOdate"("year", "month", "day", "hour"="12", "min"="0", "sec"="0", "tz"="GMT")
	/**
	 * 
	 * Convenience wrappers to create date-times from numeric representations.
	 *
	 */
	exported function "ISOdatetime"("year", "month", "day", "hour", "min", "sec", "tz"="")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "isOpen"("con", "rw"="")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "isRestart"("x")
	/**
	 * 
	 * Tests whether the object is an instance of an S4 class.
	 *
	 */
	exported primitive function "isS4"("object")
	/**
	 * 
	 * Functions to re-position connections.
	 *
	 */
	exported function "isSeekable"("con")
	/**
	 * 
	 * Generic function to test if \code{object} is symmetric or not.
	 * Currently only a matrix method is implemented, where a
	 * \code{\link{complex}} matrix \code{Z} must be \dQuote{Hermitian} for
	 * \code{isSymmetric(Z)} to be true.
	 *
	 */
	exported function "isSymmetric"("object", "...")
	/**
	 * 
	 * Generic function to test if \code{object} is symmetric or not.
	 * Currently only a matrix method is implemented, where a
	 * \code{\link{complex}} matrix \code{Z} must be \dQuote{Hermitian} for
	 * \code{isSymmetric(Z)} to be true.
	 *
	 */
	exported function "isSymmetric.matrix"("object", "tol"="100 * .Machine$double.eps", "...")
	/**
	 * 
	 * These operators act on raw, logical and number-like vectors.
	 *
	 */
	exported function "isTRUE"("x")
	/**
	 * 
	 * Add a small amount of noise to a numeric vector.
	 *
	 */
	exported function "jitter"("x", "factor"="1", "amount"="")
	/**
	 * 
	 * Extract the weekday, month or quarter, or the Julian time
	 * (days since some origin).  These are generic functions: the methods
	 * for the internal date-time classes are documented here.
	 *
	 */
	exported function "julian"("x", "...")
	/**
	 * 
	 * Extract the weekday, month or quarter, or the Julian time
	 * (days since some origin).  These are generic functions: the methods
	 * for the internal date-time classes are documented here.
	 *
	 */
	exported function "julian.Date"("x", "origin"="as.Date(\"1970-01-01\")", "...")
	/**
	 * 
	 * Extract the weekday, month or quarter, or the Julian time
	 * (days since some origin).  These are generic functions: the methods
	 * for the internal date-time classes are documented here.
	 *
	 */
	exported function "julian.POSIXt"("x", "origin"="as.POSIXct(\"1970-01-01\", tz = \"GMT\")", "...")
	/**
	 * 
	 * The condition number of a regular (square) matrix is the product of
	 * the \emph{norm} of the matrix and the norm of its inverse (or
	 * pseudo-inverse), and hence depends on the kind of matrix-norm.
	 *
	 * \code{kappa()} computes by default (an estimate of) the 2-norm
	 * condition number of a matrix or of the \eqn{{R}} matrix of a \eqn{{QR}}
	 * decomposition, perhaps of a linear fit.  The 2-norm condition number
	 * can be shown to be the ratio of the largest to the smallest
	 * \emph{non-zero} singular value of the matrix.
	 *
	 * \code{rcond()} computes an approximation of the \bold{r}eciprocal
	 * \bold{cond}ition number, see the details.
	 *
	 */
	exported function "kappa"("z", "...")
	/**
	 * 
	 * The condition number of a regular (square) matrix is the product of
	 * the \emph{norm} of the matrix and the norm of its inverse (or
	 * pseudo-inverse), and hence depends on the kind of matrix-norm.
	 *
	 * \code{kappa()} computes by default (an estimate of) the 2-norm
	 * condition number of a matrix or of the \eqn{{R}} matrix of a \eqn{{QR}}
	 * decomposition, perhaps of a linear fit.  The 2-norm condition number
	 * can be shown to be the ratio of the largest to the smallest
	 * \emph{non-zero} singular value of the matrix.
	 *
	 * \code{rcond()} computes an approximation of the \bold{r}eciprocal
	 * \bold{cond}ition number, see the details.
	 *
	 */
	exported function "kappa.default"("z", "exact"="FALSE", "norm"="", "method"="c(\"qr\", \"direct\")", "...")
	/**
	 * 
	 * The condition number of a regular (square) matrix is the product of
	 * the \emph{norm} of the matrix and the norm of its inverse (or
	 * pseudo-inverse), and hence depends on the kind of matrix-norm.
	 *
	 * \code{kappa()} computes by default (an estimate of) the 2-norm
	 * condition number of a matrix or of the \eqn{{R}} matrix of a \eqn{{QR}}
	 * decomposition, perhaps of a linear fit.  The 2-norm condition number
	 * can be shown to be the ratio of the largest to the smallest
	 * \emph{non-zero} singular value of the matrix.
	 *
	 * \code{rcond()} computes an approximation of the \bold{r}eciprocal
	 * \bold{cond}ition number, see the details.
	 *
	 */
	exported function "kappa.lm"("z", "...")
	/**
	 * 
	 * The condition number of a regular (square) matrix is the product of
	 * the \emph{norm} of the matrix and the norm of its inverse (or
	 * pseudo-inverse), and hence depends on the kind of matrix-norm.
	 *
	 * \code{kappa()} computes by default (an estimate of) the 2-norm
	 * condition number of a matrix or of the \eqn{{R}} matrix of a \eqn{{QR}}
	 * decomposition, perhaps of a linear fit.  The 2-norm condition number
	 * can be shown to be the ratio of the largest to the smallest
	 * \emph{non-zero} singular value of the matrix.
	 *
	 * \code{rcond()} computes an approximation of the \bold{r}eciprocal
	 * \bold{cond}ition number, see the details.
	 *
	 */
	exported function "kappa.qr"("z", "...")
	/**
	 * 
	 * Computes the generalised kronecker product of two arrays,
	 * \code{X} and \code{Y}.
	 *
	 */
	exported function "kronecker"("X", "Y", "FUN"="*", "make.dimnames"="FALSE", "...")
	/**
	 * 
	 * Report on localization information.
	 *
	 */
	exported function "l10n_info"()
	/**
	 * 
	 * Report the version of LAPACK in use.
	 *
	 */
	exported function "La_version"()
	/**
	 * 
	 * Compute the singular-value decomposition of a rectangular matrix.
	 *
	 */
	exported function "La.svd"("x", "nu"="min(n, p)", "nv"="min(n, p)")
	/**
	 * 
	 * Find a suitable set of labels from an object for use in printing or
	 * plotting, for example.  A generic function.
	 *
	 */
	exported function "labels"("object", "...")
	/**
	 * 
	 * Find a suitable set of labels from an object for use in printing or
	 * plotting, for example.  A generic function.
	 *
	 */
	exported function "labels.default"("object", "...")
	/**
	 * 
	 * \code{lapply} returns a list of the same length as \code{X}, each
	 * element of which is the result of applying \code{FUN} to the
	 * corresponding element of \code{X}.
	 *
	 * \code{sapply} is a user-friendly version and wrapper of \code{lapply}
	 * by default returning a vector, matrix or, if \code{simplify = "array"}, an
	 * array if appropriate, by applying \code{simplify2array()}.
	 * \code{sapply(x, f, simplify = FALSE, USE.NAMES = FALSE)} is the same as
	 * \code{lapply(x, f)}.
	 *
	 * \code{vapply} is similar to \code{sapply}, but has a pre-specified
	 * type of return value, so it can be safer (and sometimes faster) to
	 * use.
	 *
	 * \code{replicate} is a wrapper for the common use of \code{sapply} for
	 * repeated evaluation of an expression (which will usually involve
	 * random number generation).
	 *
	 * \code{simplify2array()} is the utility called from \code{sapply()}
	 * when \code{simplify} is not false and is similarly called from
	 * \code{\link{mapply}()}.
	 *
	 */
	exported function "lapply"("X", "FUN", "...")
	/**
	 * 
	 * Internal functions to lazy load a database of \R{} objects.
	 *
	 */
	exported function "lazyLoad"("filebase", "envir"="parent.frame()", "filter")
	/**
	 * 
	 * Internal functions to lazy load a database of \R{} objects.
	 *
	 */
	exported function "lazyLoadDBexec"("filebase", "fun", "filter")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported primitive function "lazyLoadDBfetch"("key", "file", "compressed", "hook")
	/**
	 * 
	 * Special mathematical functions related to the beta and gamma
	 * functions.
	 *
	 */
	exported function "lbeta"("a", "b")
	/**
	 * 
	 * Special mathematical functions related to the beta and gamma
	 * functions.
	 *
	 */
	exported function "lchoose"("n", "k")
	/**
	 * 
	 * Get or set the length of vectors (including lists) and factors, and of
	 * any other \R{} object for which a method has been defined.
	 *
	 */
	exported primitive function "length"("x")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "length.POSIXlt"("x")
	/**
	 * 
	 * Get or set the length of vectors (including lists) and factors, and of
	 * any other \R{} object for which a method has been defined.
	 *
	 */
	exported primitive function "length<-"("x", "value")
	/**
	 * 
	 * Get or set the length of vectors (including lists) and factors, and of
	 * any other \R{} object for which a method has been defined.
	 *
	 */
	exported function "length<-.factor"("x", "value")
	/**
	 * 
	 * Get the length of each element of a \code{\link{list}} or atomic
	 * vector (\code{\link{is.atomic}}) as an integer or numeric vector.
	 *
	 */
	exported function "lengths"("x", "use.names"="TRUE")
	/**
	 * 
	 * Constants built into \R{}.
	 *
	 */
	exported var "letters"
	/**
	 * 
	 * Constants built into \R{}.
	 *
	 */
	exported var "LETTERS"
	/**
	 * 
	 * \code{levels} provides access to the levels attribute of a variable.
	 * The first form returns the value of the levels of its argument
	 * and the second sets the attribute.
	 *
	 */
	exported function "levels"("x")
	/**
	 * 
	 * \code{levels} provides access to the levels attribute of a variable.
	 * The first form returns the value of the levels of its argument
	 * and the second sets the attribute.
	 *
	 */
	exported function "levels.default"("x")
	/**
	 * 
	 * \code{levels} provides access to the levels attribute of a variable.
	 * The first form returns the value of the levels of its argument
	 * and the second sets the attribute.
	 *
	 */
	exported primitive function "levels<-"("x", "value")
	/**
	 * 
	 * \code{levels} provides access to the levels attribute of a variable.
	 * The first form returns the value of the levels of its argument
	 * and the second sets the attribute.
	 *
	 */
	exported function "levels<-.factor"("x", "value")
	/**
	 * 
	 * Special mathematical functions related to the beta and gamma
	 * functions.
	 *
	 */
	exported function "lfactorial"("x")
	/**
	 * 
	 * Special mathematical functions related to the beta and gamma
	 * functions.
	 *
	 */
	exported primitive function "lgamma"("x")
	/**
	 * 
	 * Report version of \code{libcurl} in use.
	 *
	 */
	exported function "libcurlVersion"()
	/**
	 * 
	 * \code{library} and \code{require} load and attach add-on packages.
	 *
	 */
	exported function "library"("package", "help", "pos"="2", "lib.loc"="", "character.only"="FALSE", "logical.return"="FALSE", "warn.conflicts"="TRUE", "quietly"="FALSE", "verbose"="getOption(\"verbose\")")
	/**
	 * 
	 * Load the specified file of compiled code if it has not been loaded
	 * already, or unloads it.
	 *
	 */
	exported function "library.dynam"("chname", "package", "lib.loc", "verbose"="getOption(\"verbose\")", "file.ext"=".Platform$dynlib.ext", "...")
	/**
	 * 
	 * Load the specified file of compiled code if it has not been loaded
	 * already, or unloads it.
	 *
	 */
	exported function "library.dynam.unload"("chname", "libpath", "verbose"="getOption(\"verbose\")", "file.ext"=".Platform$dynlib.ext")
	/**
	 * 
	 * The license terms under which \R{} is distributed.
	 *
	 */
	exported function "licence"()
	/**
	 * 
	 * The license terms under which \R{} is distributed.
	 *
	 */
	exported function "license"()
	/**
	 * 
	 * Functions to construct, coerce and check for both kinds of \R{} lists.
	 *
	 */
	exported primitive function "list"("...")
	/**
	 * 
	 * These functions produce a character vector of the names of files or
	 * directories in the named directory.
	 *
	 */
	exported function "list.dirs"("path"=".", "full.names"="TRUE", "recursive"="TRUE")
	/**
	 * 
	 * These functions produce a character vector of the names of files or
	 * directories in the named directory.
	 *
	 */
	exported function "list.files"("path"=".", "pattern"="", "all.files"="FALSE", "full.names"="FALSE", "recursive"="FALSE", "ignore.case"="FALSE", "include.dirs"="FALSE", "no.."="FALSE")
	/**
	 * 
	 * From a \emph{named} \code{\link{list} x}, create an
	 * \code{\link{environment}} containing all list components as objects, or
	 * \dQuote{multi-assign} from \code{x} into a pre-existing environment.
	 *
	 */
	exported function "list2env"("x", "envir"="", "parent"="parent.frame()", "hash"="(length(x) > 100)", "size"="max(29L, length(x))")
	/**
	 * 
	 * Reload datasets written with the function \code{save}.
	 *
	 */
	exported function "load"("file", "envir"="parent.frame()", "verbose"="FALSE")
	/**
	 * 
	 * Functions to load and unload name spaces.
	 *
	 */
	exported function "loadedNamespaces"()
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "loadingNamespaceInfo"()
	/**
	 * 
	 * Functions to load and unload name spaces.
	 *
	 */
	exported function "loadNamespace"("package", "lib.loc"="", "keep.source"="getOption(\"keep.source.pkgs\")", "partial"="FALSE", "versionCheck"="")
	/**
	 * 
	 * Evaluate an \R{} expression in a specified environment.
	 *
	 */
	exported function "local"("expr", "envir"="new.env()")
	/**
	 * 
	 * These functions represent an interface for adjustments
	 * to environments and bindings within environments.  They allow for
	 * locking environments as well as individual bindings, and for linking
	 * a variable to a function.
	 *
	 */
	exported function "lockBinding"("sym", "env")
	/**
	 * 
	 * These functions represent an interface for adjustments
	 * to environments and bindings within environments.  They allow for
	 * locking environments as well as individual bindings, and for linking
	 * a variable to a function.
	 *
	 */
	exported function "lockEnvironment"("env", "bindings"="FALSE")
	/**
	 * 
	 * \code{log} computes logarithms, by default natural logarithms,
	 * \code{log10} computes common (i.e., base 10) logarithms, and
	 * \code{log2} computes binary (i.e., base 2) logarithms.
	 * The general form \code{log(x, base)} computes logarithms with base
	 * \code{base}.
	 *
	 * \code{log1p(x)} computes \eqn{{\log(1+x)}{log(1+x)}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 * \code{exp} computes the exponential function.
	 *
	 * \code{expm1(x)} computes \eqn{{\exp(x) - 1}{exp(x) - 1}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 */
	exported primitive function "log"("x", "base" = "exp(1)")
	/**
	 * 
	 * \code{log} computes logarithms, by default natural logarithms,
	 * \code{log10} computes common (i.e., base 10) logarithms, and
	 * \code{log2} computes binary (i.e., base 2) logarithms.
	 * The general form \code{log(x, base)} computes logarithms with base
	 * \code{base}.
	 *
	 * \code{log1p(x)} computes \eqn{{\log(1+x)}{log(1+x)}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 * \code{exp} computes the exponential function.
	 *
	 * \code{expm1(x)} computes \eqn{{\exp(x) - 1}{exp(x) - 1}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 */
	exported primitive function "log10"("x")
	/**
	 * 
	 * \code{log} computes logarithms, by default natural logarithms,
	 * \code{log10} computes common (i.e., base 10) logarithms, and
	 * \code{log2} computes binary (i.e., base 2) logarithms.
	 * The general form \code{log(x, base)} computes logarithms with base
	 * \code{base}.
	 *
	 * \code{log1p(x)} computes \eqn{{\log(1+x)}{log(1+x)}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 * \code{exp} computes the exponential function.
	 *
	 * \code{expm1(x)} computes \eqn{{\exp(x) - 1}{exp(x) - 1}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 */
	exported primitive function "log1p"("x")
	/**
	 * 
	 * \code{log} computes logarithms, by default natural logarithms,
	 * \code{log10} computes common (i.e., base 10) logarithms, and
	 * \code{log2} computes binary (i.e., base 2) logarithms.
	 * The general form \code{log(x, base)} computes logarithms with base
	 * \code{base}.
	 *
	 * \code{log1p(x)} computes \eqn{{\log(1+x)}{log(1+x)}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 * \code{exp} computes the exponential function.
	 *
	 * \code{expm1(x)} computes \eqn{{\exp(x) - 1}{exp(x) - 1}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 */
	exported primitive function "log2"("x")
	/**
	 * 
	 * \code{log} computes logarithms, by default natural logarithms,
	 * \code{log10} computes common (i.e., base 10) logarithms, and
	 * \code{log2} computes binary (i.e., base 2) logarithms.
	 * The general form \code{log(x, base)} computes logarithms with base
	 * \code{base}.
	 *
	 * \code{log1p(x)} computes \eqn{{\log(1+x)}{log(1+x)}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 * \code{exp} computes the exponential function.
	 *
	 * \code{expm1(x)} computes \eqn{{\exp(x) - 1}{exp(x) - 1}} accurately also for
	 * \eqn{{|x| \ll 1}{|x| << 1}}.
	 *
	 */
	exported function "logb"("x", "base"="exp(1)")
	/**
	 * 
	 * Create or test for objects of type \code{"logical"}, and the basic
	 * logical constants.
	 *
	 */
	exported function "logical"("length"="0")
	/**
	 * 
	 * Returns a matrix of logicals the same size of a given matrix with
	 * entries \code{TRUE} in the lower or upper triangle.
	 *
	 */
	exported function "lower.tri"("x", "diag"="FALSE")
	/**
	 * 
	 * \code{ls} and \code{objects} return a vector of character strings
	 * giving the names of the objects in the specified environment.  When
	 * invoked with no argument at the top level prompt, \code{ls} shows what
	 * data sets and functions a user has defined.  When invoked with no
	 * argument inside a function, \code{ls} returns the names of the
	 * function's local variables: this is useful in conjunction with
	 * \code{browser}.
	 *
	 */
	exported function "ls"("name", "pos"="-1L", "envir"="as.environment(pos)", "all.names"="FALSE", "pattern", "sorted"="TRUE")
	/**
	 * 
	 * Make syntactically valid names out of character vectors.
	 *
	 */
	exported function "make.names"("names", "unique"="FALSE", "allow_"="TRUE")
	/**
	 * 
	 * Makes the elements of a character vector unique by
	 * appending sequence numbers to duplicates.
	 *
	 */
	exported function "make.unique"("names", "sep"=".")
	/**
	 * 
	 * These functions represent an interface for adjustments
	 * to environments and bindings within environments.  They allow for
	 * locking environments as well as individual bindings, and for linking
	 * a variable to a function.
	 *
	 */
	exported function "makeActiveBinding"("sym", "fun", "env")
	/**
	 * 
	 * \code{Reduce} uses a binary function to successively combine the
	 * elements of a given vector and a possibly given initial value.
	 * \code{Filter} extracts the elements of a vector for which a predicate
	 * (logical) function gives true.  \code{Find} and \code{Position} give
	 * the first or last such element and its position in the vector,
	 * respectively.  \code{Map} applies a function to the corresponding
	 * elements of given vectors.  \code{Negate} creates the negation of a
	 * given function.
	 *
	 */
	exported function "Map"("f", "...")
	/**
	 * 
	 * \code{mapply} is a multivariate version of \code{\link{sapply}}.
	 * \code{mapply} applies \code{FUN} to the first elements of each \dots{}
	 * argument, the second elements, the third elements, and so on.
	 * Arguments are recycled if necessary.
	 *
	 */
	exported function "mapply"("FUN", "...", "MoreArgs"="", "SIMPLIFY"="TRUE", "USE.NAMES"="TRUE")
	/**
	 * 
	 * For a contingency table in array form, compute the sum of table
	 * entries for a given index.
	 *
	 */
	exported function "margin.table"("x", "margin"="")
	/**
	 * 
	 * \code{mat.or.vec} creates an \code{nr} by \code{nc} zero matrix if
	 * \code{nc} is greater than 1, and a zero vector of length \code{nr} if
	 * \code{nc} equals 1.
	 *
	 */
	exported function "mat.or.vec"("nr", "nc")
	/**
	 * 
	 * \code{match} returns a vector of the positions of (first) matches of
	 * its first argument in its second.
	 *
	 * \code{%in%} is a more intuitive interface as a binary operator,
	 * which returns a logical vector indicating if there is a match or not
	 * for its left operand.
	 *
	 */
	exported function "match"("x", "table", "nomatch"="NA", "incomparables"="")
	/**
	 * 
	 * \code{match.arg} matches \code{arg} against a table of candidate
	 * values as specified by \code{choices}, where \code{NULL} means to take
	 * the first one.
	 *
	 */
	exported function "match.arg"("arg", "choices", "several.ok"="FALSE")
	/**
	 * 
	 * \code{match.call} returns a call in which all of the specified arguments are
	 * specified by their full names.
	 *
	 */
	exported function "match.call"("definition"="sys.function(sys.parent())", "call"="sys.call(sys.parent())", "expand.dots"="TRUE", "envir"="parent.frame(2L)")
	/**
	 * 
	 * When called inside functions that take a function as argument, extract
	 * the desired function object while avoiding undesired matching to
	 * objects of other types.
	 *
	 */
	exported function "match.fun"("FUN", "descend"="TRUE")
	/**
	 * 
	 * Group generic methods can be defined for four pre-specified groups of
	 * functions, \code{Math}, \code{Ops}, \code{Summary} and \code{Complex}.
	 * (There are no objects of these names in base \R{}, but there are in the
	 * \pkg{methods} package.)
	 *
	 * A method defined for an individual member of the group takes
	 * precedence over a method defined for the group as a whole.
	 *
	 */
	exported function "Math.data.frame"("x", "...")
	/**
	 * 
	 * Description of the class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "Math.Date"("x", "...")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "Math.difftime"("x", "...")
	/**
	 * 
	 * The function \code{factor} is used to encode a vector as a factor (the
	 * terms \sQuote{category} and \sQuote{enumerated type} are also used for
	 * factors).  If argument \code{ordered} is \code{TRUE}, the factor
	 * levels are assumed to be ordered.  For compatibility with S there is
	 * also a function \code{ordered}.
	 *
	 * \code{is.factor}, \code{is.ordered}, \code{as.factor} and \code{as.ordered}
	 * are the membership and coercion functions for these classes.
	 *
	 */
	exported function "Math.factor"("x", "...")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "Math.POSIXt"("x", "...")
	/**
	 * 
	 * \code{matrix} creates a matrix from the given set of values.
	 *
	 * \code{as.matrix} attempts to turn its argument into a matrix.
	 *
	 * \code{is.matrix} tests if its argument is a (strict) matrix.
	 *
	 */
	exported function "matrix"("data"="NA", "nrow"="1", "ncol"="1", "byrow"="FALSE", "dimnames"="")
	/**
	 * 
	 * Returns the (parallel) maxima and minima of the input values.
	 *
	 */
	exported primitive function "max"("...", "na.rm" = "FALSE")
	/**
	 * 
	 * Find the maximum position for each row of a matrix, breaking ties at random.
	 *
	 */
	exported function "max.col"("m", "ties.method"="c(\"random\", \"first\", \"last\")")
	/**
	 * 
	 * Generic function for the (trimmed) arithmetic mean.
	 *
	 */
	exported function "mean"("x", "...")
	/**
	 * 
	 * Description of the class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "mean.Date"("x", "...")
	/**
	 * 
	 * Generic function for the (trimmed) arithmetic mean.
	 *
	 */
	exported function "mean.default"("x", "trim"="0", "na.rm"="FALSE", "...")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "mean.difftime"("x", "...")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "mean.POSIXct"("x", "...")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "mean.POSIXlt"("x", "...")
	/**
	 * 
	 * The functions or variables listed here are no longer part of \R{} as
	 * they are no longer needed.
	 *
	 */
	exported function "mem.limits"("nsize"="NA", "vsize"="NA")
	/**
	 * 
	 * In-memory compression or decompression for raw vectors.
	 *
	 */
	exported function "memCompress"("from", "type"="c(\"gzip\", \"bzip2\", \"xz\", \"none\")")
	/**
	 * 
	 * In-memory compression or decompression for raw vectors.
	 *
	 */
	exported function "memDecompress"("from", "type"="c(\"unknown\", \"gzip\", \"bzip2\", \"xz\", \"none\")", "asChar"="FALSE")
	/**
	 * 
	 *   Lists the usage of the cons cells by \code{SEXPREC} type.
	 *
	 */
	exported function "memory.profile"()
	/**
	 * 
	 * Merge two data frames by common columns or row names, or do other
	 * versions of database \emph{join} operations.
	 *
	 */
	exported function "merge"("x", "y", "...")
	/**
	 * 
	 * Merge two data frames by common columns or row names, or do other
	 * versions of database \emph{join} operations.
	 *
	 */
	exported function "merge.data.frame"("x", "y", "by"="intersect(names(x), names(y))", "by.x", "by.y", "all"="FALSE", "all.x", "all.y", "sort"="TRUE", "suffixes"="c(\".x\", \".y\")", "incomparables"="", "...")
	/**
	 * 
	 * Merge two data frames by common columns or row names, or do other
	 * versions of database \emph{join} operations.
	 *
	 */
	exported function "merge.default"("x", "y", "...")
	/**
	 * 
	 * Generate a diagnostic message from its arguments.
	 *
	 */
	exported function "message"("...", "domain"="", "appendLF"="TRUE")
	/**
	 * 
	 * Search by name for an object (\code{get}) or zero or more objects
	 * (\code{mget}).
	 *
	 */
	exported function "mget"("x", "envir"="as.environment(-1L)", "mode"="any", "ifnotfound", "inherits"="FALSE")
	/**
	 * 
	 * Returns the (parallel) maxima and minima of the input values.
	 *
	 */
	exported primitive function "min"("...", "na.rm" = "FALSE")
	/**
	 * 
	 *\code{missing} can be used to test whether a value was specified
	 *as an argument to a function.
	 *
	 */
	exported primitive function "missing"("x")
	/**
	 * 
	 * Basic functions which support complex arithmetic in \R{}, in addition to
	 * the arithmetic operators \code{+}, \code{-}, \code{*}, \code{/}, and \code{^}.
	 *
	 */
	exported primitive function "Mod"("z")
	/**
	 * 
	 * Get or set the type or storage mode of an object.
	 *
	 */
	exported function "mode"("x")
	/**
	 * 
	 * Get or set the type or storage mode of an object.
	 *
	 */
	exported function "mode<-"("x", "value")
	/**
	 * 
	 * Constants built into \R{}.
	 *
	 */
	exported var "month.abb"
	/**
	 * 
	 * Constants built into \R{}.
	 *
	 */
	exported var "month.name"
	/**
	 * 
	 * Extract the weekday, month or quarter, or the Julian time
	 * (days since some origin).  These are generic functions: the methods
	 * for the internal date-time classes are documented here.
	 *
	 */
	exported function "months"("x", "abbreviate")
	/**
	 * 
	 * Extract the weekday, month or quarter, or the Julian time
	 * (days since some origin).  These are generic functions: the methods
	 * for the internal date-time classes are documented here.
	 *
	 */
	exported function "months.Date"("x", "abbreviate"="FALSE")
	/**
	 * 
	 * Extract the weekday, month or quarter, or the Julian time
	 * (days since some origin).  These are generic functions: the methods
	 * for the internal date-time classes are documented here.
	 *
	 */
	exported function "months.POSIXt"("x", "abbreviate"="FALSE")
	/**
	 * 
	 * These functions access an object's attributes.
	 * The first form below returns the object's attribute list.
	 * The replacement forms uses the list on the right-hand
	 * side of the assignment as the object's attributes (if appropriate).
	 *
	 */
	exported function "mostattributes<-"("obj", "value")
	/**
	 * 
	 * Functions to get or set the names of an object.
	 *
	 */
	exported primitive function "names"("x")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "names.POSIXlt"("x")
	/**
	 * 
	 * Functions to get or set the names of an object.
	 *
	 */
	exported primitive function "names<-"("x", "value")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "names<-.POSIXlt"("x", "value")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "namespaceExport"("ns", "vars")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "namespaceImport"("self", "...", "from"="", "except"="character(0L)")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "namespaceImportClasses"("self", "ns", "vars", "from"="")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "namespaceImportFrom"("self", "ns", "vars", "generics", "packages", "from"="non-package environment", "except"="character(0L)")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "namespaceImportMethods"("self", "ns", "vars", "from"="")
	/**
	 * 
	 * When used inside a function body, \code{nargs} returns the number of
	 * arguments supplied to that function, \emph{including} positional
	 * arguments left blank.
	 *
	 */
	exported primitive function "nargs"()
	/**
	 * 
	 * \code{nchar} takes a character vector as an argument and
	 * returns a vector whose elements contain the sizes of
	 * the corresponding elements of \code{x}.
	 *
	 * \code{nzchar} is a fast way to find out if elements of a character
	 * vector are non-empty strings.
	 *
	 */
	exported function "nchar"("x", "type"="chars", "allowNA"="FALSE", "keepNA"="NA")
	/**
	 * 
	 * \code{nrow} and \code{ncol} return the number of rows or columns
	 * present in \code{x}.
	 * \code{NCOL} and \code{NROW} do the same treating a vector as
	 * 1-column matrix.
	 *
	 */
	exported function "ncol"("x")
	/**
	 * 
	 * \code{nrow} and \code{ncol} return the number of rows or columns
	 * present in \code{x}.
	 * \code{NCOL} and \code{NROW} do the same treating a vector as
	 * 1-column matrix.
	 *
	 */
	exported function "NCOL"("x")
	/**
	 * 
	 * \code{Reduce} uses a binary function to successively combine the
	 * elements of a given vector and a possibly given initial value.
	 * \code{Filter} extracts the elements of a vector for which a predicate
	 * (logical) function gives true.  \code{Find} and \code{Position} give
	 * the first or last such element and its position in the vector,
	 * respectively.  \code{Map} applies a function to the corresponding
	 * elements of given vectors.  \code{Negate} creates the negation of a
	 * given function.
	 *
	 */
	exported function "Negate"("f")
	/**
	 * 
	 * Get, set, test for and create environments.
	 *
	 */
	exported function "new.env"("hash"="TRUE", "parent"="parent.frame()", "size"="29")
	/**
	 * 
	 * These are the basic control-flow constructs of the \R{} language.  They
	 * function in much the same way as control statements in any Algol-like
	 * language.  They are all \link{reserved} words.
	 *
	 */
	exported primitive function "next"("NULL")
	/**
	 * 
	 * \R{} possesses a simple generic function mechanism which can be used for
	 * an object-oriented style of programming.  Method dispatch takes place
	 * based on the class(es) of the first argument to the generic function or of
	 * the object supplied as an argument to \code{UseMethod} or \code{NextMethod}.
	 *
	 */
	exported function "NextMethod"("generic"="", "object"="", "...")
	/**
	 * 
	 * If Native Language Support was enabled in this build of \R{}, attempt to
	 * translate character vectors or set where the translations are to be found.
	 *
	 */
	exported function "ngettext"("n", "msg1", "msg2", "domain"="")
	/**
	 * 
	 * Return the number of levels which its argument has.
	 *
	 */
	exported function "nlevels"("x")
	/**
	 * 
	 * Print character strings without quotes.
	 *
	 */
	exported function "noquote"("obj")
	/**
	 * 
	 * Computes a matrix norm of \code{x} using LAPACK.  The norm can be
	 * the one (\code{"O"}) norm, the infinity (\code{"I"}) norm, the
	 * Frobenius (\code{"F"}) norm, the maximum modulus (\code{"M"}) among
	 * elements of a matrix, or the \dQuote{spectral} or \code{"2"}-norm, as
	 * determined by the value of \code{type}.
	 *
	 */
	exported function "norm"("x", "type"="c(\"O\", \"I\", \"F\", \"M\", \"2\")")
	/**
	 * 
	 * Convert file paths to canonical form for the platform, to display them
	 * in a user-understandable form and so that relative and absolute paths can
	 * be compared.
	 *
	 */
	exported function "normalizePath"("path", "winslash"="\\", "mustWork"="NA")
	/**
	 * 
	 * \code{nrow} and \code{ncol} return the number of rows or columns
	 * present in \code{x}.
	 * \code{NCOL} and \code{NROW} do the same treating a vector as
	 * 1-column matrix.
	 *
	 */
	exported function "nrow"("x")
	/**
	 * 
	 * \code{nrow} and \code{ncol} return the number of rows or columns
	 * present in \code{x}.
	 * \code{NCOL} and \code{NROW} do the same treating a vector as
	 * 1-column matrix.
	 *
	 */
	exported function "NROW"("x")
	/**
	 * 
	 * Creates or coerces objects of type \code{"numeric"}.
	 * \code{is.numeric} is a more general test of an object being
	 * interpretable as numbers.
	 *
	 */
	exported function "numeric"("length"="0")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "numeric_version"("x", "strict"="TRUE")
	/**
	 * 
	 * \code{nchar} takes a character vector as an argument and
	 * returns a vector whose elements contain the sizes of
	 * the corresponding elements of \code{x}.
	 *
	 * \code{nzchar} is a fast way to find out if elements of a character
	 * vector are non-empty strings.
	 *
	 */
	exported primitive function "nzchar"("x", "keepNA" = "FALSE")
	/**
	 * 
	 * \code{ls} and \code{objects} return a vector of character strings
	 * giving the names of the objects in the specified environment.  When
	 * invoked with no argument at the top level prompt, \code{ls} shows what
	 * data sets and functions a user has defined.  When invoked with no
	 * argument inside a function, \code{ls} returns the names of the
	 * function's local variables: this is useful in conjunction with
	 * \code{browser}.
	 *
	 */
	exported function "objects"("name", "pos"="-1L", "envir"="as.environment(pos)", "all.names"="FALSE", "pattern", "sorted"="TRUE")
	/**
	 * 
	 * \R{} possesses a simple generic function mechanism which can be used for
	 * an object-oriented style of programming.  Method dispatch takes place
	 * based on the class of the first argument to the generic function.
	 *
	 */
	exported primitive function "oldClass"("x")
	/**
	 * 
	 * \R{} possesses a simple generic function mechanism which can be used for
	 * an object-oriented style of programming.  Method dispatch takes place
	 * based on the class of the first argument to the generic function.
	 *
	 */
	exported primitive function "oldClass<-"("x", "value")
	/**
	 * 
	 * Information about time zones in \R{}.  \code{Sys.timezone} returns
	 * the name of the current time zone.
	 *
	 */
	exported function "OlsonNames"()
	/**
	 * 
	 * \code{on.exit} records the expression given as its argument as needing
	 * to be executed when the current function exits (either naturally or as
	 * the result of an error).  This is useful for resetting graphical
	 * parameters or performing other cleanup actions.
	 *
	 * If no expression is provided, i.e., the call is \code{on.exit()}, then
	 * the current \code{on.exit} code is removed.
	 *
	 */
	exported primitive function "on.exit"("expr" = "NULL", "add" = "FALSE")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "open"("con", "...")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "open.connection"("con", "open"="r", "blocking"="TRUE", "...")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "open.srcfile"("con", "line", "...")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "open.srcfilealias"("con", "line", "...")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "open.srcfilecopy"("con", "line", "...")
	/**
	 * 
	 * Group generic methods can be defined for four pre-specified groups of
	 * functions, \code{Math}, \code{Ops}, \code{Summary} and \code{Complex}.
	 * (There are no objects of these names in base \R{}, but there are in the
	 * \pkg{methods} package.)
	 *
	 * A method defined for an individual member of the group takes
	 * precedence over a method defined for the group as a whole.
	 *
	 */
	exported function "Ops.data.frame"("e1", "e2"="")
	/**
	 * 
	 * Operators for the \code{"\link{Date}"} class.
	 *
	 * There is an \code{\link{Ops}} method and specific
	 * methods for \code{+} and \code{-} for the \code{\link{Date}} class.
	 *
	 */
	exported function "Ops.Date"("e1", "e2")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "Ops.difftime"("e1", "e2")
	/**
	 * 
	 * The function \code{factor} is used to encode a vector as a factor (the
	 * terms \sQuote{category} and \sQuote{enumerated type} are also used for
	 * factors).  If argument \code{ordered} is \code{TRUE}, the factor
	 * levels are assumed to be ordered.  For compatibility with S there is
	 * also a function \code{ordered}.
	 *
	 * \code{is.factor}, \code{is.ordered}, \code{as.factor} and \code{as.ordered}
	 * are the membership and coercion functions for these classes.
	 *
	 */
	exported function "Ops.factor"("e1", "e2")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "Ops.numeric_version"("e1", "e2")
	/**
	 * 
	 * The function \code{factor} is used to encode a vector as a factor (the
	 * terms \sQuote{category} and \sQuote{enumerated type} are also used for
	 * factors).  If argument \code{ordered} is \code{TRUE}, the factor
	 * levels are assumed to be ordered.  For compatibility with S there is
	 * also a function \code{ordered}.
	 *
	 * \code{is.factor}, \code{is.ordered}, \code{as.factor} and \code{as.ordered}
	 * are the membership and coercion functions for these classes.
	 *
	 */
	exported function "Ops.ordered"("e1", "e2")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "Ops.POSIXt"("e1", "e2")
	/**
	 * 
	 * Allow the user to set and examine a variety of global \emph{options}
	 * which affect the way in which \R{} computes and displays its results.
	 *
	 */
	exported function "options"("...")
	/**
	 * 
	 * \code{order} returns a permutation which rearranges its first
	 * argument into ascending or descending order, breaking ties by further
	 * arguments. \code{sort.list} is the same, using only one argument.\cr{}
	 * See the examples for how to use these functions to sort data frames,
	 * etc.
	 *
	 */
	exported function "order"("...", "na.last"="TRUE", "decreasing"="FALSE", "method"="c(\"shell\", \"radix\")")
	/**
	 * 
	 * The function \code{factor} is used to encode a vector as a factor (the
	 * terms \sQuote{category} and \sQuote{enumerated type} are also used for
	 * factors).  If argument \code{ordered} is \code{TRUE}, the factor
	 * levels are assumed to be ordered.  For compatibility with S there is
	 * also a function \code{ordered}.
	 *
	 * \code{is.factor}, \code{is.ordered}, \code{as.factor} and \code{as.ordered}
	 * are the membership and coercion functions for these classes.
	 *
	 */
	exported function "ordered"("x", "...")
	/**
	 * 
	 * The outer product of the arrays \code{X} and \code{Y} is the array
	 * \code{A} with dimension \code{c(dim(X), dim(Y))} where element
	 * \code{A[c(arrayindex.x, arrayindex.y)]
	 *   = FUN(X[arrayindex.x], Y[arrayindex.y], \dots{})}.
	 *
	 */
	exported function "outer"("X", "Y", "FUN"="*", "...")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "package_version"("x", "strict"="TRUE")
	/**
	 * 
	 * These functions allow users to set actions to be taken before packages
	 * are attached/detached and namespaces are (un)loaded.
	 *
	 */
	exported function "packageEvent"("pkgname", "event"="c(\"onLoad\", \"attach\", \"detach\", \"onUnload\")")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "packageHasNamespace"("package", "package.lib")
	/**
	 * 
	 * Generate a diagnostic message from its arguments.
	 *
	 */
	exported function "packageStartupMessage"("...", "domain"="", "appendLF"="TRUE")
	/**
	 * 
	 * Conversion and manipulation of  objects of type \code{"raw"}.
	 *
	 */
	exported function "packBits"("x", "type"="c(\"raw\", \"integer\")")
	/**
	 * 
	 * Functions to construct, coerce and check for both kinds of \R{} lists.
	 *
	 */
	exported function "pairlist"("...")
	/**
	 * 
	 * Get, set, test for and create environments.
	 *
	 */
	exported function "parent.env"("env")
	/**
	 * 
	 * Get, set, test for and create environments.
	 *
	 */
	exported function "parent.env<-"("env", "value")
	/**
	 * 
	 * These functions provide access to \code{\link{environment}}s
	 * (\sQuote{frames} in S terminology) associated with functions further
	 * up the calling stack.
	 *
	 */
	exported function "parent.frame"("n"="1")
	/**
	 * 
	 * \code{parse} returns the parsed but unevaluated expressions in a
	 * list.
	 *
	 */
	exported function "parse"("file"="", "n"="", "text"="", "prompt"="?", "keep.source"="getOption(\"keep.source\")", "srcfile"="", "encoding"="unknown")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "parseNamespaceFile"("package", "package.lib", "mustExist"="TRUE")
	/**
	 * 
	 * Concatenate vectors after converting to character.
	 *
	 */
	exported function "paste"("...", "sep"=" ", "collapse"="")
	/**
	 * 
	 * Concatenate vectors after converting to character.
	 *
	 */
	exported function "paste0"("...", "collapse"="")
	/**
	 * 
	 * Expand a path name, for example by replacing a leading tilde by the
	 * user's home directory (if defined on that platform).
	 *
	 */
	exported function "path.expand"("path")
	/**
	 * 
	 * Find the paths to one or more packages.
	 *
	 */
	exported function "path.package"("package"="", "quiet"="FALSE")
	/**
	 * 
	 * Report some of the configuration options of the version of PCRE in use
	 * in this \R{} session.
	 *
	 */
	exported function "pcre_config"()
	/**
	 * 
	 * Constants built into \R{}.
	 *
	 */
	exported var "pi"
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "pipe"("description", "open"="", "encoding"="getOption(\"encoding\")")
	/**
	 * 
	 * \code{pmatch} seeks matches for the elements of its first argument
	 * among those of its second.
	 *
	 */
	exported function "pmatch"("x", "table", "nomatch"="NA", "duplicates.ok"="FALSE")
	/**
	 * 
	 * Returns the (parallel) maxima and minima of the input values.
	 *
	 */
	exported function "pmax"("...", "na.rm"="FALSE")
	/**
	 * 
	 * Returns the (parallel) maxima and minima of the input values.
	 *
	 */
	exported function "pmax.int"("...", "na.rm"="FALSE")
	/**
	 * 
	 * Returns the (parallel) maxima and minima of the input values.
	 *
	 */
	exported function "pmin"("...", "na.rm"="FALSE")
	/**
	 * 
	 * Returns the (parallel) maxima and minima of the input values.
	 *
	 */
	exported function "pmin.int"("...", "na.rm"="FALSE")
	/**
	 * 
	 * Find zeros of a real or complex polynomial.
	 *
	 */
	exported function "polyroot"("z")
	/**
	 * 
	 * Returns the environment at a specified position in the search path.
	 *
	 */
	exported primitive function "pos.to.env"("x")
	/**
	 * 
	 * \code{Reduce} uses a binary function to successively combine the
	 * elements of a given vector and a possibly given initial value.
	 * \code{Filter} extracts the elements of a vector for which a predicate
	 * (logical) function gives true.  \code{Find} and \code{Position} give
	 * the first or last such element and its position in the vector,
	 * respectively.  \code{Map} applies a function to the corresponding
	 * elements of given vectors.  \code{Negate} creates the negation of a
	 * given function.
	 *
	 */
	exported function "Position"("f", "x", "right"="FALSE", "nomatch"="NA")
	/**
	 * 
	 * Compute a  sequence of about \code{n+1} equally spaced \sQuote{round}
	 * values which cover the range of the values in \code{x}.
	 * The values are chosen so that they are 1, 2 or 5 times a power of 10.
	 *
	 */
	exported function "pretty"("x", "...")
	/**
	 * 
	 * Compute a  sequence of about \code{n+1} equally spaced \sQuote{round}
	 * values which cover the range of the values in \code{x}.
	 * The values are chosen so that they are 1, 2 or 5 times a power of 10.
	 *
	 */
	exported function "pretty.default"("x", "n"="5", "min.n"="n%/%3", "shrink.sml"="0.75", "high.u.bias"="1.5", "u5.bias"="0.5 + 1.5 * high.u.bias", "eps.correct"="0", "...")
	/**
	 * 
	 * Formatting numbers individually and flexibly, \code{formatC()} using
	 * \code{C} style format specifications.
	 *
	 * \code{prettyNum()} is used for \dQuote{prettifying} (possibly
	 * formatted) numbers, also in \code{\link{format.default}}.
	 *
	 * \code{.format.zeros()}, an auxiliary function of \code{prettyNum()}
	 * re-formats the zeros in a vector \code{x} of formatted numbers.
	 *
	 */
	exported function "prettyNum"("x", "big.mark"="", "big.interval"="3", "small.mark"="", "small.interval"="5", "decimal.mark"="getOption(\"OutDec\")", "input.d.mark", "preserve.width"="c(\"common\", \"individual\", \"none\")", "zero.print"="", "drop0trailing"="FALSE", "is.cmplx"="NA", "...")
	/**
	 * 
	 * \code{print} prints its argument and returns it \emph{invisibly} (via
	 * \code{\link{invisible}(x)}).  It is a generic function which means that
	 * new printing methods can be easily added for new \code{\link{class}}es.
	 *
	 */
	exported function "print"("x", "...")
	/**
	 * 
	 * Change the class of an object to indicate that it should be treated
	 * \sQuote{as is}.
	 *
	 */
	exported function "print.AsIs"("x", "...")
	/**
	 * 
	 * Function \code{by} is an object-oriented wrapper for
	 * \code{\link{tapply}} applied to data frames.
	 *
	 */
	exported function "print.by"("x", "...", "vsep")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "print.condition"("x", "...")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "print.connection"("x", "...")
	/**
	 * 
	 * Print a data frame.
	 *
	 */
	exported function "print.data.frame"("x", "...", "digits"="", "quote"="FALSE", "right"="TRUE", "row.names"="TRUE")
	/**
	 * 
	 * Description of the class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "print.Date"("x", "max"="", "...")
	/**
	 * 
	 * \code{print.default} is the \emph{default} method of the generic
	 * \code{\link{print}} function which prints its argument.
	 *
	 */
	exported function "print.default"("x", "digits"="", "quote"="TRUE", "na.print"="", "print.gap"="", "right"="FALSE", "max"="", "useSource"="TRUE", "...")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "print.difftime"("x", "digits"="getOption(\"digits\")", "...")
	/**
	 * 
	 * \code{print} prints its argument and returns it \emph{invisibly} (via
	 * \code{\link{invisible}(x)}).  It is a generic function which means that
	 * new printing methods can be easily added for new \code{\link{class}}es.
	 *
	 */
	exported function "print.Dlist"("x", "...")
	/**
	 * 
	 * This function provides a way to get a list of all the DLLs (see
	 * \code{\link{dyn.load}}) that are currently loaded in the \R{} session.
	 *
	 */
	exported function "print.DLLInfo"("x", "...")
	/**
	 * 
	 * This function provides a way to get a list of all the DLLs (see
	 * \code{\link{dyn.load}}) that are currently loaded in the \R{} session.
	 *
	 */
	exported function "print.DLLInfoList"("x", "...")
	/**
	 * 
	 * This function allows us to query the set of routines
	 * in a DLL that are registered with R to enhance
	 * dynamic lookup, error handling when calling native routines,
	 * and potentially security in the future.
	 * This function provides a description of each of the
	 * registered routines in the DLL for the different interfaces,
	 * i.e.\ifelse{latex}{\out{~}}{ }\ifelse{{latex}{\out{~}}{ }}LIST{}\code{\link{.C}}, \code{\link{.Call}}, \code{\link{.Fortran}}
	 * and \code{\link{.External}}.
	 *
	 */
	exported function "print.DLLRegisteredRoutines"("x", "...")
	/**
	 * 
	 * \code{print} prints its argument and returns it \emph{invisibly} (via
	 * \code{\link{invisible}(x)}).  It is a generic function which means that
	 * new printing methods can be easily added for new \code{\link{class}}es.
	 *
	 */
	exported function "print.factor"("x", "quote"="FALSE", "max.levels"="", "width"="getOption(\"width\")", "...")
	/**
	 * 
	 * \code{print} prints its argument and returns it \emph{invisibly} (via
	 * \code{\link{invisible}(x)}).  It is a generic function which means that
	 * new printing methods can be easily added for new \code{\link{class}}es.
	 *
	 */
	exported function "print.function"("x", "useSource"="TRUE", "...")
	/**
	 * 
	 * Convert or print integers in hexadecimal format, with as many digits
	 * as are needed to display the largest, using leading zeroes as
	 * necessary.
	 *
	 */
	exported function "print.hexmode"("x", "...")
	/**
	 * 
	 * \code{library} and \code{require} load and attach add-on packages.
	 *
	 */
	exported function "print.libraryIQR"("x", "...")
	/**
	 * 
	 * \code{print} prints its argument and returns it \emph{invisibly} (via
	 * \code{\link{invisible}(x)}).  It is a generic function which means that
	 * new printing methods can be easily added for new \code{\link{class}}es.
	 *
	 */
	exported function "print.listof"("x", "...")
	/**
	 * 
	 * This function allows us to query the set of routines
	 * in a DLL that are registered with R to enhance
	 * dynamic lookup, error handling when calling native routines,
	 * and potentially security in the future.
	 * This function provides a description of each of the
	 * registered routines in the DLL for the different interfaces,
	 * i.e.\ifelse{latex}{\out{~}}{ }\ifelse{{latex}{\out{~}}{ }}LIST{}\code{\link{.C}}, \code{\link{.Call}}, \code{\link{.Fortran}}
	 * and \code{\link{.External}}.
	 *
	 */
	exported function "print.NativeRoutineList"("x", "...")
	/**
	 * 
	 * Print character strings without quotes.
	 *
	 */
	exported function "print.noquote"("x", "...")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "print.numeric_version"("x", "...")
	/**
	 * 
	 * Convert or print integers in octal format, with as many digits as are
	 * needed to display the largest, using leading zeroes as necessary.
	 *
	 */
	exported function "print.octmode"("x", "...")
	/**
	 * 
	 * \code{library} and \code{require} load and attach add-on packages.
	 *
	 */
	exported function "print.packageInfo"("x", "...")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "print.POSIXct"("x", "...")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "print.POSIXlt"("x", "...")
	/**
	 * 
	 * \code{proc.time} determines how much real and CPU time (in seconds)
	 * the currently running \R{} process has already taken.
	 *
	 */
	exported function "print.proc_time"("x", "...")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "print.restart"("x", "...")
	/**
	 * 
	 * Compute the lengths and values of runs of equal values in a vector
	 * -- or the reverse operation.
	 *
	 */
	exported function "print.rle"("x", "digits"="getOption(\"digits\")", "prefix"="", "...")
	/**
	 * 
	 * \code{print} prints its argument and returns it \emph{invisibly} (via
	 * \code{\link{invisible}(x)}).  It is a generic function which means that
	 * new printing methods can be easily added for new \code{\link{class}}es.
	 *
	 */
	exported function "print.simple.list"("x", "...")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "print.srcfile"("x", "...")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "print.srcref"("x", "useSource"="TRUE", "...")
	/**
	 * 
	 * \code{table} uses the cross-classifying factors to build a contingency
	 * table of the counts at each combination of factor levels.
	 *
	 */
	exported function "print.summary.table"("x", "digits"="max(1L, getOption(\"digits\") - 3L)", "...")
	/**
	 * 
	 * \code{summary} is a generic function used to produce result summaries
	 * of the results of various model fitting functions.  The function
	 * invokes particular \code{\link{methods}} which depend on the
	 * \code{\link{class}} of the first argument.
	 *
	 */
	exported function "print.summaryDefault"("x", "...")
	/**
	 * 
	 * \code{print} prints its argument and returns it \emph{invisibly} (via
	 * \code{\link{invisible}(x)}).  It is a generic function which means that
	 * new printing methods can be easily added for new \code{\link{class}}es.
	 *
	 */
	exported function "print.table"("x", "digits"="getOption(\"digits\")", "quote"="FALSE", "na.print"="", "zero.print"="0", "justify"="none", "...")
	/**
	 * 
	 * \code{warnings} and its \code{print} method print the
	 * variable \code{last.warning} in a pleasing form.
	 *
	 */
	exported function "print.warnings"("x", "...")
	/**
	 * 
	 * An earlier method for printing matrices, provided for S compatibility.
	 *
	 */
	exported function "prmatrix"("x", "rowlab"="dn[[1]]", "collab"="dn[[2]]", "quote"="TRUE", "right"="FALSE", "na.print"="", "...")
	/**
	 * 
	 * \code{proc.time} determines how much real and CPU time (in seconds)
	 * the currently running \R{} process has already taken.
	 *
	 */
	exported primitive function "proc.time"()
	/**
	 * 
	 * \code{prod} returns the product of all the values
	 * present in its arguments.
	 *
	 */
	exported primitive function "prod"("...", "na.rm" = "FALSE")
	/**
	 * 
	 * This is really \code{sweep(x, margin, margin.table(x, margin), "/")}
	 * for newbies, except that if \code{margin} has length zero, then one
	 * gets \code{x/sum(x)}.
	 *
	 */
	exported function "prop.table"("x", "margin"="")
	/**
	 * 
	 * Retrieve or set the dimnames of an object.
	 *
	 */
	exported function "provideDimnames"("x", "sep"="", "base"="list(LETTERS)", "unique"="TRUE")
	/**
	 * 
	 * Special mathematical functions related to the beta and gamma
	 * functions.
	 *
	 */
	exported function "psigamma"("x", "deriv"="0")
	/**
	 * 
	 * Functions to push back text lines onto a \link{connection}, and to enquire
	 * how many lines are currently pushed back.
	 *
	 */
	exported function "pushBack"("data", "connection", "newLine"="TRUE", "encoding"="c(\"\", \"bytes\", \"UTF-8\")")
	/**
	 * 
	 * Functions to push back text lines onto a \link{connection}, and to enquire
	 * how many lines are currently pushed back.
	 *
	 */
	exported function "pushBackLength"("connection")
	/**
	 * 
	 *   The function \code{quit} or its alias \code{q} terminate the current
	 *   \R{} session.
	 *
	 */
	exported function "q"("save"="default", "status"="0", "runLast"="TRUE")
	/**
	 * 
	 * \code{qr} computes the QR decomposition of a matrix.
	 *
	 */
	exported function "qr"("x", "...")
	/**
	 * 
	 * \code{qr} computes the QR decomposition of a matrix.
	 *
	 */
	exported function "qr.coef"("qr", "y")
	/**
	 * 
	 * \code{qr} computes the QR decomposition of a matrix.
	 *
	 */
	exported function "qr.default"("x", "tol"="1e-07", "LAPACK"="FALSE", "...")
	/**
	 * 
	 * \code{qr} computes the QR decomposition of a matrix.
	 *
	 */
	exported function "qr.fitted"("qr", "y", "k"="qr$rank")
	/**
	 * 
	 * Returns the original matrix from which the object was constructed or
	 * the components of the decomposition.
	 *
	 */
	exported function "qr.Q"("qr", "complete"="FALSE", "Dvec")
	/**
	 * 
	 * \code{qr} computes the QR decomposition of a matrix.
	 *
	 */
	exported function "qr.qty"("qr", "y")
	/**
	 * 
	 * \code{qr} computes the QR decomposition of a matrix.
	 *
	 */
	exported function "qr.qy"("qr", "y")
	/**
	 * 
	 * Returns the original matrix from which the object was constructed or
	 * the components of the decomposition.
	 *
	 */
	exported function "qr.R"("qr", "complete"="FALSE")
	/**
	 * 
	 * \code{qr} computes the QR decomposition of a matrix.
	 *
	 */
	exported function "qr.resid"("qr", "y")
	/**
	 * 
	 * \code{qr} computes the QR decomposition of a matrix.
	 *
	 */
	exported function "qr.solve"("a", "b", "tol"="1e-07")
	/**
	 * 
	 * Returns the original matrix from which the object was constructed or
	 * the components of the decomposition.
	 *
	 */
	exported function "qr.X"("qr", "complete"="FALSE", "ncol"="if (complete) nrow(R) else min(dim(R))")
	/**
	 * 
	 * Extract the weekday, month or quarter, or the Julian time
	 * (days since some origin).  These are generic functions: the methods
	 * for the internal date-time classes are documented here.
	 *
	 */
	exported function "quarters"("x", "abbreviate")
	/**
	 * 
	 * Extract the weekday, month or quarter, or the Julian time
	 * (days since some origin).  These are generic functions: the methods
	 * for the internal date-time classes are documented here.
	 *
	 */
	exported function "quarters.Date"("x", "...")
	/**
	 * 
	 * Extract the weekday, month or quarter, or the Julian time
	 * (days since some origin).  These are generic functions: the methods
	 * for the internal date-time classes are documented here.
	 *
	 */
	exported function "quarters.POSIXt"("x", "...")
	/**
	 * 
	 *   The function \code{quit} or its alias \code{q} terminate the current
	 *   \R{} session.
	 *
	 */
	exported function "quit"("save"="default", "status"="0", "runLast"="TRUE")
	/**
	 * 
	 * \code{substitute} returns the parse tree for the (unevaluated)
	 * expression \code{expr}, substituting any variables bound in
	 * \code{env}.
	 *
	 * \code{quote} simply returns its argument. The argument is not evaluated
	 * and can be any R expression.
	 *
	 * \code{enquote} is a simple one-line utility which transforms a call of
	 * the form \code{Foo(....)} into the call \code{quote(Foo(....))}.  This
	 * is typically used to protect a \code{\link{call}} from early evaluation.
	 *
	 */
	exported primitive function "quote"("expr")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "R_system_version"("x", "strict"="TRUE")
	/**
	 * 
	 * Return the \R{} home directory, or the full path to a component of the
	 * \R{} installation.
	 *
	 */
	exported function "R.home"("component"="home")
	/**
	 * 
	 * \code{R.Version()} provides detailed information about the version of
	 * \R{} running.
	 *
	 * \code{R.version} is a variable (a \code{\link{list}}) holding this
	 * information (and \code{version} is a copy of it for S compatibility).
	 *
	 */
	exported var "R.version"
	/**
	 * 
	 * \code{R.Version()} provides detailed information about the version of
	 * \R{} running.
	 *
	 * \code{R.version} is a variable (a \code{\link{list}}) holding this
	 * information (and \code{version} is a copy of it for S compatibility).
	 *
	 */
	exported function "R.Version"()
	/**
	 * 
	 * \code{R.Version()} provides detailed information about the version of
	 * \R{} running.
	 *
	 * \code{R.version} is a variable (a \code{\link{list}}) holding this
	 * information (and \code{version} is a copy of it for S compatibility).
	 *
	 */
	exported var "R.version.string"
	/**
	 * 
	 * \code{range} returns a vector containing the minimum and maximum of
	 * all the given arguments.
	 *
	 */
	exported primitive function "range"("...", "na.rm" = "FALSE")
	/**
	 * 
	 * \code{range} returns a vector containing the minimum and maximum of
	 * all the given arguments.
	 *
	 */
	exported function "range.default"("...", "na.rm"="FALSE", "finite"="FALSE")
	/**
	 * 
	 * Returns the sample ranks of the values in a vector.  Ties (i.e., equal
	 * values) and missing values can be handled in several ways.
	 *
	 */
	exported function "rank"("x", "na.last"="TRUE", "ties.method"="c(\"average\", \"first\", \"last\", \"random\", \"max\", \"min\")")
	/**
	 * 
	 * \code{rapply} is a recursive version of \code{\link{lapply}}.
	 *
	 */
	exported function "rapply"("object", "f", "classes"="ANY", "deflt"="", "how"="c(\"unlist\", \"replace\", \"list\")", "...")
	/**
	 * 
	 * Creates or tests for objects of type \code{"raw"}.
	 *
	 */
	exported function "raw"("length"="0")
	/**
	 * 
	 * Input and output raw connections.
	 *
	 */
	exported function "rawConnection"("object", "open"="r")
	/**
	 * 
	 * Input and output raw connections.
	 *
	 */
	exported function "rawConnectionValue"("con")
	/**
	 * 
	 * Conversion and manipulation of  objects of type \code{"raw"}.
	 *
	 */
	exported function "rawShift"("x", "n")
	/**
	 * 
	 * Conversion and manipulation of  objects of type \code{"raw"}.
	 *
	 */
	exported function "rawToBits"("x")
	/**
	 * 
	 * Conversion and manipulation of  objects of type \code{"raw"}.
	 *
	 */
	exported function "rawToChar"("x", "multiple"="FALSE")
	/**
	 * 
	 * Take a sequence of vector, matrix or data-frame arguments and combine
	 * by \emph{c}olumns or \emph{r}ows, respectively.  These are generic
	 * functions with methods for other \R{} classes.
	 *
	 */
	exported function "rbind"("...", "deparse.level"="1")
	/**
	 * 
	 * Take a sequence of vector, matrix or data-frame arguments and combine
	 * by \emph{c}olumns or \emph{r}ows, respectively.  These are generic
	 * functions with methods for other \R{} classes.
	 *
	 */
	exported function "rbind.data.frame"("...", "deparse.level"="1", "make.row.names"="TRUE", "stringsAsFactors"="default.stringsAsFactors()")
	/**
	 * 
	 * The condition number of a regular (square) matrix is the product of
	 * the \emph{norm} of the matrix and the norm of its inverse (or
	 * pseudo-inverse), and hence depends on the kind of matrix-norm.
	 *
	 * \code{kappa()} computes by default (an estimate of) the 2-norm
	 * condition number of a matrix or of the \eqn{{R}} matrix of a \eqn{{QR}}
	 * decomposition, perhaps of a linear fit.  The 2-norm condition number
	 * can be shown to be the ratio of the largest to the smallest
	 * \emph{non-zero} singular value of the matrix.
	 *
	 * \code{rcond()} computes an approximation of the \bold{r}eciprocal
	 * \bold{cond}ition number, see the details.
	 *
	 */
	exported function "rcond"("x", "norm"="c(\"O\", \"I\", \"1\")", "triangular"="FALSE", "...")
	/**
	 * 
	 * Basic functions which support complex arithmetic in \R{}, in addition to
	 * the arithmetic operators \code{+}, \code{-}, \code{*}, \code{/}, and \code{^}.
	 *
	 */
	exported primitive function "Re"("z")
	/**
	 * 
	 * Reads or writes an \R{} object from/to a file in Debian Control File
	 * format.
	 *
	 */
	exported function "read.dcf"("file", "fields"="", "all"="FALSE", "keep.white"="")
	/**
	 * 
	 * Read binary data from or write binary data to a connection or raw vector.
	 *
	 */
	exported function "readBin"("con", "what", "n"="1", "size"="NA", "signed"="TRUE", "endian"=".Platform$endian")
	/**
	 * 
	 * Transfer character strings to and from connections, without assuming
	 * they are null-terminated on the connection.
	 *
	 */
	exported function "readChar"("con", "nchars", "useBytes"="FALSE")
	/**
	 * 
	 * \code{readline} reads a line from the terminal (in interactive use).
	 *
	 */
	exported function "readline"("prompt"="")
	/**
	 * 
	 * Read some or all text lines from a connection.
	 *
	 */
	exported function "readLines"("con"="stdin()", "n"="-1L", "ok"="TRUE", "warn"="TRUE", "encoding"="unknown", "skipNul"="FALSE")
	/**
	 * 
	 * Functions to write a single \R{} object to a file, and to restore it.
	 *
	 */
	exported function "readRDS"("file", "refhook"="")
	/**
	 * 
	 * Read as file such as \file{.Renviron} or \file{Renviron.site} in the
	 * format described in the help for \link{Startup}, and set environment
	 * variables as defined in the file.
	 *
	 */
	exported function "readRenviron"("path")
	/**
	 * 
	 * \code{Recall} is used as a placeholder for the name of the function
	 * in which it is called.  It allows the definition of recursive
	 * functions which still work after being renamed, see example below.
	 *
	 */
	exported function "Recall"("...")
	/**
	 * 
	 * \code{Reduce} uses a binary function to successively combine the
	 * elements of a given vector and a possibly given initial value.
	 * \code{Filter} extracts the elements of a vector for which a predicate
	 * (logical) function gives true.  \code{Find} and \code{Position} give
	 * the first or last such element and its position in the vector,
	 * respectively.  \code{Map} applies a function to the corresponding
	 * elements of given vectors.  \code{Negate} creates the negation of a
	 * given function.
	 *
	 */
	exported function "Reduce"("f", "x", "init", "right"="FALSE", "accumulate"="FALSE")
	/**
	 * 
	 * Registers an \R{} function to be called upon garbage collection of
	 * object or (optionally) at the end of an \R{} session.
	 *
	 */
	exported function "reg.finalizer"("e", "f", "onexit"="FALSE")
	/**
	 * 
	 * \code{grep}, \code{grepl}, \code{regexpr}, \code{gregexpr} and
	 * \code{regexec} search for matches to argument \code{pattern} within
	 * each element of a character vector: they differ in the format of and
	 * amount of detail in the results.
	 *
	 * \code{sub} and \code{gsub} perform replacement of the first and all
	 * matches respectively.
	 *
	 */
	exported function "regexec"("pattern", "text", "ignore.case"="FALSE", "perl"="FALSE", "fixed"="FALSE", "useBytes"="FALSE")
	/**
	 * 
	 * \code{grep}, \code{grepl}, \code{regexpr}, \code{gregexpr} and
	 * \code{regexec} search for matches to argument \code{pattern} within
	 * each element of a character vector: they differ in the format of and
	 * amount of detail in the results.
	 *
	 * \code{sub} and \code{gsub} perform replacement of the first and all
	 * matches respectively.
	 *
	 */
	exported function "regexpr"("pattern", "text", "ignore.case"="FALSE", "perl"="FALSE", "fixed"="FALSE", "useBytes"="FALSE")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "registerS3method"("genname", "class", "method", "envir"="parent.frame()")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "registerS3methods"("info", "package", "env")
	/**
	 * 
	 * Extract or replace matched substrings from match data obtained by
	 * \code{\link{regexpr}}, \code{\link{gregexpr}} or
	 * \code{\link{regexec}}.
	 *
	 */
	exported function "regmatches"("x", "m", "invert"="FALSE")
	/**
	 * 
	 * Extract or replace matched substrings from match data obtained by
	 * \code{\link{regexpr}}, \code{\link{gregexpr}} or
	 * \code{\link{regexec}}.
	 *
	 */
	exported function "regmatches<-"("x", "m", "invert"="FALSE", "value")
	/**
	 * 
	 * \code{remove} and \code{rm} can be used to remove objects.  These can
	 * be specified successively as character strings, or in the character
	 * vector \code{list}, or through a combination of both.  All objects
	 * thus specified will be removed.
	 *
	 * If \code{envir} is NULL then the currently active environment is
	 * searched first.
	 *
	 * If \code{inherits} is \code{TRUE} then parents of the supplied
	 * directory are searched until a variable with the given name is
	 * encountered.  A warning is printed for each variable that is not
	 * found.
	 *
	 */
	exported function "remove"("...", "list"="character()", "pos"="-1", "envir"="as.environment(pos)", "inherits"="FALSE")
	/**
	 * 
	 * \code{addTaskCallback} registers an R function
	 * that is to be called each time a top-level task
	 * is completed.
	 *
	 * \code{removeTaskCallback} un-registers a function
	 * that was registered earlier via \code{addTaskCallback}.
	 *
	 * These provide low-level access to the internal/native
	 * mechanism for managing task-completion actions.
	 * One can use \code{\link{taskCallbackManager}}
	 * at the S-language level to manage S functions
	 * that are called at the completion of each task.
	 * This is easier and more direct.
	 *
	 */
	exported function "removeTaskCallback"("id")
	/**
	 * 
	 * \code{rep} replicates the values in \code{x}.  It is a generic
	 * function, and the (internal) default method is described here.
	 *
	 * \code{rep.int} and \code{rep_len} are faster simplified versions for
	 * two common cases.  They are not generic.
	 *
	 */
	exported primitive function "rep"("x", "...")
	/**
	 * 
	 * \code{rep} replicates the values in \code{x}.  It is a generic
	 * function, and the (internal) default method is described here.
	 *
	 * \code{rep.int} and \code{rep_len} are faster simplified versions for
	 * two common cases.  They are not generic.
	 *
	 */
	exported function "rep_len"("x", "length.out")
	/**
	 * 
	 * \code{rep} replicates the values in \code{x}.  It is a generic
	 * function, and the (internal) default method is described here.
	 *
	 * \code{rep.int} and \code{rep_len} are faster simplified versions for
	 * two common cases.  They are not generic.
	 *
	 */
	exported function "rep.Date"("x", "...")
	/**
	 * 
	 * \code{rep} replicates the values in \code{x}.  It is a generic
	 * function, and the (internal) default method is described here.
	 *
	 * \code{rep.int} and \code{rep_len} are faster simplified versions for
	 * two common cases.  They are not generic.
	 *
	 */
	exported function "rep.factor"("x", "...")
	/**
	 * 
	 * \code{rep} replicates the values in \code{x}.  It is a generic
	 * function, and the (internal) default method is described here.
	 *
	 * \code{rep.int} and \code{rep_len} are faster simplified versions for
	 * two common cases.  They are not generic.
	 *
	 */
	exported function "rep.int"("x", "times")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "rep.numeric_version"("x", "...")
	/**
	 * 
	 * \code{rep} replicates the values in \code{x}.  It is a generic
	 * function, and the (internal) default method is described here.
	 *
	 * \code{rep.int} and \code{rep_len} are faster simplified versions for
	 * two common cases.  They are not generic.
	 *
	 */
	exported function "rep.POSIXct"("x", "...")
	/**
	 * 
	 * \code{rep} replicates the values in \code{x}.  It is a generic
	 * function, and the (internal) default method is described here.
	 *
	 * \code{rep.int} and \code{rep_len} are faster simplified versions for
	 * two common cases.  They are not generic.
	 *
	 */
	exported function "rep.POSIXlt"("x", "...")
	/**
	 * 
	 * These are the basic control-flow constructs of the \R{} language.  They
	 * function in much the same way as control statements in any Algol-like
	 * language.  They are all \link{reserved} words.
	 *
	 */
	exported primitive function "repeat"("NULL")
	/**
	 * 
	 *\code{replace} replaces the values in \code{x}
	 *with indices given in \code{list} by those given in \code{values}.
	 *If necessary, the values in \code{values} are recycled.
	 *
	 */
	exported function "replace"("x", "list", "values")
	/**
	 * 
	 * \code{lapply} returns a list of the same length as \code{X}, each
	 * element of which is the result of applying \code{FUN} to the
	 * corresponding element of \code{X}.
	 *
	 * \code{sapply} is a user-friendly version and wrapper of \code{lapply}
	 * by default returning a vector, matrix or, if \code{simplify = "array"}, an
	 * array if appropriate, by applying \code{simplify2array()}.
	 * \code{sapply(x, f, simplify = FALSE, USE.NAMES = FALSE)} is the same as
	 * \code{lapply(x, f)}.
	 *
	 * \code{vapply} is similar to \code{sapply}, but has a pre-specified
	 * type of return value, so it can be safer (and sometimes faster) to
	 * use.
	 *
	 * \code{replicate} is a wrapper for the common use of \code{sapply} for
	 * repeated evaluation of an expression (which will usually involve
	 * random number generation).
	 *
	 * \code{simplify2array()} is the utility called from \code{sapply()}
	 * when \code{simplify} is not false and is similarly called from
	 * \code{\link{mapply}()}.
	 *
	 */
	exported function "replicate"("n", "expr", "simplify"="array")
	/**
	 * 
	 * \code{library} and \code{require} load and attach add-on packages.
	 *
	 */
	exported function "require"("package", "lib.loc"="", "quietly"="FALSE", "warn.conflicts"="TRUE", "character.only"="FALSE")
	/**
	 * 
	 * Functions to load and unload name spaces.
	 *
	 */
	exported function "requireNamespace"("package", "...", "quietly"="FALSE")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "restartDescription"("r")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "restartFormals"("r")
	/**
	 * 
	 * This function marks an object so that a message is printed whenever the
	 * internal code copies the object.  It is a
	 * major cause of hard-to-predict memory use in R.
	 *
	 */
	exported primitive function "retracemem"("x", "previous" = "NULL")
	/**
	 * 
	 * These functions provide the base mechanisms for defining
	 * new functions in the \R{} language.
	 *
	 */
	exported primitive function "return"("NULL")
	/**
	 * 
	 * A call to \code{trace} allows you to insert debugging code (e.g., a
	 * call to \code{\link{browser}} or \code{\link{recover}}) at chosen
	 * places in any function.  A call to \code{untrace} cancels the tracing.
	 * Specified methods can be traced the same way, without tracing all
	 * calls to the generic function.  Trace code (\code{tracer}) can be any
	 * \R{} expression.  Tracing can be temporarily turned on or off globally
	 * by calling \code{tracingState}.
	 *
	 */
	exported function "returnValue"("default"="")
	/**
	 * 
	 * \code{rev} provides a reversed version of its argument.  It is generic
	 * function with a default method for vectors and one for
	 * \code{\link{dendrogram}}s.
	 *
	 * Note that this is no longer needed (nor efficient) for obtaining
	 * vectors sorted into descending order, since that is now rather more
	 * directly achievable by \code{\link{sort}(x, decreasing = TRUE)}.
	 *
	 */
	exported function "rev"("x")
	/**
	 * 
	 * \code{rev} provides a reversed version of its argument.  It is generic
	 * function with a default method for vectors and one for
	 * \code{\link{dendrogram}}s.
	 *
	 * Note that this is no longer needed (nor efficient) for obtaining
	 * vectors sorted into descending order, since that is now rather more
	 * directly achievable by \code{\link{sort}(x, decreasing = TRUE)}.
	 *
	 */
	exported function "rev.default"("x")
	/**
	 * 
	 * Compute the lengths and values of runs of equal values in a vector
	 * -- or the reverse operation.
	 *
	 */
	exported function "rle"("x")
	/**
	 * 
	 * \code{remove} and \code{rm} can be used to remove objects.  These can
	 * be specified successively as character strings, or in the character
	 * vector \code{list}, or through a combination of both.  All objects
	 * thus specified will be removed.
	 *
	 * If \code{envir} is NULL then the currently active environment is
	 * searched first.
	 *
	 * If \code{inherits} is \code{TRUE} then parents of the supplied
	 * directory are searched until a variable with the given name is
	 * encountered.  A warning is printed for each variable that is not
	 * found.
	 *
	 */
	exported function "rm"("...", "list"="character()", "pos"="-1", "envir"="as.environment(pos)", "inherits"="FALSE")
	/**
	 * 
	 * \code{.Random.seed} is an integer vector, containing the random number
	 * generator (RNG) \bold{state} for random number generation in \R{}.  It
	 * can be saved and restored, but should not be altered by the user.
	 *
	 * \code{RNGkind} is a more friendly interface to query or set the kind
	 * of RNG in use.
	 *
	 * \code{RNGversion} can be used to set the random generators as they
	 * were in an earlier \R{} version (for reproducibility).
	 *
	 * \code{set.seed} is the recommended way to specify seeds.
	 *
	 */
	exported function "RNGkind"("kind"="", "normal.kind"="")
	/**
	 * 
	 * \code{.Random.seed} is an integer vector, containing the random number
	 * generator (RNG) \bold{state} for random number generation in \R{}.  It
	 * can be saved and restored, but should not be altered by the user.
	 *
	 * \code{RNGkind} is a more friendly interface to query or set the kind
	 * of RNG in use.
	 *
	 * \code{RNGversion} can be used to set the random generators as they
	 * were in an earlier \R{} version (for reproducibility).
	 *
	 * \code{set.seed} is the recommended way to specify seeds.
	 *
	 */
	exported function "RNGversion"("vstr")
	/**
	 * 
	 * \code{ceiling} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the smallest integers not less than the
	 * corresponding elements of \code{x}.
	 *
	 * \code{floor} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the largest integers not greater than the
	 * corresponding elements of \code{x}.
	 *
	 * \code{trunc} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the integers formed by truncating the values in
	 * \code{x} toward \code{0}.
	 *
	 * \code{round} rounds the values in its first argument to the specified
	 * number of decimal places (default 0).
	 *
	 * \code{signif} rounds the values in its first argument to the specified
	 * number of significant digits.
	 *
	 */
	exported primitive function "round"("x", "digits" = "0")
	/**
	 * 
	 * Round or truncate date-time objects.
	 *
	 */
	exported function "round.Date"("x", "...")
	/**
	 * 
	 * Round or truncate date-time objects.
	 *
	 */
	exported function "round.POSIXt"("x", "units"="c(\"secs\", \"mins\", \"hours\", \"days\")")
	/**
	 * 
	 * Returns a matrix of integers indicating their row number in a
	 * matrix-like object, or a factor indicating the row labels.
	 *
	 */
	exported function "row"("x", "as.factor"="FALSE")
	/**
	 * 
	 * All data frames have a row names attribute, a character vector of
	 * length the number of rows with no duplicates nor missing values.
	 *
	 * For convenience, these are generic functions for which users can write
	 * other methods, and there are default methods for arrays.  The
	 * description here is for the \code{data.frame} method.
	 *
	 */
	exported function "row.names"("x")
	/**
	 * 
	 * All data frames have a row names attribute, a character vector of
	 * length the number of rows with no duplicates nor missing values.
	 *
	 * For convenience, these are generic functions for which users can write
	 * other methods, and there are default methods for arrays.  The
	 * description here is for the \code{data.frame} method.
	 *
	 */
	exported function "row.names.data.frame"("x")
	/**
	 * 
	 * All data frames have a row names attribute, a character vector of
	 * length the number of rows with no duplicates nor missing values.
	 *
	 * For convenience, these are generic functions for which users can write
	 * other methods, and there are default methods for arrays.  The
	 * description here is for the \code{data.frame} method.
	 *
	 */
	exported function "row.names.default"("x")
	/**
	 * 
	 * All data frames have a row names attribute, a character vector of
	 * length the number of rows with no duplicates nor missing values.
	 *
	 * For convenience, these are generic functions for which users can write
	 * other methods, and there are default methods for arrays.  The
	 * description here is for the \code{data.frame} method.
	 *
	 */
	exported function "row.names<-"("x", "value")
	/**
	 * 
	 * All data frames have a row names attribute, a character vector of
	 * length the number of rows with no duplicates nor missing values.
	 *
	 * For convenience, these are generic functions for which users can write
	 * other methods, and there are default methods for arrays.  The
	 * description here is for the \code{data.frame} method.
	 *
	 */
	exported function "row.names<-.data.frame"("x", "value")
	/**
	 * 
	 * All data frames have a row names attribute, a character vector of
	 * length the number of rows with no duplicates nor missing values.
	 *
	 * For convenience, these are generic functions for which users can write
	 * other methods, and there are default methods for arrays.  The
	 * description here is for the \code{data.frame} method.
	 *
	 */
	exported function "row.names<-.default"("x", "value")
	/**
	 * 
	 * Form row and column sums and means for numeric arrays (or data frames).
	 *
	 */
	exported function "rowMeans"("x", "na.rm"="FALSE", "dims"="1")
	/**
	 * 
	 * Retrieve or set the row or column names of a matrix-like object.
	 *
	 */
	exported function "rownames"("x", "do.NULL"="TRUE", "prefix"="row")
	/**
	 * 
	 * Retrieve or set the row or column names of a matrix-like object.
	 *
	 */
	exported function "rownames<-"("x", "value")
	/**
	 * 
	 * Compute column sums across rows of a numeric matrix-like object for
	 * each level of a grouping variable.  \code{rowsum} is generic, with a
	 * method for data frames and a default method for vectors and matrices.
	 *
	 */
	exported function "rowsum"("x", "group", "reorder"="TRUE", "...")
	/**
	 * 
	 * Compute column sums across rows of a numeric matrix-like object for
	 * each level of a grouping variable.  \code{rowsum} is generic, with a
	 * method for data frames and a default method for vectors and matrices.
	 *
	 */
	exported function "rowsum.data.frame"("x", "group", "reorder"="TRUE", "na.rm"="FALSE", "...")
	/**
	 * 
	 * Compute column sums across rows of a numeric matrix-like object for
	 * each level of a grouping variable.  \code{rowsum} is generic, with a
	 * method for data frames and a default method for vectors and matrices.
	 *
	 */
	exported function "rowsum.default"("x", "group", "reorder"="TRUE", "na.rm"="FALSE", "...")
	/**
	 * 
	 * Form row and column sums and means for numeric arrays (or data frames).
	 *
	 */
	exported function "rowSums"("x", "na.rm"="FALSE", "dims"="1")
	/**
	 * 
	 * \code{sample} takes a sample of the specified size from the elements
	 * of \code{x} using either with or without replacement.
	 *
	 */
	exported function "sample"("x", "size", "replace"="FALSE", "prob"="")
	/**
	 * 
	 * \code{sample} takes a sample of the specified size from the elements
	 * of \code{x} using either with or without replacement.
	 *
	 */
	exported function "sample.int"("n", "size", "replace"="FALSE", "prob"="")
	/**
	 * 
	 * \code{lapply} returns a list of the same length as \code{X}, each
	 * element of which is the result of applying \code{FUN} to the
	 * corresponding element of \code{X}.
	 *
	 * \code{sapply} is a user-friendly version and wrapper of \code{lapply}
	 * by default returning a vector, matrix or, if \code{simplify = "array"}, an
	 * array if appropriate, by applying \code{simplify2array()}.
	 * \code{sapply(x, f, simplify = FALSE, USE.NAMES = FALSE)} is the same as
	 * \code{lapply(x, f)}.
	 *
	 * \code{vapply} is similar to \code{sapply}, but has a pre-specified
	 * type of return value, so it can be safer (and sometimes faster) to
	 * use.
	 *
	 * \code{replicate} is a wrapper for the common use of \code{sapply} for
	 * repeated evaluation of an expression (which will usually involve
	 * random number generation).
	 *
	 * \code{simplify2array()} is the utility called from \code{sapply()}
	 * when \code{simplify} is not false and is similarly called from
	 * \code{\link{mapply}()}.
	 *
	 */
	exported function "sapply"("X", "FUN", "...", "simplify"="TRUE", "USE.NAMES"="TRUE")
	/**
	 * 
	 * \code{save} writes an external representation of \R{} objects to the
	 * specified file.  The objects can be read back from the file at a later
	 * date by using the function \code{\link{load}} or \code{\link{attach}}
	 * (or \code{\link{data}} in some cases).
	 *
	 * \code{save.image()} is just a short-cut for \sQuote{save my current
	 *   workspace}, i.e., \code{save(list = ls(all.names = TRUE), file =
	 *   ".RData", envir = .GlobalEnv)}.
	 * It is also what happens with \code{\link{q}("yes")}.
	 *
	 */
	exported function "save"("...", "list"="character()", "file"="stop(\"'file' must be specified\")", "ascii"="FALSE", "version"="", "envir"="parent.frame()", "compress"="isTRUE(!ascii)", "compression_level", "eval.promises"="TRUE", "precheck"="TRUE")
	/**
	 * 
	 * \code{save} writes an external representation of \R{} objects to the
	 * specified file.  The objects can be read back from the file at a later
	 * date by using the function \code{\link{load}} or \code{\link{attach}}
	 * (or \code{\link{data}} in some cases).
	 *
	 * \code{save.image()} is just a short-cut for \sQuote{save my current
	 *   workspace}, i.e., \code{save(list = ls(all.names = TRUE), file =
	 *   ".RData", envir = .GlobalEnv)}.
	 * It is also what happens with \code{\link{q}("yes")}.
	 *
	 */
	exported function "save.image"("file"=".RData", "version"="", "ascii"="FALSE", "compress"="!ascii", "safe"="TRUE")
	/**
	 * 
	 * Functions to write a single \R{} object to a file, and to restore it.
	 *
	 */
	exported function "saveRDS"("object", "file"="", "ascii"="FALSE", "version"="", "compress"="TRUE", "refhook"="")
	/**
	 * 
	 * \code{scale} is generic function whose default method centers and/or
	 * scales the columns of a numeric matrix.
	 *
	 */
	exported function "scale"("x", "center"="TRUE", "scale"="TRUE")
	/**
	 * 
	 * \code{scale} is generic function whose default method centers and/or
	 * scales the columns of a numeric matrix.
	 *
	 */
	exported function "scale.default"("x", "center"="TRUE", "scale"="TRUE")
	/**
	 * 
	 * Read data into a vector or list from the console or file.
	 *
	 */
	exported function "scan"("file"="", "what"="double()", "nmax"="-1L", "n"="-1L", "sep"="", "quote"="if (identical(sep, \"\\n\")) \"\" else \"'\\\"\"", "dec"=".", "skip"="0", "nlines"="0", "na.strings"="NA", "flush"="FALSE", "fill"="FALSE", "strip.white"="FALSE", "quiet"="FALSE", "blank.lines.skip"="TRUE", "multi.line"="TRUE", "comment.char"="", "allowEscapes"="FALSE", "fileEncoding"="", "encoding"="unknown", "text", "skipNul"="FALSE")
	/**
	 * 
	 * Gives a list of \code{\link{attach}}ed \emph{packages}
	 * (see \code{\link{library}}), and \R{} objects, usually
	 * \code{\link{data.frame}s}.
	 *
	 */
	exported function "search"()
	/**
	 * 
	 * Gives a list of \code{\link{attach}}ed \emph{packages}
	 * (see \code{\link{library}}), and \R{} objects, usually
	 * \code{\link{data.frame}s}.
	 *
	 */
	exported function "searchpaths"()
	/**
	 * 
	 * Functions to re-position connections.
	 *
	 */
	exported function "seek"("con", "...")
	/**
	 * 
	 * Functions to re-position connections.
	 *
	 */
	exported function "seek.connection"("con", "where"="NA", "origin"="start", "rw"="", "...")
	/**
	 * 
	 * Generate regular sequences.  \code{seq} is a standard generic with a
	 * default method.  \code{seq.int} is a primitive which can be
	 * much faster but has a few restrictions.  \code{seq_along} and
	 * \code{seq_len} are very fast primitives for two common cases.
	 *
	 */
	exported function "seq"("...")
	/**
	 * 
	 * Generate regular sequences.  \code{seq} is a standard generic with a
	 * default method.  \code{seq.int} is a primitive which can be
	 * much faster but has a few restrictions.  \code{seq_along} and
	 * \code{seq_len} are very fast primitives for two common cases.
	 *
	 */
	exported primitive function "seq_along"("along.with")
	/**
	 * 
	 * Generate regular sequences.  \code{seq} is a standard generic with a
	 * default method.  \code{seq.int} is a primitive which can be
	 * much faster but has a few restrictions.  \code{seq_along} and
	 * \code{seq_len} are very fast primitives for two common cases.
	 *
	 */
	exported primitive function "seq_len"("length.out")
	/**
	 * 
	 * The method for \code{\link{seq}} for objects of class class
	 * \code{"\link{Date}"} representing calendar dates.
	 *
	 */
	exported function "seq.Date"("from", "to", "by", "length.out"="", "along.with"="", "...")
	/**
	 * 
	 * Generate regular sequences.  \code{seq} is a standard generic with a
	 * default method.  \code{seq.int} is a primitive which can be
	 * much faster but has a few restrictions.  \code{seq_along} and
	 * \code{seq_len} are very fast primitives for two common cases.
	 *
	 */
	exported function "seq.default"("from"="1", "to"="1", "by"="((to - from)/(length.out - 1))", "length.out"="", "along.with"="", "...")
	/**
	 * 
	 * Generate regular sequences.  \code{seq} is a standard generic with a
	 * default method.  \code{seq.int} is a primitive which can be
	 * much faster but has a few restrictions.  \code{seq_along} and
	 * \code{seq_len} are very fast primitives for two common cases.
	 *
	 */
	exported primitive function "seq.int"("from", "to", "by", "length.out", "along.with", "...")
	/**
	 * 
	 * The method for \code{\link{seq}} for date-time classes.
	 *
	 */
	exported function "seq.POSIXt"("from", "to", "by", "length.out"="", "along.with"="", "...")
	/**
	 * 
	 * For each element of \code{nvec} the sequence \code{\link{seq_len}(nvec[i])}
	 * is created.  These are concatenated and the result returned.
	 *
	 */
	exported function "sequence"("nvec")
	/**
	 * 
	 * A simple low-level interface for serializing to connections.
	 *
	 */
	exported function "serialize"("object", "connection", "ascii"="FALSE", "xdr"="TRUE", "version"="", "refhook"="")
	/**
	 * 
	 * \code{.Random.seed} is an integer vector, containing the random number
	 * generator (RNG) \bold{state} for random number generation in \R{}.  It
	 * can be saved and restored, but should not be altered by the user.
	 *
	 * \code{RNGkind} is a more friendly interface to query or set the kind
	 * of RNG in use.
	 *
	 * \code{RNGversion} can be used to set the random generators as they
	 * were in an earlier \R{} version (for reproducibility).
	 *
	 * \code{set.seed} is the recommended way to specify seeds.
	 *
	 */
	exported function "set.seed"("seed", "kind"="", "normal.kind"="")
	/**
	 * 
	 * Performs \bold{set} union, intersection, (asymmetric!) difference,
	 * equality and membership on two vectors.
	 *
	 */
	exported function "setdiff"("x", "y")
	/**
	 * 
	 * Performs \bold{set} union, intersection, (asymmetric!) difference,
	 * equality and membership on two vectors.
	 *
	 */
	exported function "setequal"("x", "y")
	/**
	 * 
	 * These functions allow users to set actions to be taken before packages
	 * are attached/detached and namespaces are (un)loaded.
	 *
	 */
	exported function "setHook"("hookName", "value", "action"="c(\"append\", \"prepend\", \"replace\")")
	/**
	 * 
	 * Internal namespace support functions.  Not intended to be called
	 * directly, and only visible because of the special nature of the
	 * \pkg{base} namespace.
	 *
	 */
	exported function "setNamespaceInfo"("ns", "which", "val")
	/**
	 * 
	 * Functions to set CPU and/or elapsed time limits for top-level
	 * computations or the current session.
	 *
	 */
	exported function "setSessionTimeLimit"("cpu"="Inf", "elapsed"="Inf")
	/**
	 * 
	 * Functions to set CPU and/or elapsed time limits for top-level
	 * computations or the current session.
	 *
	 */
	exported function "setTimeLimit"("cpu"="Inf", "elapsed"="Inf", "transient"="FALSE")
	/**
	 * 
	 * \code{getwd} returns an absolute filepath representing the current
	 * working directory of the \R{} process; \code{setwd(dir)} is used to set
	 * the working directory to \code{dir}.
	 *
	 */
	exported function "setwd"("dir")
	/**
	 * 
	 * Display aspects of \link{connections}.
	 *
	 */
	exported function "showConnections"("all"="FALSE")
	/**
	 * 
	 * Quote a string to be passed to an operating system shell.
	 *
	 */
	exported function "shQuote"("string", "type"="c(\"sh\", \"csh\", \"cmd\", \"cmd2\")")
	/**
	 * 
	 * \code{sign} returns a vector with the signs of the corresponding
	 * elements of \code{x} (the sign of a real number is 1, 0, or \eqn{{-1}}
	 * if the number is positive, zero, or negative, respectively).
	 *
	 * Note that \code{sign} does not operate on complex vectors.
	 *
	 */
	exported primitive function "sign"("x")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "signalCondition"("cond")
	/**
	 * 
	 * \code{ceiling} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the smallest integers not less than the
	 * corresponding elements of \code{x}.
	 *
	 * \code{floor} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the largest integers not greater than the
	 * corresponding elements of \code{x}.
	 *
	 * \code{trunc} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the integers formed by truncating the values in
	 * \code{x} toward \code{0}.
	 *
	 * \code{round} rounds the values in its first argument to the specified
	 * number of decimal places (default 0).
	 *
	 * \code{signif} rounds the values in its first argument to the specified
	 * number of significant digits.
	 *
	 */
	exported primitive function "signif"("x", "digits" = "6")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "simpleCondition"("message", "call"="")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "simpleError"("message", "call"="")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "simpleMessage"("message", "call"="")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "simpleWarning"("message", "call"="")
	/**
	 * 
	 * \code{lapply} returns a list of the same length as \code{X}, each
	 * element of which is the result of applying \code{FUN} to the
	 * corresponding element of \code{X}.
	 *
	 * \code{sapply} is a user-friendly version and wrapper of \code{lapply}
	 * by default returning a vector, matrix or, if \code{simplify = "array"}, an
	 * array if appropriate, by applying \code{simplify2array()}.
	 * \code{sapply(x, f, simplify = FALSE, USE.NAMES = FALSE)} is the same as
	 * \code{lapply(x, f)}.
	 *
	 * \code{vapply} is similar to \code{sapply}, but has a pre-specified
	 * type of return value, so it can be safer (and sometimes faster) to
	 * use.
	 *
	 * \code{replicate} is a wrapper for the common use of \code{sapply} for
	 * repeated evaluation of an expression (which will usually involve
	 * random number generation).
	 *
	 * \code{simplify2array()} is the utility called from \code{sapply()}
	 * when \code{simplify} is not false and is similarly called from
	 * \code{\link{mapply}()}.
	 *
	 */
	exported function "simplify2array"("x", "higher"="TRUE")
	/**
	 * 
	 * These functions give the obvious trigonometric functions.  They
	 * respectively compute the cosine, sine, tangent, arc-cosine, arc-sine,
	 * arc-tangent, and the two-argument arc-tangent.
	 *
	 * \code{cospi(x)}, \code{sinpi(x)}, and \code{tanpi(x)}, compute
	 * \code{cos(pi*x)}, \code{sin(pi*x)}, and \code{tan(pi*x)}.
	 *
	 */
	exported primitive function "sin"("x")
	/**
	 * 
	 * Create, coerce to or test for a double-precision vector.
	 *
	 */
	exported function "single"("length"="0")
	/**
	 * 
	 * These functions give the obvious hyperbolic functions.  They
	 * respectively compute the hyperbolic cosine, sine, tangent, and their
	 * inverses, arc-cosine, arc-sine, arc-tangent (or \sQuote{\emph{area cosine}},
	 * etc).
	 *
	 */
	exported primitive function "sinh"("x")
	/**
	 * 
	 * \code{sink} diverts \R{} output to a connection (and stops such diversions).
	 *
	 * \code{sink.number()} reports how many diversions are in use.
	 *
	 * \code{sink.number(type = "message")} reports the number of the
	 * connection currently being used for error messages.
	 *
	 */
	exported function "sink"("file"="", "append"="FALSE", "type"="c(\"output\", \"message\")", "split"="FALSE")
	/**
	 * 
	 * \code{sink} diverts \R{} output to a connection (and stops such diversions).
	 *
	 * \code{sink.number()} reports how many diversions are in use.
	 *
	 * \code{sink.number(type = "message")} reports the number of the
	 * connection currently being used for error messages.
	 *
	 */
	exported function "sink.number"("type"="c(\"output\", \"message\")")
	/**
	 * 
	 * These functions give the obvious trigonometric functions.  They
	 * respectively compute the cosine, sine, tangent, arc-cosine, arc-sine,
	 * arc-tangent, and the two-argument arc-tangent.
	 *
	 * \code{cospi(x)}, \code{sinpi(x)}, and \code{tanpi(x)}, compute
	 * \code{cos(pi*x)}, \code{sin(pi*x)}, and \code{tan(pi*x)}.
	 *
	 */
	exported primitive function "sinpi"("x")
	/**
	 * 
	 * Returns a matrix of integers indicating the number of their slice in a
	 * given array.
	 *
	 */
	exported function "slice.index"("x", "MARGIN")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "socketConnection"("host"="localhost", "port", "server"="FALSE", "blocking"="FALSE", "open"="a+", "encoding"="getOption(\"encoding\")", "timeout"="getOption(\"timeout\")")
	/**
	 * 
	 * Waits for the first of several socket connections to become available.
	 *
	 */
	exported function "socketSelect"("socklist", "write"="FALSE", "timeout"="")
	/**
	 * 
	 * This generic function solves the equation \code{a %*% x = b} for \code{x},
	 * where \code{b} can be either a vector or a matrix.
	 *
	 */
	exported function "solve"("a", "b", "...")
	/**
	 * 
	 * This generic function solves the equation \code{a %*% x = b} for \code{x},
	 * where \code{b} can be either a vector or a matrix.
	 *
	 */
	exported function "solve.default"("a", "b", "tol"=".Machine$double.eps", "LINPACK"="FALSE", "...")
	/**
	 * 
	 * \code{qr} computes the QR decomposition of a matrix.
	 *
	 */
	exported function "solve.qr"("a", "b", "...")
	/**
	 * 
	 * Sort (or \emph{order}) a vector or factor (partially) into
	 * ascending or descending order.  For ordering along more than one
	 * variable, e.g., for sorting data frames, see \code{\link{order}}.
	 *
	 */
	exported function "sort"("x", "decreasing"="FALSE", "...")
	/**
	 * 
	 * Sort (or \emph{order}) a vector or factor (partially) into
	 * ascending or descending order.  For ordering along more than one
	 * variable, e.g., for sorting data frames, see \code{\link{order}}.
	 *
	 */
	exported function "sort.default"("x", "decreasing"="FALSE", "na.last"="NA", "...")
	/**
	 * 
	 * Sort (or \emph{order}) a vector or factor (partially) into
	 * ascending or descending order.  For ordering along more than one
	 * variable, e.g., for sorting data frames, see \code{\link{order}}.
	 *
	 */
	exported function "sort.int"("x", "partial"="", "na.last"="NA", "decreasing"="FALSE", "method"="c(\"shell\", \"quick\", \"radix\")", "index.return"="FALSE")
	/**
	 * 
	 * \code{order} returns a permutation which rearranges its first
	 * argument into ascending or descending order, breaking ties by further
	 * arguments. \code{sort.list} is the same, using only one argument.\cr{}
	 * See the examples for how to use these functions to sort data frames,
	 * etc.
	 *
	 */
	exported function "sort.list"("x", "partial"="", "na.last"="TRUE", "decreasing"="FALSE", "method"="c(\"shell\", \"quick\", \"radix\")")
	/**
	 * 
	 * Sort (or \emph{order}) a vector or factor (partially) into
	 * ascending or descending order.  For ordering along more than one
	 * variable, e.g., for sorting data frames, see \code{\link{order}}.
	 *
	 */
	exported function "sort.POSIXlt"("x", "decreasing"="FALSE", "na.last"="NA", "...")
	/**
	 * 
	 * \code{source} causes \R{} to accept its input from the named file or URL
	 * or connection.  Input is read and \code{\link{parse}}d from that file
	 * until the end of the file is reached, then the parsed expressions are
	 * evaluated sequentially in the chosen environment.
	 *
	 */
	exported function "source"("file", "local"="FALSE", "echo", "print.eval", "verbose"="getOption(\"verbose\")", "prompt.echo"="getOption(\"prompt\")", "max.deparse.length"="150", "chdir"="FALSE", "encoding"="getOption(\"encoding\")", "continue.echo"="getOption(\"continue\")", "skip.echo"="0", "keep.source"="getOption(\"keep.source\")")
	/**
	 * 
	 * \code{split} divides the data in the vector \code{x} into the groups
	 * defined by \code{f}.  The replacement forms replace values
	 * corresponding to such a division.  \code{unsplit} reverses the effect of
	 * \code{split}.
	 *
	 */
	exported function "split"("x", "f", "drop"="FALSE", "...")
	/**
	 * 
	 * \code{split} divides the data in the vector \code{x} into the groups
	 * defined by \code{f}.  The replacement forms replace values
	 * corresponding to such a division.  \code{unsplit} reverses the effect of
	 * \code{split}.
	 *
	 */
	exported function "split.data.frame"("x", "f", "drop"="FALSE", "...")
	/**
	 * 
	 * Description of the class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "split.Date"("x", "f", "drop"="FALSE", "...")
	/**
	 * 
	 * \code{split} divides the data in the vector \code{x} into the groups
	 * defined by \code{f}.  The replacement forms replace values
	 * corresponding to such a division.  \code{unsplit} reverses the effect of
	 * \code{split}.
	 *
	 */
	exported function "split.default"("x", "f", "drop"="FALSE", "sep"=".", "...")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "split.POSIXct"("x", "f", "drop"="FALSE", "...")
	/**
	 * 
	 * \code{split} divides the data in the vector \code{x} into the groups
	 * defined by \code{f}.  The replacement forms replace values
	 * corresponding to such a division.  \code{unsplit} reverses the effect of
	 * \code{split}.
	 *
	 */
	exported function "split<-"("x", "f", "drop"="FALSE", "...", "value")
	/**
	 * 
	 * \code{split} divides the data in the vector \code{x} into the groups
	 * defined by \code{f}.  The replacement forms replace values
	 * corresponding to such a division.  \code{unsplit} reverses the effect of
	 * \code{split}.
	 *
	 */
	exported function "split<-.data.frame"("x", "f", "drop"="FALSE", "...", "value")
	/**
	 * 
	 * \code{split} divides the data in the vector \code{x} into the groups
	 * defined by \code{f}.  The replacement forms replace values
	 * corresponding to such a division.  \code{unsplit} reverses the effect of
	 * \code{split}.
	 *
	 */
	exported function "split<-.default"("x", "f", "drop"="FALSE", "...", "value")
	/**
	 * 
	 * A wrapper for the C function \code{sprintf}, that returns a character
	 * vector containing a formatted combination of text and variable values.
	 *
	 */
	exported function "sprintf"("fmt", "...")
	/**
	 * 
	 * \code{abs(x)} computes the absolute value of x, \code{sqrt(x)} computes the
	 * (principal) square root of x, \eqn{{\sqrt{x}}}.% Details for complex x are below
	 *
	 * The naming follows the standard for computer languages such as C or Fortran.
	 *
	 */
	exported primitive function "sqrt"("x")
	/**
	 * 
	 * Single or double quote text by combining with appropriate single or
	 * double left and right quotation marks.
	 *
	 */
	exported function "sQuote"("x")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "srcfile"("filename", "encoding"="getOption(\"encoding\")", "Enc"="unknown")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "srcfilealias"("filename", "srcfile")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "srcfilecopy"("filename", "lines", "timestamp"="Sys.time()", "isFile"="FALSE")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "srcref"("srcfile", "lloc")
	/**
	 * 
	 * The function \code{standardGeneric} initiates dispatch of S4
	 * methods: see the references and the documentation of the
	 * \pkg{methods} package.  Usually, calls to this function are
	 * generated automatically and not explicitly by the programmer.
	 *
	 */
	exported primitive function "standardGeneric"("f", "fdef")
	/**
	 * 
	 * Determines if entries of \code{x} start or end with string (entries of)
	 * \code{prefix} or \code{suffix} respectively, where strings are
	 * recycled to common lengths.
	 *
	 * \code{startsWith()} is equivalent to but much faster than
	 * \preformatted{substring(x, 1, nchar(prefix)) == prefix}
	 * or also \preformatted{grepl("^<prefix>", x)} where \code{prefix} is
	 * not to contain special regular expression characters.
	 *
	 */
	exported function "startsWith"("x", "prefix")
	/**
	 * 
	 * Display aspects of \link{connections}.
	 *
	 */
	exported function "stderr"()
	/**
	 * 
	 * Display aspects of \link{connections}.
	 *
	 */
	exported function "stdin"()
	/**
	 * 
	 * Display aspects of \link{connections}.
	 *
	 */
	exported function "stdout"()
	/**
	 * 
	 * \code{stop} stops execution of the current expression and executes
	 * an error action.
	 *
	 * \code{geterrmessage} gives the last error message.
	 *
	 */
	exported function "stop"("...", "call."="TRUE", "domain"="")
	/**
	 * 
	 * If any of the expressions in \code{\dots{}} are not \code{\link{all}}
	 * \code{TRUE}, \code{\link{stop}} is called, producing an error message
	 * indicating the \emph{first} of the elements of \code{\dots{}} which were
	 * not true.
	 *
	 */
	exported function "stopifnot"("...")
	/**
	 * 
	 * Get or set the type or storage mode of an object.
	 *
	 */
	exported function "storage.mode"("x")
	/**
	 * 
	 * Get or set the type or storage mode of an object.
	 *
	 */
	exported primitive function "storage.mode<-"("x", "value")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * classes \code{"POSIXlt"} and \code{"POSIXct"} representing calendar
	 * dates and times.
	 *
	 */
	exported function "strftime"("x", "format"="", "tz"="", "usetz"="FALSE", "...")
	/**
	 * 
	 * Functions to convert between character representations and objects of
	 * classes \code{"POSIXlt"} and \code{"POSIXct"} representing calendar
	 * dates and times.
	 *
	 */
	exported function "strptime"("x", "format", "tz"="")
	/**
	 * 
	 * Repeat the character strings in a character vector a given number of
	 * times (i.e., concatenate the respective numbers of copies of the
	 * strings).
	 *
	 */
	exported function "strrep"("x", "times")
	/**
	 * 
	 * Split the elements of a character vector \code{x} into substrings
	 * according to the matches to substring \code{split} within them.
	 *
	 */
	exported function "strsplit"("x", "split", "fixed"="FALSE", "perl"="FALSE", "useBytes"="FALSE")
	/**
	 * 
	 * Convert strings to integers according to the given base using the C
	 * function \code{strtol}, or choose a suitable base following the C rules.
	 *
	 */
	exported function "strtoi"("x", "base"="0")
	/**
	 * 
	 * Trim character strings to specified display widths.
	 *
	 */
	exported function "strtrim"("x", "width")
	/**
	 * 
	 * \code{structure} returns the given object with further
	 * \link{attributes} set.
	 *
	 */
	exported function "structure"(".Data", "...")
	/**
	 * 
	 * Each character string in the input is first split into paragraphs (or
	 * lines containing whitespace only).  The paragraphs are then formatted
	 * by breaking lines at word boundaries.  The target columns for wrapping
	 * lines and the indentation of the first and all subsequent lines of a
	 * paragraph can be controlled independently.
	 *
	 */
	exported function "strwrap"("x", "width"="0.9 * getOption(\"width\")", "indent"="0", "exdent"="0", "prefix"="", "simplify"="TRUE", "initial")
	/**
	 * 
	 * \code{grep}, \code{grepl}, \code{regexpr}, \code{gregexpr} and
	 * \code{regexec} search for matches to argument \code{pattern} within
	 * each element of a character vector: they differ in the format of and
	 * amount of detail in the results.
	 *
	 * \code{sub} and \code{gsub} perform replacement of the first and all
	 * matches respectively.
	 *
	 */
	exported function "sub"("pattern", "replacement", "x", "ignore.case"="FALSE", "perl"="FALSE", "fixed"="FALSE", "useBytes"="FALSE")
	/**
	 * 
	 * Return subsets of vectors, matrices or data frames which meet conditions.
	 *
	 */
	exported function "subset"("x", "...")
	/**
	 * 
	 * Return subsets of vectors, matrices or data frames which meet conditions.
	 *
	 */
	exported function "subset.data.frame"("x", "subset", "select", "drop"="FALSE", "...")
	/**
	 * 
	 * Return subsets of vectors, matrices or data frames which meet conditions.
	 *
	 */
	exported function "subset.default"("x", "subset", "...")
	/**
	 * 
	 * Return subsets of vectors, matrices or data frames which meet conditions.
	 *
	 */
	exported function "subset.matrix"("x", "subset", "select", "drop"="FALSE", "...")
	/**
	 * 
	 * \code{substitute} returns the parse tree for the (unevaluated)
	 * expression \code{expr}, substituting any variables bound in
	 * \code{env}.
	 *
	 * \code{quote} simply returns its argument. The argument is not evaluated
	 * and can be any R expression.
	 *
	 * \code{enquote} is a simple one-line utility which transforms a call of
	 * the form \code{Foo(....)} into the call \code{quote(Foo(....))}.  This
	 * is typically used to protect a \code{\link{call}} from early evaluation.
	 *
	 */
	exported primitive function "substitute"("expr", "env")
	/**
	 * 
	 * Extract or replace substrings in a character vector.
	 *
	 */
	exported function "substr"("x", "start", "stop")
	/**
	 * 
	 * Extract or replace substrings in a character vector.
	 *
	 */
	exported function "substr<-"("x", "start", "stop", "value")
	/**
	 * 
	 * Extract or replace substrings in a character vector.
	 *
	 */
	exported function "substring"("text", "first", "last"="1000000")
	/**
	 * 
	 * Extract or replace substrings in a character vector.
	 *
	 */
	exported function "substring<-"("text", "first", "last"="1000000", "value")
	/**
	 * 
	 * \code{sum} returns the sum of all the values
	 * present in its arguments.
	 *
	 */
	exported primitive function "sum"("...", "na.rm" = "FALSE")
	/**
	 * 
	 * \code{summary} is a generic function used to produce result summaries
	 * of the results of various model fitting functions.  The function
	 * invokes particular \code{\link{methods}} which depend on the
	 * \code{\link{class}} of the first argument.
	 *
	 */
	exported function "summary"("object", "...")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "summary.connection"("object", "...")
	/**
	 * 
	 * \code{summary} is a generic function used to produce result summaries
	 * of the results of various model fitting functions.  The function
	 * invokes particular \code{\link{methods}} which depend on the
	 * \code{\link{class}} of the first argument.
	 *
	 */
	exported function "summary.data.frame"("object", "maxsum"="7", "digits"="max(3L, getOption(\"digits\") - 3L)", "...")
	/**
	 * 
	 * Group generic methods can be defined for four pre-specified groups of
	 * functions, \code{Math}, \code{Ops}, \code{Summary} and \code{Complex}.
	 * (There are no objects of these names in base \R{}, but there are in the
	 * \pkg{methods} package.)
	 *
	 * A method defined for an individual member of the group takes
	 * precedence over a method defined for the group as a whole.
	 *
	 */
	exported function "Summary.data.frame"("...", "na.rm")
	/**
	 * 
	 * Description of the class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "summary.Date"("object", "digits"="12", "...")
	/**
	 * 
	 * Description of the class \code{"Date"} representing calendar dates.
	 *
	 */
	exported function "Summary.Date"("...", "na.rm")
	/**
	 * 
	 * \code{summary} is a generic function used to produce result summaries
	 * of the results of various model fitting functions.  The function
	 * invokes particular \code{\link{methods}} which depend on the
	 * \code{\link{class}} of the first argument.
	 *
	 */
	exported function "summary.default"("object", "...", "digits"="max(3L, getOption(\"digits\") - 3L)")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "Summary.difftime"("...", "na.rm")
	/**
	 * 
	 * \code{summary} is a generic function used to produce result summaries
	 * of the results of various model fitting functions.  The function
	 * invokes particular \code{\link{methods}} which depend on the
	 * \code{\link{class}} of the first argument.
	 *
	 */
	exported function "summary.factor"("object", "maxsum"="100", "...")
	/**
	 * 
	 * The function \code{factor} is used to encode a vector as a factor (the
	 * terms \sQuote{category} and \sQuote{enumerated type} are also used for
	 * factors).  If argument \code{ordered} is \code{TRUE}, the factor
	 * levels are assumed to be ordered.  For compatibility with S there is
	 * also a function \code{ordered}.
	 *
	 * \code{is.factor}, \code{is.ordered}, \code{as.factor} and \code{as.ordered}
	 * are the membership and coercion functions for these classes.
	 *
	 */
	exported function "Summary.factor"("...", "na.rm")
	/**
	 * 
	 * \code{summary} is a generic function used to produce result summaries
	 * of the results of various model fitting functions.  The function
	 * invokes particular \code{\link{methods}} which depend on the
	 * \code{\link{class}} of the first argument.
	 *
	 */
	exported function "summary.matrix"("object", "...")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "Summary.numeric_version"("...", "na.rm")
	/**
	 * 
	 * The function \code{factor} is used to encode a vector as a factor (the
	 * terms \sQuote{category} and \sQuote{enumerated type} are also used for
	 * factors).  If argument \code{ordered} is \code{TRUE}, the factor
	 * levels are assumed to be ordered.  For compatibility with S there is
	 * also a function \code{ordered}.
	 *
	 * \code{is.factor}, \code{is.ordered}, \code{as.factor} and \code{as.ordered}
	 * are the membership and coercion functions for these classes.
	 *
	 */
	exported function "Summary.ordered"("...", "na.rm")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "summary.POSIXct"("object", "digits"="15", "...")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "Summary.POSIXct"("...", "na.rm")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "summary.POSIXlt"("object", "digits"="15", "...")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "Summary.POSIXlt"("...", "na.rm")
	/**
	 * 
	 * \code{proc.time} determines how much real and CPU time (in seconds)
	 * the currently running \R{} process has already taken.
	 *
	 */
	exported function "summary.proc_time"("object", "...")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "summary.srcfile"("object", "...")
	/**
	 * 
	 *These functions are for working with source files.
	 *
	 */
	exported function "summary.srcref"("object", "useSource"="FALSE", "...")
	/**
	 * 
	 * \code{table} uses the cross-classifying factors to build a contingency
	 * table of the counts at each combination of factor levels.
	 *
	 */
	exported function "summary.table"("object", "...")
	/**
	 * 
	 * Generate a diagnostic message from its arguments.
	 *
	 */
	exported function "suppressMessages"("expr")
	/**
	 * 
	 * Generate a diagnostic message from its arguments.
	 *
	 */
	exported function "suppressPackageStartupMessages"("expr")
	/**
	 * 
	 * Generates a warning message that corresponds to its argument(s) and
	 * (optionally) the expression or function from which it was called.
	 *
	 */
	exported function "suppressWarnings"("expr")
	/**
	 * 
	 * Compute the singular-value decomposition of a rectangular matrix.
	 *
	 */
	exported function "svd"("x", "nu"="min(n, p)", "nv"="min(n, p)", "LINPACK"="FALSE")
	/**
	 * 
	 * Return an array obtained from an input array by sweeping out a summary
	 * statistic.
	 *
	 */
	exported function "sweep"("x", "MARGIN", "STATS", "FUN"="-", "check.margin"="TRUE", "...")
	/**
	 * 
	 * \code{switch} evaluates \code{EXPR} and accordingly chooses one of the
	 * further arguments (in \code{\dots{}}).
	 *
	 */
	exported primitive function "switch"("EXPR", "...")
	/**
	 * 
	 * These functions provide access to \code{\link{environment}}s
	 * (\sQuote{frames} in S terminology) associated with functions further
	 * up the calling stack.
	 *
	 */
	exported function "sys.call"("which"="0")
	/**
	 * 
	 * These functions provide access to \code{\link{environment}}s
	 * (\sQuote{frames} in S terminology) associated with functions further
	 * up the calling stack.
	 *
	 */
	exported function "sys.calls"()
	/**
	 * 
	 * These functions provide a low-level interface to the computer's
	 * file system.
	 *
	 */
	exported function "Sys.chmod"("paths", "mode"="0777", "use_umask"="TRUE")
	/**
	 * 
	 * \code{Sys.time} and \code{Sys.Date} returns the system's idea of the
	 * current date with and without time.
	 *
	 */
	exported function "Sys.Date"()
	/**
	 * 
	 * These functions provide access to \code{\link{environment}}s
	 * (\sQuote{frames} in S terminology) associated with functions further
	 * up the calling stack.
	 *
	 */
	exported function "sys.frame"("which"="0")
	/**
	 * 
	 * These functions provide access to \code{\link{environment}}s
	 * (\sQuote{frames} in S terminology) associated with functions further
	 * up the calling stack.
	 *
	 */
	exported function "sys.frames"()
	/**
	 * 
	 * These functions provide access to \code{\link{environment}}s
	 * (\sQuote{frames} in S terminology) associated with functions further
	 * up the calling stack.
	 *
	 */
	exported function "sys.function"("which"="0")
	/**
	 * 
	 * \code{Sys.getenv} obtains the values of the environment variables.
	 *
	 */
	exported function "Sys.getenv"("x"="", "unset"="", "names"="NA")
	/**
	 * 
	 * Get details of or set aspects of the locale for the \R{} process.
	 *
	 */
	exported function "Sys.getlocale"("category"="LC_ALL")
	/**
	 * 
	 * Get the process ID of the \R{} Session.  It is guaranteed by the
	 * operating system that two \R{} sessions running simultaneously will
	 * have different IDs, but it is possible that \R{} sessions running at
	 * different times will have the same ID.
	 *
	 */
	exported function "Sys.getpid"()
	/**
	 * 
	 * Function to do wildcard expansion (also known as \sQuote{globbing}) on
	 * file paths.
	 *
	 */
	exported function "Sys.glob"("paths", "dirmark"="FALSE")
	/**
	 * 
	 * Reports system and user information.
	 *
	 */
	exported function "Sys.info"()
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function "sys.load.image"("name", "quiet")
	/**
	 * 
	 * Get details of the numerical and monetary representations in the
	 * current locale.
	 *
	 */
	exported function "Sys.localeconv"()
	/**
	 * 
	 * These functions provide access to \code{\link{environment}}s
	 * (\sQuote{frames} in S terminology) associated with functions further
	 * up the calling stack.
	 *
	 */
	exported function "sys.nframe"()
	/**
	 * 
	 * These functions provide access to \code{\link{environment}}s
	 * (\sQuote{frames} in S terminology) associated with functions further
	 * up the calling stack.
	 *
	 */
	exported function "sys.on.exit"()
	/**
	 * 
	 * These functions provide access to \code{\link{environment}}s
	 * (\sQuote{frames} in S terminology) associated with functions further
	 * up the calling stack.
	 *
	 */
	exported function "sys.parent"("n"="1")
	/**
	 * 
	 * These functions provide access to \code{\link{environment}}s
	 * (\sQuote{frames} in S terminology) associated with functions further
	 * up the calling stack.
	 *
	 */
	exported function "sys.parents"()
	/**
	 * 
	 * Find out if a file path is a symbolic link, and if so what it is
	 * linked to, \emph{via} the system call \code{readlink}.
	 *
	 * Symbolic links are a POSIX concept, not implemented on Windows but for
	 * most filesystems on Unix-alikes.
	 *
	 */
	exported function "Sys.readlink"("paths")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function "sys.save.image"("name")
	/**
	 * 
	 * \code{Sys.setenv} sets environment variables (for other processes
	 * called from within \R{} or future calls to \code{\link{Sys.getenv}} from
	 * this \R{} process).
	 *
	 * \code{Sys.unsetenv} removes environment variables.
	 *
	 */
	exported function "Sys.setenv"("...")
	/**
	 * 
	 * Uses system calls to set the times on a file or directory.
	 *
	 */
	exported function "Sys.setFileTime"("path", "time")
	/**
	 * 
	 * Get details of or set aspects of the locale for the \R{} process.
	 *
	 */
	exported function "Sys.setlocale"("category"="LC_ALL", "locale"="")
	/**
	 * 
	 * Suspend execution of \R{} expressions for a specified time interval.
	 *
	 */
	exported function "Sys.sleep"("time")
	/**
	 * 
	 * Parses expressions in the given file, and then successively evaluates
	 * them in the specified environment.
	 *
	 */
	exported function "sys.source"("file", "envir"="baseenv()", "chdir"="FALSE", "keep.source"="getOption(\"keep.source.pkgs\")")
	/**
	 * 
	 * These functions provide access to \code{\link{environment}}s
	 * (\sQuote{frames} in S terminology) associated with functions further
	 * up the calling stack.
	 *
	 */
	exported function "sys.status"()
	/**
	 * 
	 * \code{Sys.time} and \code{Sys.Date} returns the system's idea of the
	 * current date with and without time.
	 *
	 */
	exported function "Sys.time"()
	/**
	 * 
	 * Information about time zones in \R{}.  \code{Sys.timezone} returns
	 * the name of the current time zone.
	 *
	 */
	exported function "Sys.timezone"("location"="TRUE")
	/**
	 * 
	 * These functions provide a low-level interface to the computer's
	 * file system.
	 *
	 */
	exported function "Sys.umask"("mode"="NA")
	/**
	 * 
	 * \code{Sys.setenv} sets environment variables (for other processes
	 * called from within \R{} or future calls to \code{\link{Sys.getenv}} from
	 * this \R{} process).
	 *
	 * \code{Sys.unsetenv} removes environment variables.
	 *
	 */
	exported function "Sys.unsetenv"("x")
	/**
	 * 
	 * This is an interface to the system command \code{which}, or to an
	 * emulation on Windows.
	 *
	 */
	exported function "Sys.which"("names")
	/**
	 * 
	 * \code{system} invokes the OS command specified by \code{command}.
	 *
	 */
	exported function "system"("command", "intern"="FALSE", "ignore.stdout"="FALSE", "ignore.stderr"="FALSE", "wait"="TRUE", "input"="", "show.output.on.console"="TRUE", "minimized"="FALSE", "invisible"="TRUE")
	/**
	 * 
	 * Finds the full file names of files in packages etc.
	 *
	 */
	exported function "system.file"("...", "package"="base", "lib.loc"="", "mustWork"="FALSE")
	/**
	 * Return CPU (and other) times that \code{expr} used.
	 *
	 */
	exported function "system.time"("expr", "gcFirst"="TRUE")
	/**
	 * 
	 * \code{system2} invokes the OS command specified by \code{command}.
	 *
	 */
	exported function "system2"("command", "args"="character()", "stdout"="", "stderr"="", "stdin"="", "input"="", "env"="character()", "wait"="TRUE", "minimized"="FALSE", "invisible"="TRUE")
	/**
	 * 
	 * Given a matrix or \code{\link{data.frame}} \code{x},
	 * \code{t} returns the transpose of \code{x}.
	 *
	 */
	exported function "t"("x")
	/**
	 * 
	 * Create or test for objects of type \code{"logical"}, and the basic
	 * logical constants.
	 *
	 */
	exported var "T"
	/**
	 * 
	 * Given a matrix or \code{\link{data.frame}} \code{x},
	 * \code{t} returns the transpose of \code{x}.
	 *
	 */
	exported function "t.data.frame"("x")
	/**
	 * 
	 * Given a matrix or \code{\link{data.frame}} \code{x},
	 * \code{t} returns the transpose of \code{x}.
	 *
	 */
	exported function "t.default"("x")
	/**
	 * 
	 * \code{table} uses the cross-classifying factors to build a contingency
	 * table of the counts at each combination of factor levels.
	 *
	 */
	exported function "table"("...", "exclude"="if (useNA == \"no\") c(NA, NaN)", "useNA"="c(\"no\", \"ifany\", \"always\")", "dnn"="list.names(...)", "deparse.level"="1")
	/**
	 * 
	 * \code{tabulate} takes the integer-valued vector \code{bin} and counts
	 * the number of times each integer occurs in it.
	 *
	 */
	exported function "tabulate"("bin", "nbins"="max(1L, bin, na.rm = TRUE)")
	/**
	 * 
	 * These functions give the obvious trigonometric functions.  They
	 * respectively compute the cosine, sine, tangent, arc-cosine, arc-sine,
	 * arc-tangent, and the two-argument arc-tangent.
	 *
	 * \code{cospi(x)}, \code{sinpi(x)}, and \code{tanpi(x)}, compute
	 * \code{cos(pi*x)}, \code{sin(pi*x)}, and \code{tan(pi*x)}.
	 *
	 */
	exported primitive function "tan"("x")
	/**
	 * 
	 * These functions give the obvious hyperbolic functions.  They
	 * respectively compute the hyperbolic cosine, sine, tangent, and their
	 * inverses, arc-cosine, arc-sine, arc-tangent (or \sQuote{\emph{area cosine}},
	 * etc).
	 *
	 */
	exported primitive function "tanh"("x")
	/**
	 * 
	 * These functions give the obvious trigonometric functions.  They
	 * respectively compute the cosine, sine, tangent, arc-cosine, arc-sine,
	 * arc-tangent, and the two-argument arc-tangent.
	 *
	 * \code{cospi(x)}, \code{sinpi(x)}, and \code{tanpi(x)}, compute
	 * \code{cos(pi*x)}, \code{sin(pi*x)}, and \code{tan(pi*x)}.
	 *
	 */
	exported primitive function "tanpi"("x")
	/**
	 * 
	 * Apply a function to each cell of a ragged array, that is to each
	 * (non-empty) group of values given by a unique combination of the
	 * levels of certain factors.
	 *
	 */
	exported function "tapply"("X", "INDEX", "FUN"="", "...", "simplify"="TRUE")
	/**
	 * 
	 * This provides an entirely S-language mechanism
	 * for managing callbacks or actions  that are invoked at
	 * the conclusion of each top-level task.  Essentially,
	 * we register a single R function from this manager
	 * with the underlying, native
	 * task-callback mechanism and this function handles invoking the other
	 * R callbacks under the control of the manager.
	 * The manager consists of a collection of functions that access shared
	 * variables to manage the list of user-level callbacks.
	 *
	 */
	exported function "taskCallbackManager"("handlers"="list()", "registered"="FALSE", "verbose"="FALSE")
	/**
	 * 
	 * Given matrices \code{x} and \code{y} as arguments, return a matrix
	 * cross-product.  This is formally equivalent to (but usually slightly
	 * faster than) the call \code{t(x) %*% y} (\code{crossprod}) or
	 * \code{x %*% t(y)} (\code{tcrossprod}).
	 *
	 */
	exported function "tcrossprod"("x", "y"="")
	/**
	 * 
	 * \code{tempfile} returns a vector of character strings which can be used as
	 * names for temporary files.
	 *
	 */
	exported function "tempdir"()
	/**
	 * 
	 * \code{tempfile} returns a vector of character strings which can be used as
	 * names for temporary files.
	 *
	 */
	exported function "tempfile"("pattern"="file", "tmpdir"="tempdir()", "fileext"="")
	/**
	 * % 'most': see e.g., .mapply
	 * Internal objects in the base package most of which are only user-visible
	 * because of the special nature of the base namespace.
	 *
	 */
	exported function "testPlatformEquivalence"("built", "run")
	/**
	 * 
	 * Input and output text connections.
	 *
	 */
	exported function "textConnection"("object", "open"="r", "local"="FALSE", "encoding"="c(\"\", \"bytes\", \"UTF-8\")")
	/**
	 * 
	 * Input and output text connections.
	 *
	 */
	exported function "textConnectionValue"("con")
	/**
	 * 
	 * Translate characters in character vectors, in particular from upper to
	 * lower case or vice versa.
	 *
	 */
	exported function "tolower"("x")
	/**
	 * 
	 * Finding the top level \code{\link{environment}} from an environment
	 * \code{envir} and its enclosing environments.
	 *
	 */
	exported function "topenv"("envir"="parent.frame()", "matchThisEnv"="getOption(\"topLevelEnvironment\")")
	/**
	 * 
	 * This is a helper function for \code{\link{format}} to produce a single
	 * character string describing an \R{} object.
	 *
	 */
	exported function "toString"("x", "...")
	/**
	 * 
	 * This is a helper function for \code{\link{format}} to produce a single
	 * character string describing an \R{} object.
	 *
	 */
	exported function "toString.default"("x", "width"="", "...")
	/**
	 * 
	 * Translate characters in character vectors, in particular from upper to
	 * lower case or vice versa.
	 *
	 */
	exported function "toupper"("x")
	/**
	 * 
	 * A call to \code{trace} allows you to insert debugging code (e.g., a
	 * call to \code{\link{browser}} or \code{\link{recover}}) at chosen
	 * places in any function.  A call to \code{untrace} cancels the tracing.
	 * Specified methods can be traced the same way, without tracing all
	 * calls to the generic function.  Trace code (\code{tracer}) can be any
	 * \R{} expression.  Tracing can be temporarily turned on or off globally
	 * by calling \code{tracingState}.
	 *
	 */
	exported function "trace"("what", "tracer", "exit", "at", "print", "signature", "where"="topenv(parent.frame())", "edit"="FALSE")
	/**
	 * 
	 * By default \code{traceback()} prints the call stack of the last
	 * uncaught error, i.e., the sequence of calls that lead to the error.
	 * This is useful when an error occurs with an unidentifiable error
	 * message.  It can also be used to print the current stack or
	 * arbitrary lists of deparsed calls.
	 *
	 * \code{.traceback()} now \emph{returns} the above call stack (and
	 * \code{traceback(x, *)} can be regarded as convenience function for
	 * printing the result of \code{.traceback(x)}).
	 *
	 */
	exported function "traceback"("x"="", "max.lines"="getOption(\"deparse.max.lines\")")
	/**
	 * 
	 * This function marks an object so that a message is printed whenever the
	 * internal code copies the object.  It is a
	 * major cause of hard-to-predict memory use in R.
	 *
	 */
	exported primitive function "tracemem"("x")
	/**
	 * 
	 * A call to \code{trace} allows you to insert debugging code (e.g., a
	 * call to \code{\link{browser}} or \code{\link{recover}}) at chosen
	 * places in any function.  A call to \code{untrace} cancels the tracing.
	 * Specified methods can be traced the same way, without tracing all
	 * calls to the generic function.  Trace code (\code{tracer}) can be any
	 * \R{} expression.  Tracing can be temporarily turned on or off globally
	 * by calling \code{tracingState}.
	 *
	 */
	exported function "tracingState"("on"="")
	/**
	 * 
	 * \code{transform} is a generic function, which---at least
	 * currently---only does anything useful with
	 * data frames.  \code{transform.default} converts its first argument to
	 * a data frame if possible and calls \code{transform.data.frame}.
	 *
	 */
	exported function "transform"("_data", "...")
	/**
	 * 
	 * \code{transform} is a generic function, which---at least
	 * currently---only does anything useful with
	 * data frames.  \code{transform.default} converts its first argument to
	 * a data frame if possible and calls \code{transform.data.frame}.
	 *
	 */
	exported function "transform.data.frame"("_data", "...")
	/**
	 * 
	 * \code{transform} is a generic function, which---at least
	 * currently---only does anything useful with
	 * data frames.  \code{transform.default} converts its first argument to
	 * a data frame if possible and calls \code{transform.data.frame}.
	 *
	 */
	exported function "transform.default"("_data", "...")
	/**
	 * 
	 * Special mathematical functions related to the beta and gamma
	 * functions.
	 *
	 */
	exported primitive function "trigamma"("x")
	/**
	 * 
	 * Remove leading and/or trailing whitespace from character strings.
	 *
	 */
	exported function "trimws"("x", "which"="c(\"both\", \"left\", \"right\")")
	/**
	 * 
	 * \code{ceiling} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the smallest integers not less than the
	 * corresponding elements of \code{x}.
	 *
	 * \code{floor} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the largest integers not greater than the
	 * corresponding elements of \code{x}.
	 *
	 * \code{trunc} takes a single numeric argument \code{x} and returns a
	 * numeric vector containing the integers formed by truncating the values in
	 * \code{x} toward \code{0}.
	 *
	 * \code{round} rounds the values in its first argument to the specified
	 * number of decimal places (default 0).
	 *
	 * \code{signif} rounds the values in its first argument to the specified
	 * number of significant digits.
	 *
	 */
	exported primitive function "trunc"("x", "...")
	/**
	 * 
	 * Round or truncate date-time objects.
	 *
	 */
	exported function "trunc.Date"("x", "...")
	/**
	 * 
	 * Round or truncate date-time objects.
	 *
	 */
	exported function "trunc.POSIXt"("x", "units"="c(\"secs\", \"mins\", \"hours\", \"days\")", "...")
	/**
	 * 
	 * Functions to re-position connections.
	 *
	 */
	exported function "truncate"("con", "...")
	/**
	 * 
	 * Functions to re-position connections.
	 *
	 */
	exported function "truncate.connection"("con", "...")
	/**
	 * 
	 * \code{try} is a wrapper to run an expression that might fail and allow
	 * the user's code to handle error-recovery.
	 *
	 */
	exported function "try"("expr", "silent"="FALSE")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "tryCatch"("expr", "...", "finally")
	/**
	 * 
	 * \code{typeof} determines the (\R{} internal)
	 * type or storage mode of any object
	 *
	 */
	exported function "typeof"("x")
	/**
	 * 
	 * \R{} possesses a simple generic function mechanism which can be used for
	 * an object-oriented style of programming.  Method dispatch takes place
	 * based on the class of the first argument to the generic function.
	 *
	 */
	exported primitive function "unclass"("x")
	/**
	 * 
	 * Set, unset or query the debugging flag on a function.
	 * The \code{text} and \code{condition} arguments are the same as those
	 * that can be supplied via a call to \code{browser}. They can be retrieved
	 * by the user once the browser has been entered, and provide a mechanism to
	 * allow users to identify which breakpoint has been activated.
	 *
	 */
	exported function "undebug"("fun")
	/**
	 * 
	 * Performs \bold{set} union, intersection, (asymmetric!) difference,
	 * equality and membership on two vectors.
	 *
	 */
	exported function "union"("x", "y")
	/**
	 * 
	 * \code{unique} returns a vector, data frame or array like \code{x}
	 * but with duplicate elements/rows removed.
	 *
	 */
	exported function "unique"("x", "incomparables"="FALSE", "...")
	/**
	 * 
	 * \code{unique} returns a vector, data frame or array like \code{x}
	 * but with duplicate elements/rows removed.
	 *
	 */
	exported function "unique.array"("x", "incomparables"="FALSE", "MARGIN"="1", "fromLast"="FALSE", "...")
	/**
	 * 
	 * \code{unique} returns a vector, data frame or array like \code{x}
	 * but with duplicate elements/rows removed.
	 *
	 */
	exported function "unique.data.frame"("x", "incomparables"="FALSE", "fromLast"="FALSE", "...")
	/**
	 * 
	 * \code{unique} returns a vector, data frame or array like \code{x}
	 * but with duplicate elements/rows removed.
	 *
	 */
	exported function "unique.default"("x", "incomparables"="FALSE", "fromLast"="FALSE", "nmax"="NA", "...")
	/**
	 * 
	 * \code{unique} returns a vector, data frame or array like \code{x}
	 * but with duplicate elements/rows removed.
	 *
	 */
	exported function "unique.matrix"("x", "incomparables"="FALSE", "MARGIN"="1", "fromLast"="FALSE", "...")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "unique.numeric_version"("x", "incomparables"="FALSE", "...")
	/**
	 * 
	 * Description of the classes \code{"POSIXlt"} and \code{"POSIXct"}
	 * representing calendar dates and times.
	 *
	 */
	exported function "unique.POSIXlt"("x", "incomparables"="FALSE", "...")
	/**
	 * 
	 * \code{warnings} and its \code{print} method print the
	 * variable \code{last.warning} in a pleasing form.
	 *
	 */
	exported function "unique.warnings"("x", "incomparables"="FALSE", "...")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "units"("x")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "units.difftime"("x")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "units<-"("x", "value")
	/**
	 * 
	 * Time intervals creation, printing, and some arithmetic.  The
	 * \code{\link{print}()} method calls these \dQuote{time differences}.
	 *
	 */
	exported function "units<-.difftime"("x", "value")
	/**
	 * Return CPU (and other) times that \code{expr} used.
	 *
	 */
	exported function "unix.time"("expr", "gcFirst"="TRUE")
	/**
	 * 
	 * \code{unlink} deletes the file(s) or directories specified by \code{x}.
	 *
	 */
	exported function "unlink"("x", "recursive"="FALSE", "force"="FALSE")
	/**
	 * 
	 * Given a list structure \code{x}, \code{unlist} simplifies it to
	 * produce a vector which contains all the atomic components
	 * which occur in \code{x}.
	 *
	 */
	exported function "unlist"("x", "recursive"="TRUE", "use.names"="TRUE")
	/**
	 * 
	 * Functions to load and unload name spaces.
	 *
	 */
	exported function "unloadNamespace"("ns")
	/**
	 * 
	 * These functions represent an interface for adjustments
	 * to environments and bindings within environments.  They allow for
	 * locking environments as well as individual bindings, and for linking
	 * a variable to a function.
	 *
	 */
	exported function "unlockBinding"("sym", "env")
	/**
	 * 
	 * Remove the \code{\link{names}} or \code{\link{dimnames}} attribute of
	 * an \R{} object.
	 *
	 */
	exported function "unname"("obj", "force"="FALSE")
	/**
	 * 
	 * A simple low-level interface for serializing to connections.
	 *
	 */
	exported function "unserialize"("connection", "refhook"="")
	/**
	 * 
	 * \code{split} divides the data in the vector \code{x} into the groups
	 * defined by \code{f}.  The replacement forms replace values
	 * corresponding to such a division.  \code{unsplit} reverses the effect of
	 * \code{split}.
	 *
	 */
	exported function "unsplit"("value", "f", "drop"="FALSE")
	/**
	 * 
	 * A call to \code{trace} allows you to insert debugging code (e.g., a
	 * call to \code{\link{browser}} or \code{\link{recover}}) at chosen
	 * places in any function.  A call to \code{untrace} cancels the tracing.
	 * Specified methods can be traced the same way, without tracing all
	 * calls to the generic function.  Trace code (\code{tracer}) can be any
	 * \R{} expression.  Tracing can be temporarily turned on or off globally
	 * by calling \code{tracingState}.
	 *
	 */
	exported function "untrace"("what", "signature"="", "where"="topenv(parent.frame())")
	/**
	 * 
	 * This function marks an object so that a message is printed whenever the
	 * internal code copies the object.  It is a
	 * major cause of hard-to-predict memory use in R.
	 *
	 */
	exported primitive function "untracemem"("x")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "unz"("description", "filename", "open"="", "encoding"="getOption(\"encoding\")")
	/**
	 * 
	 * Returns a matrix of logicals the same size of a given matrix with
	 * entries \code{TRUE} in the lower or upper triangle.
	 *
	 */
	exported function "upper.tri"("x", "diag"="FALSE")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "url"("description", "open"="", "blocking"="TRUE", "encoding"="getOption(\"encoding\")", "method"="getOption(\"url.method\", \"default\")")
	/**
	 * 
	 * \R{} possesses a simple generic function mechanism which can be used for
	 * an object-oriented style of programming.  Method dispatch takes place
	 * based on the class(es) of the first argument to the generic function or of
	 * the object supplied as an argument to \code{UseMethod} or \code{NextMethod}.
	 *
	 */
	exported primitive function "UseMethod"("generic", "object")
	/**
	 * 
	 * Conversion of UTF-8 encoded character vectors to and from integer vectors.
	 *
	 */
	exported function "utf8ToInt"("x")
	/**
	 * 
	 * Check if each element of a character vector is valid in its implied
	 * encoding.
	 *
	 */
	exported function "validEnc"("x")
	/**
	 * 
	 * Check if each element of a character vector is valid in its implied
	 * encoding.
	 *
	 */
	exported function "validUTF8"("x")
	/**
	 * 
	 * \code{lapply} returns a list of the same length as \code{X}, each
	 * element of which is the result of applying \code{FUN} to the
	 * corresponding element of \code{X}.
	 *
	 * \code{sapply} is a user-friendly version and wrapper of \code{lapply}
	 * by default returning a vector, matrix or, if \code{simplify = "array"}, an
	 * array if appropriate, by applying \code{simplify2array()}.
	 * \code{sapply(x, f, simplify = FALSE, USE.NAMES = FALSE)} is the same as
	 * \code{lapply(x, f)}.
	 *
	 * \code{vapply} is similar to \code{sapply}, but has a pre-specified
	 * type of return value, so it can be safer (and sometimes faster) to
	 * use.
	 *
	 * \code{replicate} is a wrapper for the common use of \code{sapply} for
	 * repeated evaluation of an expression (which will usually involve
	 * random number generation).
	 *
	 * \code{simplify2array()} is the utility called from \code{sapply()}
	 * when \code{simplify} is not false and is similarly called from
	 * \code{\link{mapply}()}.
	 *
	 */
	exported function "vapply"("X", "FUN", "FUN.VALUE", "...", "USE.NAMES"="TRUE")
	/**
	 * 
	 * \code{vector} produces a vector of the given length and mode.
	 *
	 * \code{as.vector}, a generic, attempts to coerce its argument into a
	 * vector of mode \code{mode} (the default is to coerce to whichever
	 * vector mode is most convenient): if the result is atomic all
	 * attributes are removed.
	 *
	 * \code{is.vector} returns \code{TRUE} if \code{x} is a vector of the
	 * specified mode having no attributes \emph{other than names}.  It returns
	 * \code{FALSE} otherwise.
	 *
	 */
	exported function "vector"("mode"="logical", "length"="0")
	/**
	 * 
	 * \code{Vectorize} creates a function wrapper that vectorizes the
	 * action of its argument \code{FUN}.
	 *
	 */
	exported function "Vectorize"("FUN", "vectorize.args", "SIMPLIFY"="TRUE", "USE.NAMES"="TRUE")
	/**
	 * 
	 * \code{R.Version()} provides detailed information about the version of
	 * \R{} running.
	 *
	 * \code{R.version} is a variable (a \code{\link{list}}) holding this
	 * information (and \code{version} is a copy of it for S compatibility).
	 *
	 */
	exported var "version"
	/**
	 * 
	 * Generates a warning message that corresponds to its argument(s) and
	 * (optionally) the expression or function from which it was called.
	 *
	 */
	exported function "warning"("...", "call."="TRUE", "immediate."="FALSE", "noBreaks."="FALSE", "domain"="")
	/**
	 * 
	 * \code{warnings} and its \code{print} method print the
	 * variable \code{last.warning} in a pleasing form.
	 *
	 */
	exported function "warnings"("...")
	/**
	 * 
	 * Extract the weekday, month or quarter, or the Julian time
	 * (days since some origin).  These are generic functions: the methods
	 * for the internal date-time classes are documented here.
	 *
	 */
	exported function "weekdays"("x", "abbreviate")
	/**
	 * 
	 * Extract the weekday, month or quarter, or the Julian time
	 * (days since some origin).  These are generic functions: the methods
	 * for the internal date-time classes are documented here.
	 *
	 */
	exported function "weekdays.Date"("x", "abbreviate"="FALSE")
	/**
	 * 
	 * Extract the weekday, month or quarter, or the Julian time
	 * (days since some origin).  These are generic functions: the methods
	 * for the internal date-time classes are documented here.
	 *
	 */
	exported function "weekdays.POSIXt"("x", "abbreviate"="FALSE")
	/**
	 * 
	 * Give the \code{TRUE} indices of a logical object, allowing for array
	 * indices.
	 *
	 */
	exported function "which"("x", "arr.ind"="FALSE", "useNames"="TRUE")
	/**
	 * 
	 * Determines the location, i.e., index of the (first) minimum or maximum
	 * of a numeric (or logical) vector.
	 *
	 */
	exported function "which.max"("x")
	/**
	 * 
	 * Determines the location, i.e., index of the (first) minimum or maximum
	 * of a numeric (or logical) vector.
	 *
	 */
	exported function "which.min"("x")
	/**
	 * 
	 * These are the basic control-flow constructs of the \R{} language.  They
	 * function in much the same way as control statements in any Algol-like
	 * language.  They are all \link{reserved} words.
	 *
	 */
	exported primitive function "while"("NULL")
	/**
	 * 
	 * Evaluate an \R{} expression in an environment constructed from data,
	 * possibly modifying (a copy of) the original data.
	 *
	 */
	exported function "with"("data", "expr", "...")
	/**
	 * 
	 * Evaluate an \R{} expression in an environment constructed from data,
	 * possibly modifying (a copy of) the original data.
	 *
	 */
	exported function "with.default"("data", "expr", "...")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "withCallingHandlers"("expr", "...")
	/**
	 * 
	 * Evaluate an \R{} expression in an environment constructed from data,
	 * possibly modifying (a copy of) the original data.
	 *
	 */
	exported function "within"("data", "expr", "...")
	/**
	 * 
	 * Evaluate an \R{} expression in an environment constructed from data,
	 * possibly modifying (a copy of) the original data.
	 *
	 */
	exported function "within.data.frame"("data", "expr", "...")
	/**
	 * 
	 * Evaluate an \R{} expression in an environment constructed from data,
	 * possibly modifying (a copy of) the original data.
	 *
	 */
	exported function "within.list"("data", "expr", "...")
	/**
	 * 
	 * These functions provide a mechanism for handling unusual conditions,
	 * including errors and warnings.
	 *
	 */
	exported function "withRestarts"("expr", "...")
	/**
	 * 
	 *This function evaluates an expression, returning it in a two element list
	 *containing its value and a flag showing whether it would automatically print.
	 *
	 */
	exported function "withVisible"("x")
	/**
	 * 
	 * The data (usually a matrix) \code{x} are written to file \code{file}.
	 * If \code{x} is a two-dimensional matrix you need to transpose it to get the
	 * columns in \code{file} the same as those in the internal representation.
	 *
	 */
	exported function "write"("x", "file"="data", "ncolumns"="if (is.character(x)) 1 else 5", "append"="FALSE", "sep"=" ")
	/**
	 * 
	 * Reads or writes an \R{} object from/to a file in Debian Control File
	 * format.
	 *
	 */
	exported function "write.dcf"("x", "file"="", "append"="FALSE", "indent"="0.1 * getOption(\"width\")", "width"="0.9 * getOption(\"width\")", "keep.white"="")
	/**
	 * 
	 * Read binary data from or write binary data to a connection or raw vector.
	 *
	 */
	exported function "writeBin"("object", "con", "size"="NA", "endian"=".Platform$endian", "useBytes"="FALSE")
	/**
	 * 
	 * Transfer character strings to and from connections, without assuming
	 * they are null-terminated on the connection.
	 *
	 */
	exported function "writeChar"("object", "con", "nchars"="nchar(object, type = \"chars\")", "eos"="", "useBytes"="FALSE")
	/**
	 * 
	 * Write text lines to a connection.
	 *
	 */
	exported function "writeLines"("text", "con"="stdout()", "sep"="
", "useBytes"="FALSE")
	/**
	 * 
	 * These operators act on raw, logical and number-like vectors.
	 *
	 */
	exported function "xor"("x", "y")
	/**
	 * 
	 * Convert or print integers in hexadecimal format, with as many digits
	 * as are needed to display the largest, using leading zeroes as
	 * necessary.
	 *
	 */
	exported function "xor.hexmode"("a", "b")
	/**
	 * 
	 * Convert or print integers in octal format, with as many digits as are
	 * needed to display the largest, using leading zeroes as necessary.
	 *
	 */
	exported function "xor.octmode"("a", "b")
	/**
	 * 
	 * Internal auxiliary functions for use with data frames.
	 *
	 */
	exported function "xpdrows.data.frame"("x", "old.rows", "new.rows")
	/**
	 * 
	 * A generic auxiliary function that produces a numeric vector which
	 * will sort in the same order as \code{x}.
	 *
	 */
	exported primitive function "xtfrm"("x")
	/**
	 * 
	 * A generic auxiliary function that produces a numeric vector which
	 * will sort in the same order as \code{x}.
	 *
	 */
	exported function "xtfrm.AsIs"("x")
	/**
	 * 
	 * A generic auxiliary function that produces a numeric vector which
	 * will sort in the same order as \code{x}.
	 *
	 */
	exported function "xtfrm.Date"("x")
	/**
	 * 
	 * A generic auxiliary function that produces a numeric vector which
	 * will sort in the same order as \code{x}.
	 *
	 */
	exported function "xtfrm.default"("x")
	/**
	 * 
	 * A generic auxiliary function that produces a numeric vector which
	 * will sort in the same order as \code{x}.
	 *
	 */
	exported function "xtfrm.difftime"("x")
	/**
	 * 
	 * A generic auxiliary function that produces a numeric vector which
	 * will sort in the same order as \code{x}.
	 *
	 */
	exported function "xtfrm.factor"("x")
	/**
	 * A simple S3 class for representing numeric versions
	 * including package versions, and associated methods.
	 */
	exported function "xtfrm.numeric_version"("x")
	/**
	 * 
	 * A generic auxiliary function that produces a numeric vector which
	 * will sort in the same order as \code{x}.
	 *
	 */
	exported function "xtfrm.POSIXct"("x")
	/**
	 * 
	 * A generic auxiliary function that produces a numeric vector which
	 * will sort in the same order as \code{x}.
	 *
	 */
	exported function "xtfrm.POSIXlt"("x")
	/**
	 * 
	 * A generic auxiliary function that produces a numeric vector which
	 * will sort in the same order as \code{x}.
	 *
	 */
	exported function "xtfrm.Surv"("x")
	/**
	 * 
	 * Functions to create, open and close connections, i.e.,
	 * \dQuote{generalized files}, such as possibly compressed files, URLs,
	 * pipes, etc.
	 *
	 */
	exported function "xzfile"("description", "open"="", "encoding"="getOption(\"encoding\")", "compression"="6")
	/**
	 * 
	 * \code{zapsmall} determines a \code{digits} argument \code{dr} for
	 * calling \code{round(x, digits = dr)} such that values close to
	 * zero (compared with the maximal absolute value) are \sQuote{zapped},
	 * i.e., treated as \code{0}.
	 *
	 */
	exported function "zapsmall"("x", "digits"="getOption(\"digits\")")
}
